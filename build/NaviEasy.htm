<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\build\NaviEasy.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\build\NaviEasy.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5050169: Last Updated: Wed Jun 22 09:29:07 2016
<BR><P>
<H3>Maximum Stack Usage =        408 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; $Super$$main &rArr; Phone_DispatchMessage(unsigned char*) &rArr; Phone_EnterStudyMode(unsigned char) &rArr; CommBLE::SendPacket(const void*, int) &rArr; BLE::SendBytes(const void*, unsigned char) &rArr; BufferedSerial::putc(int) &rArr; BufferedSerial::prime() &rArr; mbed::SerialBase::attach(void(*)(), mbed::SerialBase::IrqType) &rArr; serial_irq_set &rArr; NVIC_SetVector
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[8]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">NMI_Handler</a><BR>
 <LI><a href="#[9]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">HardFault_Handler</a><BR>
 <LI><a href="#[a]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">SVC_Handler</a><BR>
 <LI><a href="#[b]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">PendSV_Handler</a><BR>
 <LI><a href="#[17]">ADC1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[17]">ADC1_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[33]">&lang;Func1&rang;</a> from SerialBase.o(i.<Func1>) referenced from SerialBase.o(i._ZN4mbed10SerialBaseC1E7PinNameS1_)
 <LI><a href="#[17]">ADC1_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[14]">DMA1_Channel1_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[15]">DMA1_Channel2_3_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[16]">DMA1_Channel4_5_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[11]">EXTI0_1_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[12]">EXTI2_3_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[13]">EXTI4_15_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[f]">FLASH_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[9]">HardFault_Handler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[1f]">I2C1_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[20]">I2C2_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[8]">NMI_Handler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[b]">PendSV_Handler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[10]">RCC_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[e]">RTC_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[7]">Reset_Handler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[21]">SPI1_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[22]">SPI2_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[a]">SVC_Handler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[c]">SysTick_Handler</a> from main.o(i.SysTick_Handler) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[26]">SystemInit</a> from system_stm32f0xx.o(i.SystemInit) referenced from startup_stm32f030x8.o(.text)
 <LI><a href="#[1b]">TIM14_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[1c]">TIM15_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[1d]">TIM16_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[1e]">TIM17_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[18]">TIM1_BRK_UP_TRG_COM_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[19]">TIM1_CC_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[1a]">TIM3_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[23]">USART1_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[24]">USART2_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[d]">WWDG_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[36]">__default_new_handler()</a> from arm_newhandler_noexceptions.o(.text) referenced from new.o(i._Znwj)
 <LI><a href="#[30]">HiReader_SerialHandler()</a> from highpowerreader.o(i._Z22HiReader_SerialHandlerv) referenced from highpowerreader.o(i._Z19HiReader_GetMessageP20HiReader_DataMessage)
 <LI><a href="#[2f]">ToggleLed()</a> from main.o(i._Z9ToggleLedv) referenced from main.o(i._Z12PowerOn_Initv)
 <LI><a href="#[3f]">BufferedSerial::txIrq()</a> from bufferedserial.o(i._ZN14BufferedSerial5txIrqEv) referenced from bufferedserial.o(.constdata)
 <LI><a href="#[47]">BufferedSerial::write(const void*, unsigned)</a> from bufferedserial.o(i._ZN14BufferedSerial5writeEPKvj) referenced from bufferedserial.o(.constdata__ZTV14BufferedSerial)
 <LI><a href="#[46]">BufferedSerial::~BufferedSerial__deallocating()</a> from bufferedserial.o(i._ZN14BufferedSerialD0Ev) referenced from bufferedserial.o(.constdata__ZTV14BufferedSerial)
 <LI><a href="#[2c]">[local to arm_exceptions_c]::__default_terminate_handler()</a> from arm_exceptions_globs.o(.text) referenced from arm_exceptions_globs.o(.text)
 <LI><a href="#[40]">BLE::SerialHandler()</a> from ble.o(i._ZN3BLE13SerialHandlerEv) referenced from ble.o(.constdata)
 <LI><a href="#[34]">mbed::SerialBase::_irq_handler(unsigned, SerialIrq)</a> from SerialBase.o(i._ZN4mbed10SerialBase12_irq_handlerEj9SerialIrq) referenced from SerialBase.o(i._ZN4mbed10SerialBaseC1E7PinNameS1_)
 <LI><a href="#[35]">mbed::TimerEvent::irq(unsigned)</a> from TimerEvent.o(i._ZN4mbed10TimerEvent3irqEj) referenced from TimerEvent.o(i._ZN4mbed10TimerEventC2Ev)
 <LI><a href="#[48]">mbed::TimerEvent::~TimerEvent__sub_object()</a> from TimerEvent.o(i._ZN4mbed10TimerEventD2Ev) referenced from TimerEvent.o(.constdata__ZTVN4mbed10TimerEventE)
 <LI><a href="#[3c]">mbed::CircularBuffer&lang;unsigned char, (unsigned)64, unsigned&rang;::~CircularBuffer()</a> from voice.o(t._ZN4mbed14CircularBufferIhLj64EjED1Ev) referenced from voice.o(i.__sti___9_Voice_cpp_ade2d123)
 <LI><a href="#[3a]">mbed::CircularBufferA&lang;RxTileInfo, unsigned&rang;::~CircularBufferA()</a> from highpowerreader.o(t._ZN4mbed15CircularBufferAI10RxTileInfojED1Ev) referenced from highpowerreader.o(i.__sti___19_HighPowerReader_cpp_39f899b3)
 <LI><a href="#[39]">mbed::CircularBufferA&lang;unsigned char, unsigned&rang;::~CircularBufferA()</a> from highpowerreader.o(t._ZN4mbed15CircularBufferAIhjED1Ev) referenced from highpowerreader.o(i.__sti___19_HighPowerReader_cpp_39f899b3)
 <LI><a href="#[31]">void mbed::FunctionPointerArg1&lang;void, void&rang;::membercaller&lang;BufferedSerial&rang;(void*, unsigned*)</a> from bufferedserial.o(t._ZN4mbed19FunctionPointerArg1IvvE12membercallerI14BufferedSerialEEvPvPj) referenced from bufferedserial.o(i._ZN14BufferedSerial5primeEv)
 <LI><a href="#[32]">void mbed::FunctionPointerArg1&lang;void, void&rang;::membercaller&lang;BLE&rang;(void*, unsigned*)</a> from ble.o(t._ZN4mbed19FunctionPointerArg1IvvE12membercallerI3BLEEEvPvPj) referenced from ble.o(i._ZN3BLEC1EP14BufferedSerialR16CircularBufferEx7PinNameS4_)
 <LI><a href="#[4a]">mbed::SPI::write(int)</a> from SPI.o(i._ZN4mbed3SPI5writeEi) referenced from SPI.o(.constdata__ZTVN4mbed3SPIE)
 <LI><a href="#[4b]">mbed::Ticker::handler()</a> from Ticker.o(i._ZN4mbed6Ticker7handlerEv) referenced from Ticker.o(.constdata__ZTVN4mbed6TickerE)
 <LI><a href="#[3b]">mbed::Ticker::~Ticker()</a> from main.o(i._ZN4mbed6TickerD1Ev) referenced from Ticker.o(.constdata__ZTVN4mbed6TickerE)
 <LI><a href="#[3b]">mbed::Ticker::~Ticker()</a> from main.o(i._ZN4mbed6TickerD1Ev) referenced from main.o(i.__sti___8_main_cpp_49697bbe)
 <LI><a href="#[4c]">mbed::Timeout::handler()</a> from Timeout.o(i._ZN4mbed7Timeout7handlerEv) referenced from Timeout.o(.constdata__ZTVN4mbed7TimeoutE)
 <LI><a href="#[49]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced from TimerEvent.o(.constdata__ZTVN4mbed10TimerEventE)
 <LI><a href="#[27]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f030x8.o(.text)
 <LI><a href="#[4e]">__sti___19_HighPowerReader_cpp_39f899b3</a> from highpowerreader.o(i.__sti___19_HighPowerReader_cpp_39f899b3) referenced from highpowerreader.o(.init_array)
 <LI><a href="#[4d]">__sti___8_main_cpp_49697bbe</a> from main.o(i.__sti___8_main_cpp_49697bbe) referenced from main.o(.init_array)
 <LI><a href="#[4f]">__sti___9_Voice_cpp_ade2d123</a> from voice.o(i.__sti___9_Voice_cpp_ade2d123) referenced from voice.o(.init_array)
 <LI><a href="#[29]">_sbackspace</a> from _sgetc.o(.text) referenced from __0sscanf.o(.text)
 <LI><a href="#[2a]">_scanf_char_input</a> from scanf_char.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[28]">_sgetc</a> from _sgetc.o(.text) referenced from __0sscanf.o(.text)
 <LI><a href="#[38]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0vsprintf)
 <LI><a href="#[37]">fputc</a> from fputc_fp.o(.text) referenced from printfa.o(i.__0vfprintf)
 <LI><a href="#[2b]">isspace</a> from isspace_c.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[25]">main</a> from retarget.o(i.$Sub$$main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[2e]">timer_oc_irq_handler</a> from hal_tick.o(i.timer_oc_irq_handler) referenced from hal_tick.o(i.HAL_InitTick)
 <LI><a href="#[2d]">timer_update_irq_handler</a> from hal_tick.o(i.timer_update_irq_handler) referenced from hal_tick.o(i.HAL_InitTick)
 <LI><a href="#[3d]">uart1_irq</a> from serial_api.o(i.uart1_irq) referenced from serial_api.o(i.serial_irq_set)
 <LI><a href="#[3e]">uart2_irq</a> from serial_api.o(i.uart2_irq) referenced from serial_api.o(i.serial_irq_set)
 <LI><a href="#[44]">us_ticker_clear_interrupt</a> from us_ticker.o(i.us_ticker_clear_interrupt) referenced from us_ticker_api.o(.constdata)
 <LI><a href="#[43]">us_ticker_disable_interrupt</a> from us_ticker.o(i.us_ticker_disable_interrupt) referenced from us_ticker_api.o(.constdata)
 <LI><a href="#[41]">us_ticker_init</a> from us_ticker.o(i.us_ticker_init) referenced from us_ticker_api.o(.constdata)
 <LI><a href="#[42]">us_ticker_read</a> from us_ticker.o(i.us_ticker_read) referenced from us_ticker_api.o(.constdata)
 <LI><a href="#[45]">us_ticker_set_interrupt</a> from us_ticker.o(i.us_ticker_set_interrupt) referenced from us_ticker_api.o(.constdata)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[27]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(.text)
</UL>
<P><STRONG><a name="[13e]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[51]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[74]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[53]"></a>__use_full_stdio</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry6b.o(.ARM.Collect$$$$00000006))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = __use_full_stdio &rArr; _initio &rArr; _sys_open &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[57]"></a>__main_after_initio</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry6b.o(.ARM.Collect$$$$00000006))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[13f]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[55]"></a>_main_cpp_init$empty</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8a.o(.ARM.Collect$$$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = _main_cpp_init$empty &rArr; __cpp_initialize__aeabi_
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cpp_initialize__aeabi_
</UL>

<P><STRONG><a name="[140]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[141]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[142]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[143]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[7]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>ADC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Channel2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Channel4_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI4_15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>I2C2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>TIM15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>TIM16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>TIM17_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>TIM1_BRK_UP_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>_initio</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, initio_oe.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = _initio &rArr; _sys_open &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_initio
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__use_full_stdio
</UL>

<P><STRONG><a name="[144]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[59]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufferedSerial::putc(int)
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiReader_GetMessage(HiReader_DataMessage*)
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Speech_AddNum(unsigned char)
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiReader_SerialHandler()
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufferedSerial::write(const void*, unsigned)
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufferedSerial::txIrq()
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufferedSerial::prime()
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[145]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, idiv.o(.text), UNUSED)

<P><STRONG><a name="[58]"></a>__aeabi_idivmod</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, idiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommBLE::GetMessage(unsigned char*, unsigned char)
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::read_ms()
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToggleLed()
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reader_GetMessage(unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[64]"></a>__aeabi_llsr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llushr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[146]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[cd]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommBLE::GetMessage(unsigned char*, unsigned char)
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiReader_GetMessage(HiReader_DataMessage*)
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAT_Load()
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendGroupTileToPhone()
</UL>

<P><STRONG><a name="[134]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[147]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[5b]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Navigator_Init()
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAT_Load()
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendGroupTileToPhone()
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reader_GetMessage(unsigned char*, unsigned char)
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[148]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[149]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[5a]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buffer&lang;char&rang;::Buffer(unsigned)
</UL>

<P><STRONG><a name="[e0]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufferedSerial::printf(const char*, ...)
</UL>

<P><STRONG><a name="[14a]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[5c]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[ff]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::lookup(const char*, unsigned)
</UL>

<P><STRONG><a name="[125]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>

<P><STRONG><a name="[ce]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiReader_GetMessage(HiReader_DataMessage*)
</UL>

<P><STRONG><a name="[fe]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::lookup(const char*, unsigned)
</UL>

<P><STRONG><a name="[5d]"></a>__0sscanf</STRONG> (Thumb, 50 bytes, Stack size 72 bytes, __0sscanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>

<P><STRONG><a name="[5f]"></a>_scanf_int</STRONG> (Thumb, 330 bytes, Stack size 48 bytes, _scanf_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[50]"></a>__cpp_initialize__aeabi_</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, cpp_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __cpp_initialize__aeabi_
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_cpp_init$empty
</UL>

<P><STRONG><a name="[36]"></a>__default_new_handler()</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, arm_newhandler_noexceptions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = __default_new_handler() &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> new.o(i._Znwj)
</UL>
<P><STRONG><a name="[37]"></a>fputc</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, fputc_fp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = fputc &rArr; _sys_write &rArr; serial_init &rArr; pinmap_pinout &rArr; pin_function &rArr; Set_GPIO_Clock &rArr; error &rArr; exit &rArr; mbed_die &rArr; wait_ms &rArr; us_ticker_read &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0vfprintf)
</UL>
<P><STRONG><a name="[63]"></a>__aeabi_uldivmod</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[60]"></a>_chval</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>

<P><STRONG><a name="[5e]"></a>__vfscanf_char</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, scanf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>

<P><STRONG><a name="[28]"></a>_sgetc</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[29]"></a>_sbackspace</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[14b]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[11d]"></a>__rt_ddtor_pointer_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cpp_dtor.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
</UL>

<P><STRONG><a name="[14c]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cpp_final.o(.text), UNUSED)

<P><STRONG><a name="[118]"></a>__rt_new_handler_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cpp_memory.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>

<P><STRONG><a name="[14d]"></a>__aeabi_unwind_cpp_pr0</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cpp_unwinder.o(.text), UNUSED)

<P><STRONG><a name="[14e]"></a>__aeabi_unwind_cpp_pr1</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cpp_unwinder.o(.text), UNUSED)

<P><STRONG><a name="[14f]"></a>_Unwind_DeleteException</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cpp_unwinder.o(.text), UNUSED)

<P><STRONG><a name="[150]"></a>_Unwind_Activity</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cpp_unwinder.o(.text), UNUSED)

<P><STRONG><a name="[151]"></a>_Unwind_RaiseException</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cpp_unwinder.o(.text), UNUSED)

<P><STRONG><a name="[71]"></a>__rt_eh_globals_addr</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, cpp_unwinder.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>

<P><STRONG><a name="[67]"></a>__aeabi_dadd</STRONG> (Thumb, 328 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[6b]"></a>__aeabi_dsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[6c]"></a>__aeabi_drsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[6d]"></a>__aeabi_dmul</STRONG> (Thumb, 202 bytes, Stack size 72 bytes, dmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[6e]"></a>__aeabi_ddiv</STRONG> (Thumb, 234 bytes, Stack size 40 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[6f]"></a>__aeabi_d2ulz</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[122]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[61]"></a>std::terminate()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, arm_exceptions_terminate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_new_handler()
</UL>

<P><STRONG><a name="[70]"></a>__cxa_get_globals</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, arm_exceptions_globs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_exceptions_buffer_init
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_eh_globals_addr
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
</UL>

<P><STRONG><a name="[52]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[152]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[65]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[153]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[68]"></a>__aeabi_lasr</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[154]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[2b]"></a>isspace</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, isspace_c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = isspace
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ctype_lookup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL>
<P><STRONG><a name="[66]"></a>__vfscanf</STRONG> (Thumb, 812 bytes, Stack size 80 bytes, _scanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>

<P><STRONG><a name="[6a]"></a>_double_round</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[69]"></a>_double_epilogue</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_clz
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[73]"></a>__ARM_exceptions_buffer_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, arm_exceptions_mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __ARM_exceptions_buffer_init &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>

<P><STRONG><a name="[155]"></a>__ARM_exceptions_buffer_allocate</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, arm_exceptions_mem.o(.text), UNUSED)

<P><STRONG><a name="[156]"></a>__ARM_exceptions_buffer_free</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, arm_exceptions_mem.o(.text), UNUSED)

<P><STRONG><a name="[75]"></a>__ctype_lookup</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ctype_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
</UL>

<P><STRONG><a name="[25]"></a>main</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, retarget.o(i.$Sub$$main))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = main &rArr; $Super$$main &rArr; Phone_DispatchMessage(unsigned char*) &rArr; Phone_EnterStudyMode(unsigned char) &rArr; CommBLE::SendPacket(const void*, int) &rArr; BLE::SendBytes(const void*, unsigned char) &rArr; BufferedSerial::putc(int) &rArr; BufferedSerial::prime() &rArr; mbed::SerialBase::attach(void(*)(), mbed::SerialBase::IrqType) &rArr; serial_irq_set &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_main
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_sdk_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[7a]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, stm32f0xx_hal_flash.o(i.FLASH_WaitForLastOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
</UL>

<P><STRONG><a name="[7c]"></a>HAL_FLASHEx_Erase</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, stm32f0xx_hal_flash_ex.o(i.HAL_FLASHEx_Erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phone_SetVolume(unsigned char)
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phone_DispatchMessage(unsigned char*)
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phone_EnterStudyMode(unsigned char)
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phone_SetPaiCount(PhoneMessage_SetPaiCount*)
</UL>

<P><STRONG><a name="[b6]"></a>HAL_FLASH_Lock</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f0xx_hal_flash.o(i.HAL_FLASH_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phone_SetVolume(unsigned char)
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phone_DispatchMessage(unsigned char*)
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phone_EnterStudyMode(unsigned char)
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phone_SetPaiCount(PhoneMessage_SetPaiCount*)
</UL>

<P><STRONG><a name="[7d]"></a>HAL_FLASH_Program</STRONG> (Thumb, 138 bytes, Stack size 48 bytes, stm32f0xx_hal_flash.o(i.HAL_FLASH_Program))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phone_SetVolume(unsigned char)
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phone_DispatchMessage(unsigned char*)
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phone_EnterStudyMode(unsigned char)
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phone_SetPaiCount(PhoneMessage_SetPaiCount*)
</UL>

<P><STRONG><a name="[b5]"></a>HAL_FLASH_Unlock</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f0xx_hal_flash.o(i.HAL_FLASH_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phone_SetVolume(unsigned char)
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phone_DispatchMessage(unsigned char*)
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phone_EnterStudyMode(unsigned char)
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phone_SetPaiCount(PhoneMessage_SetPaiCount*)
</UL>

<P><STRONG><a name="[136]"></a>HAL_GPIO_Init</STRONG> (Thumb, 318 bytes, Stack size 20 bytes, stm32f0xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_function
</UL>

<P><STRONG><a name="[7b]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f0xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[13c]"></a>HAL_IncTick</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f0xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_oc_irq_handler
</UL>

<P><STRONG><a name="[7e]"></a>HAL_Init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32f0xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_sdk_init
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[7f]"></a>HAL_InitTick</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, hal_tick.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetVector
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Start
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_set_interrupt
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_read
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_init
</UL>

<P><STRONG><a name="[80]"></a>HAL_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_hal.o(i.HAL_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[86]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 454 bytes, Stack size 24 bytes, stm32f0xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[87]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 104 bytes, Stack size 48 bytes, stm32f0xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = HAL_RCC_GetPCLK1Freq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[88]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 78 bytes, Stack size 40 bytes, stm32f0xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = HAL_RCC_GetSysClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[89]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 956 bytes, Stack size 24 bytes, stm32f0xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[8a]"></a>HAL_SPI_Init</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, stm32f0xx_hal_spi.o(i.HAL_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_spi
</UL>

<P><STRONG><a name="[8b]"></a>HAL_SPI_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_hal_spi.o(i.HAL_SPI_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>

<P><STRONG><a name="[82]"></a>HAL_TIM_Base_Init</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, stm32f0xx_hal_tim.o(i.HAL_TIM_Base_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[8c]"></a>HAL_TIM_Base_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_hal_tim.o(i.HAL_TIM_Base_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[85]"></a>HAL_TIM_Base_Start</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f0xx_hal_tim.o(i.HAL_TIM_Base_Start))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[83]"></a>HAL_TIM_OC_Start</STRONG> (Thumb, 72 bytes, Stack size 4 bytes, stm32f0xx_hal_tim.o(i.HAL_TIM_OC_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_TIM_OC_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[8e]"></a>HAL_UART_Init</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, stm32f0xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = HAL_UART_Init &rArr; UART_SetConfig &rArr; HAL_RCC_GetPCLK1Freq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_AdvFeatureConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_uart
</UL>

<P><STRONG><a name="[8f]"></a>HAL_UART_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_hal_uart.o(i.HAL_UART_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[84]"></a>NVIC_SetVector</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, cmsis_nvic.o(i.NVIC_SetVector))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_SetVector
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_irq_set
</UL>

<P><STRONG><a name="[92]"></a>Set_GPIO_Clock</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, pinmap.o(i.Set_GPIO_Clock))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Set_GPIO_Clock &rArr; error &rArr; exit &rArr; mbed_die &rArr; wait_ms &rArr; us_ticker_read &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_mode
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_function
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
</UL>

<P><STRONG><a name="[c]"></a>SysTick_Handler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, main.o(i.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[81]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, system_stm32f0xx.o(i.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SystemCoreClockUpdate &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_sdk_init
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[26]"></a>SystemInit</STRONG> (Thumb, 180 bytes, Stack size 96 bytes, system_stm32f0xx.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = SystemInit &rArr; HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(.text)
</UL>
<P><STRONG><a name="[8d]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, stm32f0xx_hal_tim.o(i.TIM_Base_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[91]"></a>UART_AdvFeatureConfig</STRONG> (Thumb, 204 bytes, Stack size 4 bytes, stm32f0xx_hal_uart.o(i.UART_AdvFeatureConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = UART_AdvFeatureConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[90]"></a>UART_SetConfig</STRONG> (Thumb, 306 bytes, Stack size 24 bytes, stm32f0xx_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = UART_SetConfig &rArr; HAL_RCC_GetPCLK1Freq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[d9]"></a>Speech_Add(unsigned char*, unsigned char)</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, voice.o(i._Z10Speech_AddPhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Speech_Add(unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phone_DispatchMessage(unsigned char*)
</UL>

<P><STRONG><a name="[b1]"></a>Speech_Add(unsigned char)</STRONG> (Thumb, 62 bytes, Stack size 4 bytes, voice.o(i._Z10Speech_Addh))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Speech_Add(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Speech_AddNum(unsigned char)
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phone_EnterStudyMode(unsigned char)
</UL>

<P><STRONG><a name="[94]"></a>UIDEncrypt()</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, main.o(i._Z10UIDEncryptv))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = UIDEncrypt() &rArr; BufferedSerial::printf(const char*, ...) &rArr; __c89vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufferedSerial::printf(const char*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[96]"></a>Speech_Init(PinName, PinName, PinName)</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, voice.o(i._Z11Speech_Init7PinNameS_S_))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = Speech_Init(PinName, PinName, PinName) &rArr; WT588D::WT588D(PinName, PinName) &rArr; gpio_init_out &rArr; gpio_init &rArr; pin_function &rArr; Set_GPIO_Clock &rArr; error &rArr; exit &rArr; mbed_die &rArr; wait_ms &rArr; us_ticker_read &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_out
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::start()
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WT588D::WT588D(PinName, PinName)
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WT588D::Init()
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOn_Init()
</UL>

<P><STRONG><a name="[9c]"></a>Speech_Play()</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, voice.o(i._Z11Speech_Playv))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Speech_Play() &rArr; WT588D::play(unsigned char) &rArr; wait_ms &rArr; us_ticker_read &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::read_ms()
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::reset()
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WT588D::IsBusy()
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WT588D::play(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phone_EnterStudyMode(unsigned char)
</UL>

<P><STRONG><a name="[a1]"></a>PowerOn_Init()</STRONG> (Thumb, 334 bytes, Stack size 56 bytes, main.o(i._Z12PowerOn_Initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = PowerOn_Init() &rArr; Speech_Init(PinName, PinName, PinName) &rArr; WT588D::WT588D(PinName, PinName) &rArr; gpio_init_out &rArr; gpio_init &rArr; pin_function &rArr; Set_GPIO_Clock &rArr; error &rArr; exit &rArr; mbed_die &rArr; wait_ms &rArr; us_ticker_read &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_out
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleKey::SimpleKey(PinName)
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::setup(unsigned)
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::start()
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Speech_Init(PinName, PinName, PinName)
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[a4]"></a>Powered_Init()</STRONG> (Thumb, 306 bytes, Stack size 32 bytes, main.o(i._Z12Powered_Initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = Powered_Init() &rArr; CC1101::CC1101(PinName, PinName, PinName, PinName, PinName) &rArr; mbed::SPI::SPI(PinName, PinName, PinName, PinName) &rArr; spi_init &rArr; pinmap_pinout &rArr; pin_function &rArr; Set_GPIO_Clock &rArr; error &rArr; exit &rArr; mbed_die &rArr; wait_ms &rArr; us_ticker_read &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_ms
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Navigator_Init()
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommBLE::CommBLE(BLE*)
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommBLE::Init()
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101::CC1101(PinName, PinName, PinName, PinName, PinName)
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101::init(const S_RF_SETTINGS*)
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101::SetChannel(unsigned char)
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::start()
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::baud(int)
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE::BLE(BufferedSerial*, CircularBufferEx&, PinName, PinName)
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufferedSerial::BufferedSerial(PinName, PinName, unsigned)
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiReader_Init()
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[af]"></a>HiReader_Init()</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, highpowerreader.o(i._Z13HiReader_Initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HiReader_Init() &rArr; mbed::Timer::start()
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::start()
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powered_Init()
</UL>

<P><STRONG><a name="[b0]"></a>Speech_AddNum(unsigned char)</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, voice.o(i._Z13Speech_AddNumh))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Speech_AddNum(unsigned char) &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Speech_Add(unsigned char)
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[ae]"></a>Navigator_Init()</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, main.o(i._Z14Navigator_Initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Navigator_Init() &rArr; mbed::Timer::start()
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::start()
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powered_Init()
</UL>

<P><STRONG><a name="[d1]"></a>HiReader_IsOpen()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, highpowerreader.o(i._Z15HiReader_IsOpenv))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phone_EnterStudyMode(unsigned char)
</UL>

<P><STRONG><a name="[b2]"></a>HiReader_OpenRF()</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, highpowerreader.o(i._Z15HiReader_OpenRFv))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HiReader_OpenRF() &rArr; BufferedSerial::putc(int) &rArr; BufferedSerial::prime() &rArr; mbed::SerialBase::attach(void(*)(), mbed::SerialBase::IrqType) &rArr; serial_irq_set &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufferedSerial::putc(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiReader_GetMessage(HiReader_DataMessage*)
</UL>

<P><STRONG><a name="[b4]"></a>Phone_SetVolume(unsigned char)</STRONG> (Thumb, 92 bytes, Stack size 40 bytes, main.o(i._Z15Phone_SetVolumeh), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Unlock
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Lock
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommBLE::SendPacket(const void*, int)
</UL>

<P><STRONG><a name="[b8]"></a>Reader_FinishXP()</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, main.o(i._Z15Reader_FinishXPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Reader_FinishXP() &rArr; DAT_Load()
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::reset()
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAT_Load()
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttempAddPaiToCacheEx(const RF_RxInsideCardMessage*)
</UL>

<P><STRONG><a name="[ba]"></a>SendInformation()</STRONG> (Thumb, 106 bytes, Stack size 48 bytes, main.o(i._Z15SendInformationv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101::SendPacketAsync(const void*, unsigned char)
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufferedSerial::printf(const char*, ...)
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcCrc(const void*, unsigned char)
</UL>

<P><STRONG><a name="[bd]"></a>HiReader_CloseRF()</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, highpowerreader.o(i._Z16HiReader_CloseRFv))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HiReader_CloseRF() &rArr; BufferedSerial::putc(int) &rArr; BufferedSerial::prime() &rArr; mbed::SerialBase::attach(void(*)(), mbed::SerialBase::IrqType) &rArr; serial_irq_set &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufferedSerial::putc(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiReader_GetMessage(HiReader_DataMessage*)
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phone_EnterStudyMode(unsigned char)
</UL>

<P><STRONG><a name="[be]"></a>Speech_SetVolume(unsigned char)</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, voice.o(i._Z16Speech_SetVolumeh))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Speech_SetVolume(unsigned char) &rArr; WT588D::play(unsigned char) &rArr; wait_ms &rArr; us_ticker_read &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_ms
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WT588D::play(unsigned char)
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WT588D::GetLastVoiceTime()
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[c0]"></a>HiReader_PowerOff()</STRONG> (Thumb, 112 bytes, Stack size 56 bytes, highpowerreader.o(i._Z17HiReader_PowerOffv))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = HiReader_PowerOff() &rArr; gpio_init_in &rArr; gpio_init &rArr; pin_function &rArr; Set_GPIO_Clock &rArr; error &rArr; exit &rArr; mbed_die &rArr; wait_ms &rArr; us_ticker_read &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_in
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::attach(void(*)(), mbed::SerialBase::IrqType)
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[c4]"></a>Phone_SetPaiCount(PhoneMessage_SetPaiCount*)</STRONG> (Thumb, 174 bytes, Stack size 40 bytes, main.o(i._Z17Phone_SetPaiCountP24PhoneMessage_SetPaiCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Phone_SetPaiCount(PhoneMessage_SetPaiCount*) &rArr; CommBLE::SendPacket(const void*, int) &rArr; BLE::SendBytes(const void*, unsigned char) &rArr; BufferedSerial::putc(int) &rArr; BufferedSerial::prime() &rArr; mbed::SerialBase::attach(void(*)(), mbed::SerialBase::IrqType) &rArr; serial_irq_set &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Unlock
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Lock
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommBLE::SendPacket(const void*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phone_DispatchMessage(unsigned char*)
</UL>

<P><STRONG><a name="[c5]"></a>Reader_GetMessage(unsigned char*, unsigned char)</STRONG> (Thumb, 318 bytes, Stack size 24 bytes, main.o(i._Z17Reader_GetMessagePhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Reader_GetMessage(unsigned char*, unsigned char) &rArr; Reader_ReadInside(unsigned char) &rArr; CC1101::SendPacketAsync(const void*, unsigned char) &rArr; CC1101::WriteBurstReg(unsigned char, const void*, unsigned char) &rArr; wait_us &rArr; us_ticker_read &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101::WriteReg(unsigned char, unsigned char)
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101::GetGDO2()
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101::RXMode()
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101::ReceivePacket(unsigned char*, int)
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::read_ms()
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::reset()
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reader_ReadInside(unsigned char)
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[c6]"></a>Reader_ReadInside(unsigned char)</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, main.o(i._Z17Reader_ReadInsideh))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Reader_ReadInside(unsigned char) &rArr; CC1101::SendPacketAsync(const void*, unsigned char) &rArr; CC1101::WriteBurstReg(unsigned char, const void*, unsigned char) &rArr; wait_us &rArr; us_ticker_read &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101::WriteReg(unsigned char, unsigned char)
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101::SendPacketAsync(const void*, unsigned char)
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::reset()
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcCrc(const void*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reader_GetMessage(unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[135]"></a>HiReader_IsPowerOn()</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, highpowerreader.o(i._Z18HiReader_IsPowerOnv))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[cb]"></a>HiReader_GetMessage(HiReader_DataMessage*)</STRONG> (Thumb, 824 bytes, Stack size 32 bytes, highpowerreader.o(i._Z19HiReader_GetMessageP20HiReader_DataMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = HiReader_GetMessage(HiReader_DataMessage*) &rArr; BufferedSerial::BufferedSerial(PinName, PinName, unsigned) &rArr; mbed::SerialBase::SerialBase(PinName, PinName) &rArr; serial_init &rArr; pinmap_pinout &rArr; pin_function &rArr; Set_GPIO_Clock &rArr; error &rArr; exit &rArr; mbed_die &rArr; wait_ms &rArr; us_ticker_read &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::read_ms()
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::reset()
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::baud(int)
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufferedSerial::BufferedSerial(PinName, PinName, unsigned)
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiReader_CloseRF()
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memcpy1_5
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiReader_OpenRF()
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::attach(void(*)(), mbed::SerialBase::IrqType)
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[cf]"></a>Phone_EnterStudyMode(unsigned char)</STRONG> (Thumb, 736 bytes, Stack size 152 bytes, main.o(i._Z20Phone_EnterStudyModeh))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = Phone_EnterStudyMode(unsigned char) &rArr; CommBLE::SendPacket(const void*, int) &rArr; BLE::SendBytes(const void*, unsigned char) &rArr; BufferedSerial::putc(int) &rArr; BufferedSerial::prime() &rArr; mbed::SerialBase::attach(void(*)(), mbed::SerialBase::IrqType) &rArr; serial_irq_set &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Unlock
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Lock
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommBLE::SendPacket(const void*, int)
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101::WriteReg(unsigned char, unsigned char)
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101::GetGDO2()
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101::RXMode()
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101::SendPacketAsync(const void*, unsigned char)
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101::ReceivePacket(unsigned char*, int)
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101::SetChannel(unsigned char)
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::Timer()
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::read_ms()
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::start()
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::reset()
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiReader_CloseRF()
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiReader_IsOpen()
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Speech_Play()
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Speech_Add(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phone_DispatchMessage(unsigned char*)
</UL>

<P><STRONG><a name="[d2]"></a>Phone_SendReaderPais()</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, main.o(i._Z20Phone_SendReaderPaisv))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Phone_SendReaderPais() &rArr; CommBLE::SendGroupData(int, const MahjongInfo*, int) &rArr; BLE::SendBytes(const void*, unsigned char) &rArr; BufferedSerial::putc(int) &rArr; BufferedSerial::prime() &rArr; mbed::SerialBase::attach(void(*)(), mbed::SerialBase::IrqType) &rArr; serial_irq_set &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommBLE::SendAdminReaderData(const MahjongInfo*, int)
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommBLE::SendGroupData(int, const MahjongInfo*, int)
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::read_ms()
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::reset()
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[d5]"></a>Reader_CheckReceived()</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, main.o(i._Z20Reader_CheckReceivedv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Reader_CheckReceived() &rArr; SendGroupTileToPhone()
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendGroupTileToPhone()
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[d6]"></a>SendGroupTileToPhone()</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, main.o(i._Z20SendGroupTileToPhonev))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SendGroupTileToPhone()
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reader_CheckReceived()
</UL>

<P><STRONG><a name="[d7]"></a>AttempAddPaiToCacheEx(const RF_RxInsideCardMessage*)</STRONG> (Thumb, 326 bytes, Stack size 24 bytes, main.o(i._Z21AttempAddPaiToCacheExPK22RF_RxInsideCardMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = AttempAddPaiToCacheEx(const RF_RxInsideCardMessage*) &rArr; Reader_FinishXP() &rArr; DAT_Load()
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reader_FinishXP()
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::reset()
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[d8]"></a>Phone_DispatchMessage(unsigned char*)</STRONG> (Thumb, 384 bytes, Stack size 40 bytes, main.o(i._Z21Phone_DispatchMessagePh))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = Phone_DispatchMessage(unsigned char*) &rArr; Phone_EnterStudyMode(unsigned char) &rArr; CommBLE::SendPacket(const void*, int) &rArr; BLE::SendBytes(const void*, unsigned char) &rArr; BufferedSerial::putc(int) &rArr; BufferedSerial::prime() &rArr; mbed::SerialBase::attach(void(*)(), mbed::SerialBase::IrqType) &rArr; serial_irq_set &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Unlock
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Lock
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommBLE::SendPacket(const void*, int)
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Speech_Add(unsigned char*, unsigned char)
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phone_EnterStudyMode(unsigned char)
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phone_SetPaiCount(PhoneMessage_SetPaiCount*)
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[30]"></a>HiReader_SerialHandler()</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, highpowerreader.o(i._Z22HiReader_SerialHandlerv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HiReader_SerialHandler() &rArr; BufferedSerial::getc() &rArr; mbed::SerialBase::_base_getc()
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufferedSerial::getc()
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> highpowerreader.o(i._Z19HiReader_GetMessageP20HiReader_DataMessage)
</UL>
<P><STRONG><a name="[bb]"></a>CalcCrc(const void*, unsigned char)</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, main.o(i._Z7CalcCrcPKvh))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CalcCrc(const void*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendInformation()
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reader_ReadInside(unsigned char)
</UL>

<P><STRONG><a name="[b9]"></a>DAT_Load()</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, main.o(i._Z8DAT_Loadv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DAT_Load()
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reader_FinishXP()
</UL>

<P><STRONG><a name="[2f]"></a>ToggleLed()</STRONG> (Thumb, 440 bytes, Stack size 16 bytes, main.o(i._Z9ToggleLedv))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ToggleLed() &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i._Z12PowerOn_Initv)
</UL>
<P><STRONG><a name="[da]"></a>BufferedSerial::getc()</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, bufferedserial.o(i._ZN14BufferedSerial4getcEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BufferedSerial::getc() &rArr; mbed::SerialBase::_base_getc()
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::_base_getc()
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiReader_SerialHandler()
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE::SerialHandler()
</UL>

<P><STRONG><a name="[b3]"></a>BufferedSerial::putc(int)</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, bufferedserial.o(i._ZN14BufferedSerial4putcEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = BufferedSerial::putc(int) &rArr; BufferedSerial::prime() &rArr; mbed::SerialBase::attach(void(*)(), mbed::SerialBase::IrqType) &rArr; serial_irq_set &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufferedSerial::prime()
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiReader_CloseRF()
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiReader_OpenRF()
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE::SendBytes(const void*, unsigned char)
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE::putc(int)
</UL>

<P><STRONG><a name="[dc]"></a>BufferedSerial::prime()</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, bufferedserial.o(i._ZN14BufferedSerial5primeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = BufferedSerial::prime() &rArr; mbed::SerialBase::attach(void(*)(), mbed::SerialBase::IrqType) &rArr; serial_irq_set &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_putc
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_writable
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_irq_set
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::attach(void(*)(), mbed::SerialBase::IrqType)
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufferedSerial::putc(int)
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufferedSerial::write(const void*, unsigned)
</UL>

<P><STRONG><a name="[3f]"></a>BufferedSerial::txIrq()</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, bufferedserial.o(i._ZN14BufferedSerial5txIrqEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = BufferedSerial::txIrq() &rArr; mbed::SerialBase::attach(void(*)(), mbed::SerialBase::IrqType) &rArr; serial_irq_set &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_putc
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_writable
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::attach(void(*)(), mbed::SerialBase::IrqType)
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bufferedserial.o(.constdata)
</UL>
<P><STRONG><a name="[47]"></a>BufferedSerial::write(const void*, unsigned)</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, bufferedserial.o(i._ZN14BufferedSerial5writeEPKvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = BufferedSerial::write(const void*, unsigned) &rArr; BufferedSerial::prime() &rArr; mbed::SerialBase::attach(void(*)(), mbed::SerialBase::IrqType) &rArr; serial_irq_set &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufferedSerial::prime()
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bufferedserial.o(.constdata__ZTV14BufferedSerial)
</UL>
<P><STRONG><a name="[95]"></a>BufferedSerial::printf(const char*, ...)</STRONG> (Thumb, 56 bytes, Stack size 88 bytes, bufferedserial.o(i._ZN14BufferedSerial6printfEPKcz))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = BufferedSerial::printf(const char*, ...) &rArr; __c89vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendInformation()
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIDEncrypt()
</UL>

<P><STRONG><a name="[a5]"></a>BufferedSerial::BufferedSerial(PinName, PinName, unsigned)</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, bufferedserial.o(i._ZN14BufferedSerialC1E7PinNameS0_j))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = BufferedSerial::BufferedSerial(PinName, PinName, unsigned) &rArr; mbed::SerialBase::SerialBase(PinName, PinName) &rArr; serial_init &rArr; pinmap_pinout &rArr; pin_function &rArr; Set_GPIO_Clock &rArr; error &rArr; exit &rArr; mbed_die &rArr; wait_ms &rArr; us_ticker_read &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buffer&lang;char&rang;::Buffer(unsigned)
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::SerialBase(PinName, PinName)
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powered_Init()
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiReader_GetMessage(HiReader_DataMessage*)
</UL>

<P><STRONG><a name="[157]"></a>BufferedSerial::BufferedSerial__sub_object(PinName, PinName, unsigned)</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, bufferedserial.o(i._ZN14BufferedSerialC1E7PinNameS0_j), UNUSED)

<P><STRONG><a name="[46]"></a>BufferedSerial::~BufferedSerial__deallocating()</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, bufferedserial.o(i._ZN14BufferedSerialD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = BufferedSerial::~BufferedSerial__deallocating() &rArr; mbed::SerialBase::attach(void(*)(), mbed::SerialBase::IrqType) &rArr; serial_irq_set &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buffer&lang;char&rang;::~Buffer()
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::attach(void(*)(), mbed::SerialBase::IrqType)
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bufferedserial.o(.constdata__ZTV14BufferedSerial)
</UL>
<P><STRONG><a name="[40]"></a>BLE::SerialHandler()</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, ble.o(i._ZN3BLE13SerialHandlerEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BLE::SerialHandler() &rArr; BufferedSerial::getc() &rArr; mbed::SerialBase::_base_getc()
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufferedSerial::getc()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble.o(.constdata)
</UL>
<P><STRONG><a name="[110]"></a>BLE::Init()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ble.o(i._ZN3BLE4InitEv))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommBLE::Init()
</UL>

<P><STRONG><a name="[e6]"></a>BLE::putc(int)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ble.o(i._ZN3BLE4putcEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = BLE::putc(int) &rArr; BufferedSerial::putc(int) &rArr; BufferedSerial::prime() &rArr; mbed::SerialBase::attach(void(*)(), mbed::SerialBase::IrqType) &rArr; serial_irq_set &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufferedSerial::putc(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommBLE::SendAdminReaderData(const MahjongInfo*, int)
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommBLE::SendHeartBeat()
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommBLE::SendGroupData(int, const MahjongInfo*, int)
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommBLE::SendPacket(const void*, int)
</UL>

<P><STRONG><a name="[112]"></a>BLE::IsLink()</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ble.o(i._ZN3BLE6IsLinkEv))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommBLE::IsLink()
</UL>

<P><STRONG><a name="[e7]"></a>BLE::SendBytes(const void*, unsigned char)</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, ble.o(i._ZN3BLE9SendBytesEPKvh))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = BLE::SendBytes(const void*, unsigned char) &rArr; BufferedSerial::putc(int) &rArr; BufferedSerial::prime() &rArr; mbed::SerialBase::attach(void(*)(), mbed::SerialBase::IrqType) &rArr; serial_irq_set &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufferedSerial::putc(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommBLE::SendAdminReaderData(const MahjongInfo*, int)
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommBLE::SendHeartBeat()
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommBLE::SendGroupData(int, const MahjongInfo*, int)
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommBLE::SendPacket(const void*, int)
</UL>

<P><STRONG><a name="[a6]"></a>BLE::BLE(BufferedSerial*, CircularBufferEx&, PinName, PinName)</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, ble.o(i._ZN3BLEC1EP14BufferedSerialR16CircularBufferEx7PinNameS4_))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = BLE::BLE(BufferedSerial*, CircularBufferEx&, PinName, PinName) &rArr; gpio_init_in &rArr; gpio_init &rArr; pin_function &rArr; Set_GPIO_Clock &rArr; error &rArr; exit &rArr; mbed_die &rArr; wait_ms &rArr; us_ticker_read &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_in
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_irq_set
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powered_Init()
</UL>

<P><STRONG><a name="[158]"></a>BLE::BLE__sub_object(BufferedSerial*, CircularBufferEx&, PinName, PinName)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, ble.o(i._ZN3BLEC1EP14BufferedSerialR16CircularBufferEx7PinNameS4_), UNUSED)

<P><STRONG><a name="[db]"></a>mbed::SerialBase::_base_getc()</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, SerialBase.o(i._ZN4mbed10SerialBase10_base_getcEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbed::SerialBase::_base_getc()
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_getc
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufferedSerial::getc()
</UL>

<P><STRONG><a name="[34]"></a>mbed::SerialBase::_irq_handler(unsigned, SerialIrq)</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, SerialBase.o(i._ZN4mbed10SerialBase12_irq_handlerEj9SerialIrq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbed::SerialBase::_irq_handler(unsigned, SerialIrq)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> SerialBase.o(i._ZN4mbed10SerialBaseC1E7PinNameS1_)
</UL>
<P><STRONG><a name="[a8]"></a>mbed::SerialBase::baud(int)</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, SerialBase.o(i._ZN4mbed10SerialBase4baudEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = mbed::SerialBase::baud(int) &rArr; serial_baud &rArr; init_uart &rArr; HAL_UART_Init &rArr; UART_SetConfig &rArr; HAL_RCC_GetPCLK1Freq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_baud
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powered_Init()
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiReader_GetMessage(HiReader_DataMessage*)
</UL>

<P><STRONG><a name="[c1]"></a>mbed::SerialBase::attach(void(*)(), mbed::SerialBase::IrqType)</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, SerialBase.o(i._ZN4mbed10SerialBase6attachEPFvvENS0_7IrqTypeE))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mbed::SerialBase::attach(void(*)(), mbed::SerialBase::IrqType) &rArr; serial_irq_set &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_irq_set
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiReader_GetMessage(HiReader_DataMessage*)
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiReader_PowerOff()
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufferedSerial::~BufferedSerial__deallocating()
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufferedSerial::txIrq()
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufferedSerial::prime()
</UL>

<P><STRONG><a name="[e2]"></a>mbed::SerialBase::SerialBase(PinName, PinName)</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, SerialBase.o(i._ZN4mbed10SerialBaseC1E7PinNameS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = mbed::SerialBase::SerialBase(PinName, PinName) &rArr; serial_init &rArr; pinmap_pinout &rArr; pin_function &rArr; Set_GPIO_Clock &rArr; error &rArr; exit &rArr; mbed_die &rArr; wait_ms &rArr; us_ticker_read &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_irq_handler
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufferedSerial::BufferedSerial(PinName, PinName, unsigned)
</UL>

<P><STRONG><a name="[159]"></a>mbed::SerialBase::SerialBase__sub_object(PinName, PinName)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, SerialBase.o(i._ZN4mbed10SerialBaseC1E7PinNameS1_), UNUSED)

<P><STRONG><a name="[35]"></a>mbed::TimerEvent::irq(unsigned)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, TimerEvent.o(i._ZN4mbed10TimerEvent3irqEj))
<BR>[Address Reference Count : 1]<UL><LI> TimerEvent.o(i._ZN4mbed10TimerEventC2Ev)
</UL>
<P><STRONG><a name="[ed]"></a>mbed::TimerEvent::insert(unsigned)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, TimerEvent.o(i._ZN4mbed10TimerEvent6insertEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbed::TimerEvent::insert(unsigned) &rArr; ticker_insert_event
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_insert_event
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::setup(unsigned)
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::handler()
</UL>

<P><STRONG><a name="[ef]"></a>mbed::TimerEvent::remove()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, TimerEvent.o(i._ZN4mbed10TimerEvent6removeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbed::TimerEvent::remove() &rArr; ticker_remove_event
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_remove_event
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::detach()
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::setup(unsigned)
</UL>

<P><STRONG><a name="[f1]"></a>mbed::TimerEvent::TimerEvent__sub_object()</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, TimerEvent.o(i._ZN4mbed10TimerEventC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbed::TimerEvent::TimerEvent__sub_object() &rArr; ticker_set_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_set_handler
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_us_ticker_data
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_49697bbe
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WT588D::WT588D(PinName, PinName)
</UL>

<P><STRONG><a name="[15a]"></a>mbed::TimerEvent::~TimerEvent()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, TimerEvent.o(i._ZN4mbed10TimerEventD2Ev), UNUSED)

<P><STRONG><a name="[48]"></a>mbed::TimerEvent::~TimerEvent__sub_object()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, TimerEvent.o(i._ZN4mbed10TimerEventD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbed::TimerEvent::~TimerEvent__sub_object() &rArr; ticker_remove_event
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_remove_event
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::~Ticker()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> TimerEvent.o(.constdata__ZTVN4mbed10TimerEventE)
</UL>
<P><STRONG><a name="[4a]"></a>mbed::SPI::write(int)</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, SPI.o(i._ZN4mbed3SPI5writeEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = mbed::SPI::write(int) &rArr; spi_format &rArr; init_spi &rArr; HAL_SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_master_write
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_frequency
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_format
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101::WriteReg(unsigned char, unsigned char)
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101::ReadReg(unsigned char)
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101::Strobe(unsigned char)
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101::POWER_UP_RESET_CCxxx0()
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101::WriteBurstReg(unsigned char, const void*, unsigned char)
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101::ReadBurstReg(unsigned char, unsigned char*, unsigned char)
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101::ReadStatus(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> SPI.o(.constdata__ZTVN4mbed3SPIE)
</UL>
<P><STRONG><a name="[f7]"></a>mbed::SPI::format(int, int)</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, SPI.o(i._ZN4mbed3SPI6formatEii))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = mbed::SPI::format(int, int) &rArr; spi_format &rArr; init_spi &rArr; HAL_SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_frequency
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_format
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101::init(const S_RF_SETTINGS*)
</UL>

<P><STRONG><a name="[f8]"></a>mbed::SPI::frequency(int)</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, SPI.o(i._ZN4mbed3SPI9frequencyEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = mbed::SPI::frequency(int) &rArr; spi_format &rArr; init_spi &rArr; HAL_SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_frequency
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_format
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101::init(const S_RF_SETTINGS*)
</UL>

<P><STRONG><a name="[f9]"></a>mbed::SPI::SPI(PinName, PinName, PinName, PinName)</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, SPI.o(i._ZN4mbed3SPIC1E7PinNameS1_S1_S1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = mbed::SPI::SPI(PinName, PinName, PinName, PinName) &rArr; spi_init &rArr; pinmap_pinout &rArr; pin_function &rArr; Set_GPIO_Clock &rArr; error &rArr; exit &rArr; mbed_die &rArr; wait_ms &rArr; us_ticker_read &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_frequency
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_format
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101::CC1101(PinName, PinName, PinName, PinName, PinName)
</UL>

<P><STRONG><a name="[15b]"></a>mbed::SPI::SPI__sub_object(PinName, PinName, PinName, PinName)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, SPI.o(i._ZN4mbed3SPIC1E7PinNameS1_S1_S1_), UNUSED)

<P><STRONG><a name="[a0]"></a>mbed::Timer::reset()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, Timer.o(i._ZN4mbed5Timer5resetEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbed::Timer::reset()
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_read
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reader_FinishXP()
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleKey::ScanKey()
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommBLE::SendAdminReaderData(const MahjongInfo*, int)
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommBLE::SendHeartBeat()
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommBLE::SendGroupData(int, const MahjongInfo*, int)
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommBLE::SendPacket(const void*, int)
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommBLE::GetMessage(unsigned char*, unsigned char)
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiReader_GetMessage(HiReader_DataMessage*)
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Speech_Play()
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttempAddPaiToCacheEx(const RF_RxInsideCardMessage*)
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phone_SendReaderPais()
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phone_EnterStudyMode(unsigned char)
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reader_ReadInside(unsigned char)
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reader_GetMessage(unsigned char*, unsigned char)
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WT588D::play(unsigned char)
</UL>

<P><STRONG><a name="[9b]"></a>mbed::Timer::start()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, Timer.o(i._ZN4mbed5Timer5startEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbed::Timer::start()
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_read
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Navigator_Init()
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powered_Init()
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOn_Init()
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleKey::SimpleKey(PinName)
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommBLE::Init()
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiReader_Init()
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Speech_Init(PinName, PinName, PinName)
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phone_EnterStudyMode(unsigned char)
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WT588D::Init()
</UL>

<P><STRONG><a name="[9e]"></a>mbed::Timer::read_ms()</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, Timer.o(i._ZN4mbed5Timer7read_msEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = mbed::Timer::read_ms() &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_read
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleKey::ScanKey()
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommBLE::GetNoTxTime()
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommBLE::GetMessage(unsigned char*, unsigned char)
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiReader_GetMessage(HiReader_DataMessage*)
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Speech_Play()
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phone_SendReaderPais()
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phone_EnterStudyMode(unsigned char)
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reader_GetMessage(unsigned char*, unsigned char)
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WT588D::IsBusy()
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WT588D::GetLastVoiceTime()
</UL>

<P><STRONG><a name="[d0]"></a>mbed::Timer::Timer()</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, Timer.o(i._ZN4mbed5TimerC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbed::Timer::Timer()
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_us_ticker_data
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_read
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_49697bbe
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleKey::SimpleKey(PinName)
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommBLE::CommBLE(BLE*)
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phone_EnterStudyMode(unsigned char)
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___9_Voice_cpp_ade2d123
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___19_HighPowerReader_cpp_39f899b3
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WT588D::WT588D(PinName, PinName)
</UL>

<P><STRONG><a name="[15c]"></a>mbed::Timer::Timer__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, Timer.o(i._ZN4mbed5TimerC1Ev), UNUSED)

<P><STRONG><a name="[a3]"></a>mbed::Ticker::setup(unsigned)</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, Ticker.o(i._ZN4mbed6Ticker5setupEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mbed::Ticker::setup(unsigned) &rArr; mbed::TimerEvent::insert(unsigned) &rArr; ticker_insert_event
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_read
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimerEvent::remove()
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimerEvent::insert(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOn_Init()
</UL>

<P><STRONG><a name="[fc]"></a>mbed::Ticker::detach()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, Ticker.o(i._ZN4mbed6Ticker6detachEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbed::Ticker::detach() &rArr; mbed::TimerEvent::remove() &rArr; ticker_remove_event
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimerEvent::remove()
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::~Ticker()
</UL>

<P><STRONG><a name="[4b]"></a>mbed::Ticker::handler()</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, Ticker.o(i._ZN4mbed6Ticker7handlerEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbed::Ticker::handler() &rArr; mbed::TimerEvent::insert(unsigned) &rArr; ticker_insert_event
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimerEvent::insert(unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> Ticker.o(.constdata__ZTVN4mbed6TickerE)
</UL>
<P><STRONG><a name="[3b]"></a>mbed::Ticker::~Ticker()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, main.o(i._ZN4mbed6TickerD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbed::Ticker::~Ticker() &rArr; mbed::Ticker::detach() &rArr; mbed::TimerEvent::remove() &rArr; ticker_remove_event
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::detach()
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimerEvent::~TimerEvent__sub_object()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> main.o(i.__sti___8_main_cpp_49697bbe)
<LI> Ticker.o(.constdata__ZTVN4mbed6TickerE)
</UL>
<P><STRONG><a name="[15d]"></a>mbed::Ticker::~Ticker__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, main.o(i._ZN4mbed6TickerD1Ev), UNUSED)

<P><STRONG><a name="[4c]"></a>mbed::Timeout::handler()</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, Timeout.o(i._ZN4mbed7Timeout7handlerEv))
<BR>[Address Reference Count : 1]<UL><LI> Timeout.o(.constdata__ZTVN4mbed7TimeoutE)
</UL>
<P><STRONG><a name="[101]"></a>mbed::FileBase::getPathType()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, FileBase.o(i._ZN4mbed8FileBase11getPathTypeEv))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::isFile()
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::file()
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::fileSystem()
</UL>

<P><STRONG><a name="[fd]"></a>mbed::FileBase::lookup(const char*, unsigned)</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, FileBase.o(i._ZN4mbed8FileBase6lookupEPKcj))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = mbed::FileBase::lookup(const char*, unsigned) &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::FilePath(const char*)
</UL>

<P><STRONG><a name="[100]"></a>mbed::FilePath::fileSystem()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, FilePath.o(i._ZN4mbed8FilePath10fileSystemEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbed::FilePath::fileSystem()
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::getPathType()
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>

<P><STRONG><a name="[102]"></a>mbed::FilePath::file()</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, FilePath.o(i._ZN4mbed8FilePath4fileEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbed::FilePath::file()
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::getPathType()
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>

<P><STRONG><a name="[126]"></a>mbed::FilePath::exists()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, FilePath.o(i._ZN4mbed8FilePath6existsEv))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>

<P><STRONG><a name="[103]"></a>mbed::FilePath::isFile()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, FilePath.o(i._ZN4mbed8FilePath6isFileEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbed::FilePath::isFile()
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::getPathType()
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>

<P><STRONG><a name="[127]"></a>mbed::FilePath::fileName()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, FilePath.o(i._ZN4mbed8FilePath8fileNameEv))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>

<P><STRONG><a name="[104]"></a>mbed::FilePath::FilePath(const char*)</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, FilePath.o(i._ZN4mbed8FilePathC1EPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = mbed::FilePath::FilePath(const char*) &rArr; mbed::FileBase::lookup(const char*, unsigned) &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::lookup(const char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>

<P><STRONG><a name="[15e]"></a>mbed::FilePath::FilePath__sub_object(const char*)</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, FilePath.o(i._ZN4mbed8FilePathC1EPKc), UNUSED)

<P><STRONG><a name="[105]"></a>CC1101::ReadStatus(unsigned char)</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, cc1101.o(i._ZN6CC110110ReadStatusEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = CC1101::ReadStatus(unsigned char) &rArr; wait_us &rArr; us_ticker_read &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_us
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SPI::write(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101::ReceivePacket(unsigned char*, int)
</UL>

<P><STRONG><a name="[ac]"></a>CC1101::SetChannel(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, cc1101.o(i._ZN6CC110110SetChannelEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = CC1101::SetChannel(unsigned char) &rArr; CC1101::WriteReg(unsigned char, unsigned char) &rArr; wait_us &rArr; us_ticker_read &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101::WriteReg(unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powered_Init()
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phone_EnterStudyMode(unsigned char)
</UL>

<P><STRONG><a name="[107]"></a>CC1101::ReadBurstReg(unsigned char, unsigned char*, unsigned char)</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, cc1101.o(i._ZN6CC110112ReadBurstRegEhPhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = CC1101::ReadBurstReg(unsigned char, unsigned char*, unsigned char) &rArr; wait_us &rArr; us_ticker_read &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_us
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SPI::write(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101::ReceivePacket(unsigned char*, int)
</UL>

<P><STRONG><a name="[ca]"></a>CC1101::ReceivePacket(unsigned char*, int)</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, cc1101.o(i._ZN6CC110113ReceivePacketEPhi))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = CC1101::ReceivePacket(unsigned char*, int) &rArr; CC1101::ReadBurstReg(unsigned char, unsigned char*, unsigned char) &rArr; wait_us &rArr; us_ticker_read &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101::ReadReg(unsigned char)
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101::Strobe(unsigned char)
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101::ReadBurstReg(unsigned char, unsigned char*, unsigned char)
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101::ReadStatus(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phone_EnterStudyMode(unsigned char)
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reader_GetMessage(unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[10a]"></a>CC1101::WriteBurstReg(unsigned char, const void*, unsigned char)</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, cc1101.o(i._ZN6CC110113WriteBurstRegEhPKvh))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = CC1101::WriteBurstReg(unsigned char, const void*, unsigned char) &rArr; wait_us &rArr; us_ticker_read &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_us
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SPI::write(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101::SendPacketAsync(const void*, unsigned char)
</UL>

<P><STRONG><a name="[bc]"></a>CC1101::SendPacketAsync(const void*, unsigned char)</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, cc1101.o(i._ZN6CC110115SendPacketAsyncEPKvh))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = CC1101::SendPacketAsync(const void*, unsigned char) &rArr; CC1101::WriteBurstReg(unsigned char, const void*, unsigned char) &rArr; wait_us &rArr; us_ticker_read &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101::Strobe(unsigned char)
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101::WriteBurstReg(unsigned char, const void*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendInformation()
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phone_EnterStudyMode(unsigned char)
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reader_ReadInside(unsigned char)
</UL>

<P><STRONG><a name="[10b]"></a>CC1101::WriteRfSettings(const S_RF_SETTINGS*)</STRONG> (Thumb, 430 bytes, Stack size 16 bytes, cc1101.o(i._ZN6CC110115WriteRfSettingsEPK13S_RF_SETTINGS))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = CC1101::WriteRfSettings(const S_RF_SETTINGS*) &rArr; CC1101::WriteReg(unsigned char, unsigned char) &rArr; wait_us &rArr; us_ticker_read &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101::WriteReg(unsigned char, unsigned char)
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101::Strobe(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101::init(const S_RF_SETTINGS*)
</UL>

<P><STRONG><a name="[10c]"></a>CC1101::POWER_UP_RESET_CCxxx0()</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, cc1101.o(i._ZN6CC110121POWER_UP_RESET_CCxxx0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = CC1101::POWER_UP_RESET_CCxxx0() &rArr; wait_us &rArr; us_ticker_read &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_us
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SPI::write(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101::init(const S_RF_SETTINGS*)
</UL>

<P><STRONG><a name="[ab]"></a>CC1101::init(const S_RF_SETTINGS*)</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, cc1101.o(i._ZN6CC11014initEPK13S_RF_SETTINGS))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = CC1101::init(const S_RF_SETTINGS*) &rArr; CC1101::WriteRfSettings(const S_RF_SETTINGS*) &rArr; CC1101::WriteReg(unsigned char, unsigned char) &rArr; wait_us &rArr; us_ticker_read &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_ms
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101::WriteReg(unsigned char, unsigned char)
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SPI::frequency(int)
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SPI::format(int, int)
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101::Strobe(unsigned char)
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101::POWER_UP_RESET_CCxxx0()
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101::WriteRfSettings(const S_RF_SETTINGS*)
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powered_Init()
</UL>

<P><STRONG><a name="[133]"></a>CC1101::rssi()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cc1101.o(i._ZN6CC11014rssiEv))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[c9]"></a>CC1101::RXMode()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, cc1101.o(i._ZN6CC11016RXModeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = CC1101::RXMode() &rArr; CC1101::Strobe(unsigned char) &rArr; wait_us &rArr; us_ticker_read &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101::Strobe(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phone_EnterStudyMode(unsigned char)
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reader_GetMessage(unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[109]"></a>CC1101::Strobe(unsigned char)</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, cc1101.o(i._ZN6CC11016StrobeEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = CC1101::Strobe(unsigned char) &rArr; wait_us &rArr; us_ticker_read &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_us
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SPI::write(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101::RXMode()
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101::init(const S_RF_SETTINGS*)
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101::SendPacketAsync(const void*, unsigned char)
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101::ReceivePacket(unsigned char*, int)
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101::WriteRfSettings(const S_RF_SETTINGS*)
</UL>

<P><STRONG><a name="[c7]"></a>CC1101::GetGDO2()</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, cc1101.o(i._ZN6CC11017GetGDO2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phone_EnterStudyMode(unsigned char)
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reader_GetMessage(unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[108]"></a>CC1101::ReadReg(unsigned char)</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, cc1101.o(i._ZN6CC11017ReadRegEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = CC1101::ReadReg(unsigned char) &rArr; wait_us &rArr; us_ticker_read &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_us
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SPI::write(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101::ReceivePacket(unsigned char*, int)
</UL>

<P><STRONG><a name="[c8]"></a>CC1101::WriteReg(unsigned char, unsigned char)</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, cc1101.o(i._ZN6CC11018WriteRegEhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = CC1101::WriteReg(unsigned char, unsigned char) &rArr; wait_us &rArr; us_ticker_read &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_us
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SPI::write(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101::init(const S_RF_SETTINGS*)
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101::SetChannel(unsigned char)
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phone_EnterStudyMode(unsigned char)
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reader_ReadInside(unsigned char)
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reader_GetMessage(unsigned char*, unsigned char)
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101::WriteRfSettings(const S_RF_SETTINGS*)
</UL>

<P><STRONG><a name="[a9]"></a>CC1101::CC1101(PinName, PinName, PinName, PinName, PinName)</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, cc1101.o(i._ZN6CC1101C1E7PinNameS0_S0_S0_S0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = CC1101::CC1101(PinName, PinName, PinName, PinName, PinName) &rArr; mbed::SPI::SPI(PinName, PinName, PinName, PinName) &rArr; spi_init &rArr; pinmap_pinout &rArr; pin_function &rArr; Set_GPIO_Clock &rArr; error &rArr; exit &rArr; mbed_die &rArr; wait_ms &rArr; us_ticker_read &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_out
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_in
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SPI::SPI(PinName, PinName, PinName, PinName)
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powered_Init()
</UL>

<P><STRONG><a name="[15f]"></a>CC1101::CC1101__sub_object(PinName, PinName, PinName, PinName, PinName)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, cc1101.o(i._ZN6CC1101C1E7PinNameS0_S0_S0_S0_), UNUSED)

<P><STRONG><a name="[bf]"></a>WT588D::GetLastVoiceTime()</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, wt588d.o(i._ZN6WT588D16GetLastVoiceTimeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = WT588D::GetLastVoiceTime() &rArr; mbed::Timer::read_ms() &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::read_ms()
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Speech_SetVolume(unsigned char)
</UL>

<P><STRONG><a name="[9a]"></a>WT588D::Init()</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, wt588d.o(i._ZN6WT588D4InitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = WT588D::Init() &rArr; gpio_mode &rArr; pin_mode &rArr; Set_GPIO_Clock &rArr; error &rArr; exit &rArr; mbed_die &rArr; wait_ms &rArr; us_ticker_read &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::start()
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Speech_Init(PinName, PinName, PinName)
</UL>

<P><STRONG><a name="[9f]"></a>WT588D::play(unsigned char)</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, wt588d.o(i._ZN6WT588D4playEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = WT588D::play(unsigned char) &rArr; wait_ms &rArr; us_ticker_read &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_ms
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::reset()
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_us
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Speech_SetVolume(unsigned char)
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Speech_Play()
</UL>

<P><STRONG><a name="[9d]"></a>WT588D::IsBusy()</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, wt588d.o(i._ZN6WT588D6IsBusyEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = WT588D::IsBusy() &rArr; mbed::Timer::read_ms() &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::read_ms()
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Speech_Play()
</UL>

<P><STRONG><a name="[98]"></a>WT588D::WT588D(PinName, PinName)</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, wt588d.o(i._ZN6WT588DC1E7PinNameS0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = WT588D::WT588D(PinName, PinName) &rArr; gpio_init_out &rArr; gpio_init &rArr; pin_function &rArr; Set_GPIO_Clock &rArr; error &rArr; exit &rArr; mbed_die &rArr; wait_ms &rArr; us_ticker_read &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_out
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::Timer()
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimerEvent::TimerEvent__sub_object()
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_in
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Speech_Init(PinName, PinName, PinName)
</UL>

<P><STRONG><a name="[160]"></a>WT588D::WT588D__sub_object(PinName, PinName)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, wt588d.o(i._ZN6WT588DC1E7PinNameS0_), UNUSED)

<P><STRONG><a name="[10d]"></a>CommBLE::GetMessage(unsigned char*, unsigned char)</STRONG> (Thumb, 338 bytes, Stack size 48 bytes, commble.o(i._ZN7CommBLE10GetMessageEPhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = CommBLE::GetMessage(unsigned char*, unsigned char) &rArr; mbed::Timer::read_ms() &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::read_ms()
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::reset()
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[b7]"></a>CommBLE::SendPacket(const void*, int)</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, commble.o(i._ZN7CommBLE10SendPacketEPKvi))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = CommBLE::SendPacket(const void*, int) &rArr; BLE::SendBytes(const void*, unsigned char) &rArr; BufferedSerial::putc(int) &rArr; BufferedSerial::prime() &rArr; mbed::SerialBase::attach(void(*)(), mbed::SerialBase::IrqType) &rArr; serial_irq_set &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::reset()
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE::SendBytes(const void*, unsigned char)
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE::putc(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phone_SetVolume(unsigned char)
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phone_DispatchMessage(unsigned char*)
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phone_EnterStudyMode(unsigned char)
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phone_SetPaiCount(PhoneMessage_SetPaiCount*)
</UL>

<P><STRONG><a name="[10e]"></a>CommBLE::GetNoTxTime()</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, commble.o(i._ZN7CommBLE11GetNoTxTimeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = CommBLE::GetNoTxTime() &rArr; mbed::Timer::read_ms() &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::read_ms()
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[d3]"></a>CommBLE::SendGroupData(int, const MahjongInfo*, int)</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, commble.o(i._ZN7CommBLE13SendGroupDataEiPK11MahjongInfoi))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = CommBLE::SendGroupData(int, const MahjongInfo*, int) &rArr; BLE::SendBytes(const void*, unsigned char) &rArr; BufferedSerial::putc(int) &rArr; BufferedSerial::prime() &rArr; mbed::SerialBase::attach(void(*)(), mbed::SerialBase::IrqType) &rArr; serial_irq_set &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::reset()
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE::SendBytes(const void*, unsigned char)
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE::putc(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phone_SendReaderPais()
</UL>

<P><STRONG><a name="[10f]"></a>CommBLE::SendHeartBeat()</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, commble.o(i._ZN7CommBLE13SendHeartBeatEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = CommBLE::SendHeartBeat() &rArr; BLE::SendBytes(const void*, unsigned char) &rArr; BufferedSerial::putc(int) &rArr; BufferedSerial::prime() &rArr; mbed::SerialBase::attach(void(*)(), mbed::SerialBase::IrqType) &rArr; serial_irq_set &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::reset()
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE::SendBytes(const void*, unsigned char)
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE::putc(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[d4]"></a>CommBLE::SendAdminReaderData(const MahjongInfo*, int)</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, commble.o(i._ZN7CommBLE19SendAdminReaderDataEPK11MahjongInfoi))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = CommBLE::SendAdminReaderData(const MahjongInfo*, int) &rArr; BLE::SendBytes(const void*, unsigned char) &rArr; BufferedSerial::putc(int) &rArr; BufferedSerial::prime() &rArr; mbed::SerialBase::attach(void(*)(), mbed::SerialBase::IrqType) &rArr; serial_irq_set &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::reset()
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE::SendBytes(const void*, unsigned char)
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE::putc(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phone_SendReaderPais()
</UL>

<P><STRONG><a name="[ad]"></a>CommBLE::Init()</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, commble.o(i._ZN7CommBLE4InitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = CommBLE::Init() &rArr; wait_ms &rArr; us_ticker_read &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_ms
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::start()
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE::Init()
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powered_Init()
</UL>

<P><STRONG><a name="[111]"></a>CommBLE::IsLink()</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, commble.o(i._ZN7CommBLE6IsLinkEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CommBLE::IsLink()
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE::IsLink()
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[a7]"></a>CommBLE::CommBLE(BLE*)</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, commble.o(i._ZN7CommBLEC1EP3BLE))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CommBLE::CommBLE(BLE*) &rArr; mbed::Timer::Timer()
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::Timer()
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powered_Init()
</UL>

<P><STRONG><a name="[161]"></a>CommBLE::CommBLE__sub_object(BLE*)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, commble.o(i._ZN7CommBLEC1EP3BLE), UNUSED)

<P><STRONG><a name="[113]"></a>SimpleKey::Init()</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, simplekey.o(i._ZN9SimpleKey4InitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = SimpleKey::Init() &rArr; gpio_mode &rArr; pin_mode &rArr; Set_GPIO_Clock &rArr; error &rArr; exit &rArr; mbed_die &rArr; wait_ms &rArr; us_ticker_read &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[114]"></a>SimpleKey::ScanKey()</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, simplekey.o(i._ZN9SimpleKey7ScanKeyEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = SimpleKey::ScanKey() &rArr; mbed::Timer::read_ms() &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::read_ms()
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::reset()
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[a2]"></a>SimpleKey::SimpleKey(PinName)</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, simplekey.o(i._ZN9SimpleKeyC1E7PinName))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = SimpleKey::SimpleKey(PinName) &rArr; gpio_init_in &rArr; gpio_init &rArr; pin_function &rArr; Set_GPIO_Clock &rArr; error &rArr; exit &rArr; mbed_die &rArr; wait_ms &rArr; us_ticker_read &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::Timer()
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::start()
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_in
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOn_Init()
</UL>

<P><STRONG><a name="[162]"></a>SimpleKey::SimpleKey__sub_object(PinName)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, simplekey.o(i._ZN9SimpleKeyC1E7PinName), UNUSED)

<P><STRONG><a name="[115]"></a>operator delete[] (void*)</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, array_del.o(i._ZdaPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = operator delete[] (void*) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buffer&lang;char&rang;::~Buffer()
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::CircularBufferA&lang;unsigned char, unsigned&rang;::~CircularBufferA()
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::CircularBufferA&lang;RxTileInfo, unsigned&rang;::~CircularBufferA()
</UL>

<P><STRONG><a name="[e5]"></a>operator delete (void*)</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, delete.o(i._ZdlPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufferedSerial::~BufferedSerial__deallocating()
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
</UL>

<P><STRONG><a name="[117]"></a>operator new[] (unsigned)</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, array_new.o(i._Znaj))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buffer&lang;char&rang;::Buffer(unsigned)
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___19_HighPowerReader_cpp_39f899b3
</UL>

<P><STRONG><a name="[97]"></a>operator new(unsigned)</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, new.o(i._Znwj))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = operator new(unsigned) &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_new_handler_addr
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powered_Init()
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOn_Init()
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiReader_GetMessage(HiReader_DataMessage*)
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Speech_Init(PinName, PinName, PinName)
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
</UL>

<P><STRONG><a name="[119]"></a>__0vfprintf</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, printfa.o(i.__0vfprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[163]"></a>__1vfprintf</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, printfa.o(i.__0vfprintf), UNUSED)

<P><STRONG><a name="[164]"></a>__2vfprintf</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, printfa.o(i.__0vfprintf), UNUSED)

<P><STRONG><a name="[165]"></a>__c89vfprintf</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, printfa.o(i.__0vfprintf), UNUSED)

<P><STRONG><a name="[128]"></a>vfprintf</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, printfa.o(i.__0vfprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vfprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
</UL>

<P><STRONG><a name="[11b]"></a>__0vsprintf</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[166]"></a>__1vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)

<P><STRONG><a name="[167]"></a>__2vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)

<P><STRONG><a name="[e1]"></a>__c89vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __c89vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufferedSerial::printf(const char*, ...)
</UL>

<P><STRONG><a name="[168]"></a>vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)

<P><STRONG><a name="[76]"></a>__ARM_clz</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, depilogue.o(i.__ARM_clz), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[cc]"></a>__ARM_common_memcpy1_5</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, main.o(i.__ARM_common_memcpy1_5))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiReader_GetMessage(HiReader_DataMessage*)
</UL>

<P><STRONG><a name="[11c]"></a>__aeabi_atexit</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, aeabi_atexit.o(i.__aeabi_atexit))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = __aeabi_atexit &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_49697bbe
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___9_Voice_cpp_ade2d123
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___19_HighPowerReader_cpp_39f899b3
</UL>

<P><STRONG><a name="[ea]"></a>__aeabi_vec_ctor_nocookie_nodtor</STRONG> (Thumb, 34 bytes, Stack size 40 bytes, aeabi_vec_ctor_nocookie_nodtor.o(i.__aeabi_vec_ctor_nocookie_nodtor))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::SerialBase(PinName, PinName)
</UL>

<P><STRONG><a name="[11e]"></a>__cxa_finalize</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, cxa_finalize.o(i.__cxa_finalize), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>

<P><STRONG><a name="[49]"></a>__cxa_pure_virtual</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, pure_virt.o(i.__cxa_pure_virtual))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __cxa_pure_virtual
</UL>
<BR>[Address Reference Count : 1]<UL><LI> TimerEvent.o(.constdata__ZTVN4mbed10TimerEventE)
</UL>
<P><STRONG><a name="[169]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[16a]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[16b]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[11f]"></a>fflush</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fflush_f.o(i._fflush$full))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fflush
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_seek
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[56]"></a>_sys_open</STRONG> (Thumb, 210 bytes, Stack size 32 bytes, retarget.o(i._sys_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = _sys_open &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::FilePath(const char*)
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::fileName()
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::isFile()
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::exists()
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::file()
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::fileSystem()
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[120]"></a>_sys_seek</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, retarget.o(i._sys_seek))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
</UL>

<P><STRONG><a name="[62]"></a>_sys_write</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, retarget.o(i._sys_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = _sys_write &rArr; serial_init &rArr; pinmap_pinout &rArr; pin_function &rArr; Set_GPIO_Clock &rArr; error &rArr; exit &rArr; mbed_die &rArr; wait_ms &rArr; us_ticker_read &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_putc
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[93]"></a>error</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, error.o(i.error))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = error &rArr; exit &rArr; mbed_die &rArr; wait_ms &rArr; us_ticker_read &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101::CC1101(PinName, PinName, PinName, PinName, PinName)
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_pinout
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_peripheral
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_merge
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_GPIO_Clock
</UL>

<P><STRONG><a name="[129]"></a>exit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, retarget.o(i.exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = exit &rArr; mbed_die &rArr; wait_ms &rArr; us_ticker_read &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_die
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
</UL>

<P><STRONG><a name="[116]"></a>free</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, malloc.o(i.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
</UL>

<P><STRONG><a name="[f2]"></a>get_us_ticker_data</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, us_ticker_api.o(i.get_us_ticker_data))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::Timer()
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimerEvent::TimerEvent__sub_object()
</UL>

<P><STRONG><a name="[12b]"></a>gpio_dir</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, gpio_api.o(i.gpio_dir))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = gpio_dir &rArr; pin_function &rArr; Set_GPIO_Clock &rArr; error &rArr; exit &rArr; mbed_die &rArr; wait_ms &rArr; us_ticker_read &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_function
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_out
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_in
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_out_ex
</UL>

<P><STRONG><a name="[12e]"></a>gpio_init</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, gpio_api.o(i.gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = gpio_init &rArr; pin_function &rArr; Set_GPIO_Clock &rArr; error &rArr; exit &rArr; mbed_die &rArr; wait_ms &rArr; us_ticker_read &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_function
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_GPIO_Clock
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_out
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_in
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_out_ex
</UL>

<P><STRONG><a name="[c2]"></a>gpio_init_in</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, gpio.o(i.gpio_init_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = gpio_init_in &rArr; gpio_init &rArr; pin_function &rArr; Set_GPIO_Clock &rArr; error &rArr; exit &rArr; mbed_die &rArr; wait_ms &rArr; us_ticker_read &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_dir
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleKey::SimpleKey(PinName)
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101::CC1101(PinName, PinName, PinName, PinName, PinName)
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE::BLE(BufferedSerial*, CircularBufferEx&, PinName, PinName)
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiReader_PowerOff()
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WT588D::WT588D(PinName, PinName)
</UL>

<P><STRONG><a name="[99]"></a>gpio_init_out</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, gpio.o(i.gpio_init_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = gpio_init_out &rArr; gpio_init &rArr; pin_function &rArr; Set_GPIO_Clock &rArr; error &rArr; exit &rArr; mbed_die &rArr; wait_ms &rArr; us_ticker_read &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_dir
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOn_Init()
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101::CC1101(PinName, PinName, PinName, PinName, PinName)
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Speech_Init(PinName, PinName, PinName)
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WT588D::WT588D(PinName, PinName)
</UL>

<P><STRONG><a name="[12f]"></a>gpio_init_out_ex</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, gpio.o(i.gpio_init_out_ex), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_dir
</UL>

<P><STRONG><a name="[c3]"></a>gpio_mode</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, gpio_api.o(i.gpio_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = gpio_mode &rArr; pin_mode &rArr; Set_GPIO_Clock &rArr; error &rArr; exit &rArr; mbed_die &rArr; wait_ms &rArr; us_ticker_read &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_out
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleKey::Init()
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiReader_PowerOff()
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_in
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WT588D::Init()
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_out_ex
</UL>

<P><STRONG><a name="[79]"></a>$Super$$main</STRONG> (Thumb, 940 bytes, Stack size 80 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = $Super$$main &rArr; Phone_DispatchMessage(unsigned char*) &rArr; Phone_EnterStudyMode(unsigned char) &rArr; CommBLE::SendPacket(const void*, int) &rArr; BLE::SendBytes(const void*, unsigned char) &rArr; BufferedSerial::putc(int) &rArr; BufferedSerial::prime() &rArr; mbed::SerialBase::attach(void(*)(), mbed::SerialBase::IrqType) &rArr; serial_irq_set &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_ms
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reader_FinishXP()
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powered_Init()
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOn_Init()
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIDEncrypt()
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleKey::ScanKey()
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleKey::Init()
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommBLE::IsLink()
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommBLE::SendHeartBeat()
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommBLE::GetNoTxTime()
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommBLE::GetMessage(unsigned char*, unsigned char)
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101::ReadReg(unsigned char)
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101::RXMode()
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101::rssi()
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101::SendPacketAsync(const void*, unsigned char)
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::read_ms()
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::start()
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::reset()
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufferedSerial::printf(const char*, ...)
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufferedSerial::putc(int)
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiReader_GetMessage(HiReader_DataMessage*)
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiReader_IsPowerOn()
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiReader_PowerOff()
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Speech_SetVolume(unsigned char)
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Speech_AddNum(unsigned char)
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Speech_Play()
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Speech_Add(unsigned char)
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memcpy1_5
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAT_Load()
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcCrc(const void*, unsigned char)
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phone_DispatchMessage(unsigned char*)
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttempAddPaiToCacheEx(const RF_RxInsideCardMessage*)
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reader_CheckReceived()
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phone_SendReaderPais()
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reader_GetMessage(unsigned char*, unsigned char)
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[72]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_exceptions_buffer_init
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>

<P><STRONG><a name="[12c]"></a>mbed_assert_internal</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, assert.o(i.mbed_assert_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = mbed_assert_internal &rArr; error &rArr; exit &rArr; mbed_die &rArr; wait_ms &rArr; us_ticker_read &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_out
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_mode
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_function
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_dir
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_out_ex
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
</UL>

<P><STRONG><a name="[12a]"></a>mbed_die</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, board.o(i.mbed_die))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = mbed_die &rArr; wait_ms &rArr; us_ticker_read &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[78]"></a>mbed_main</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, retarget.o(i.mbed_main))
<BR><BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[77]"></a>mbed_sdk_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, mbed_overrides.o(i.mbed_sdk_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = mbed_sdk_init &rArr; HAL_Init &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12d]"></a>pin_function</STRONG> (Thumb, 78 bytes, Stack size 40 bytes, pinmap.o(i.pin_function))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = pin_function &rArr; Set_GPIO_Clock &rArr; error &rArr; exit &rArr; mbed_die &rArr; wait_ms &rArr; us_ticker_read &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_GPIO_Clock
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_pinout
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_dir
</UL>

<P><STRONG><a name="[130]"></a>pin_mode</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, pinmap.o(i.pin_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = pin_mode &rArr; Set_GPIO_Clock &rArr; error &rArr; exit &rArr; mbed_die &rArr; wait_ms &rArr; us_ticker_read &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_GPIO_Clock
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_pinout
</UL>

<P><STRONG><a name="[137]"></a>pinmap_merge</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, pinmap_common.o(i.pinmap_merge))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = pinmap_merge &rArr; error &rArr; exit &rArr; mbed_die &rArr; wait_ms &rArr; us_ticker_read &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
</UL>

<P><STRONG><a name="[138]"></a>pinmap_peripheral</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, pinmap_common.o(i.pinmap_peripheral))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = pinmap_peripheral &rArr; error &rArr; exit &rArr; mbed_die &rArr; wait_ms &rArr; us_ticker_read &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
</UL>

<P><STRONG><a name="[139]"></a>pinmap_pinout</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, pinmap_common.o(i.pinmap_pinout))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = pinmap_pinout &rArr; pin_function &rArr; Set_GPIO_Clock &rArr; error &rArr; exit &rArr; mbed_die &rArr; wait_ms &rArr; us_ticker_read &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_mode
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_function
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
</UL>

<P><STRONG><a name="[e9]"></a>serial_baud</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, serial_api.o(i.serial_baud))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = serial_baud &rArr; init_uart &rArr; HAL_UART_Init &rArr; UART_SetConfig &rArr; HAL_RCC_GetPCLK1Freq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_uart
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::baud(int)
</UL>

<P><STRONG><a name="[e8]"></a>serial_getc</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, serial_api.o(i.serial_getc))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::_base_getc()
</UL>

<P><STRONG><a name="[eb]"></a>serial_init</STRONG> (Thumb, 210 bytes, Stack size 24 bytes, serial_api.o(i.serial_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = serial_init &rArr; pinmap_pinout &rArr; pin_function &rArr; Set_GPIO_Clock &rArr; error &rArr; exit &rArr; mbed_die &rArr; wait_ms &rArr; us_ticker_read &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_pinout
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_peripheral
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_merge
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_uart
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_mode
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::SerialBase(PinName, PinName)
</UL>

<P><STRONG><a name="[ec]"></a>serial_irq_handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, serial_api.o(i.serial_irq_handler))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::SerialBase(PinName, PinName)
</UL>

<P><STRONG><a name="[df]"></a>serial_irq_set</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, serial_api.o(i.serial_irq_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = serial_irq_set &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetVector
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE::BLE(BufferedSerial*, CircularBufferEx&, PinName, PinName)
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::attach(void(*)(), mbed::SerialBase::IrqType)
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufferedSerial::prime()
</UL>

<P><STRONG><a name="[de]"></a>serial_putc</STRONG> (Thumb, 30 bytes, Stack size 4 bytes, serial_api.o(i.serial_putc))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = serial_putc
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufferedSerial::txIrq()
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufferedSerial::prime()
</UL>

<P><STRONG><a name="[dd]"></a>serial_writable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, serial_api.o(i.serial_writable))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufferedSerial::txIrq()
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufferedSerial::prime()
</UL>

<P><STRONG><a name="[13a]"></a>set_compare</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, us_ticker.o(i.set_compare))
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_oc_irq_handler
</UL>

<P><STRONG><a name="[f4]"></a>spi_format</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, spi_api.o(i.spi_format))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = spi_format &rArr; init_spi &rArr; HAL_SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_spi
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SPI::SPI(PinName, PinName, PinName, PinName)
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SPI::frequency(int)
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SPI::format(int, int)
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SPI::write(int)
</UL>

<P><STRONG><a name="[f5]"></a>spi_frequency</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, spi_api.o(i.spi_frequency))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = spi_frequency &rArr; init_spi &rArr; HAL_SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_spi
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SPI::SPI(PinName, PinName, PinName, PinName)
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SPI::frequency(int)
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SPI::format(int, int)
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SPI::write(int)
</UL>

<P><STRONG><a name="[fa]"></a>spi_init</STRONG> (Thumb, 220 bytes, Stack size 56 bytes, spi_api.o(i.spi_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = spi_init &rArr; pinmap_pinout &rArr; pin_function &rArr; Set_GPIO_Clock &rArr; error &rArr; exit &rArr; mbed_die &rArr; wait_ms &rArr; us_ticker_read &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_pinout
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_peripheral
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_merge
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_spi
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SPI::SPI(PinName, PinName, PinName, PinName)
</UL>

<P><STRONG><a name="[f6]"></a>spi_master_write</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, spi_api.o(i.spi_master_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = spi_master_write
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SPI::write(int)
</UL>

<P><STRONG><a name="[ee]"></a>ticker_insert_event</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, ticker_api.o(i.ticker_insert_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ticker_insert_event
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimerEvent::insert(unsigned)
</UL>

<P><STRONG><a name="[13d]"></a>ticker_irq_handler</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, ticker_api.o(i.ticker_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ticker_irq_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_irq_handler
</UL>

<P><STRONG><a name="[fb]"></a>ticker_read</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ticker_api.o(i.ticker_read))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::setup(unsigned)
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::Timer()
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::read_ms()
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::start()
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::reset()
</UL>

<P><STRONG><a name="[f0]"></a>ticker_remove_event</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, ticker_api.o(i.ticker_remove_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ticker_remove_event
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimerEvent::~TimerEvent__sub_object()
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimerEvent::remove()
</UL>

<P><STRONG><a name="[f3]"></a>ticker_set_handler</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, ticker_api.o(i.ticker_set_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ticker_set_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimerEvent::TimerEvent__sub_object()
</UL>

<P><STRONG><a name="[2e]"></a>timer_oc_irq_handler</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, hal_tick.o(i.timer_oc_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = timer_oc_irq_handler &rArr; us_ticker_irq_handler &rArr; ticker_irq_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_irq_handler
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_compare
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_tick.o(i.HAL_InitTick)
</UL>
<P><STRONG><a name="[2d]"></a>timer_update_irq_handler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, hal_tick.o(i.timer_update_irq_handler))
<BR>[Address Reference Count : 1]<UL><LI> hal_tick.o(i.HAL_InitTick)
</UL>
<P><STRONG><a name="[44]"></a>us_ticker_clear_interrupt</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, us_ticker.o(i.us_ticker_clear_interrupt))
<BR>[Address Reference Count : 1]<UL><LI> us_ticker_api.o(.constdata)
</UL>
<P><STRONG><a name="[43]"></a>us_ticker_disable_interrupt</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, us_ticker.o(i.us_ticker_disable_interrupt))
<BR>[Address Reference Count : 1]<UL><LI> us_ticker_api.o(.constdata)
</UL>
<P><STRONG><a name="[41]"></a>us_ticker_init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, us_ticker.o(i.us_ticker_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = us_ticker_init &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> us_ticker_api.o(.constdata)
</UL>
<P><STRONG><a name="[13b]"></a>us_ticker_irq_handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, us_ticker_api.o(i.us_ticker_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = us_ticker_irq_handler &rArr; ticker_irq_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_irq_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_oc_irq_handler
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_set_interrupt
</UL>

<P><STRONG><a name="[42]"></a>us_ticker_read</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, us_ticker.o(i.us_ticker_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = us_ticker_read &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_ms
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_us
</UL>
<BR>[Address Reference Count : 1]<UL><LI> us_ticker_api.o(.constdata)
</UL>
<P><STRONG><a name="[45]"></a>us_ticker_set_interrupt</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, us_ticker.o(i.us_ticker_set_interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = us_ticker_set_interrupt &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_irq_handler
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> us_ticker_api.o(.constdata)
</UL>
<P><STRONG><a name="[aa]"></a>wait_ms</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, wait_api.o(i.wait_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = wait_ms &rArr; us_ticker_read &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_read
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_die
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powered_Init()
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommBLE::Init()
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101::init(const S_RF_SETTINGS*)
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Speech_SetVolume(unsigned char)
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WT588D::play(unsigned char)
</UL>

<P><STRONG><a name="[106]"></a>wait_us</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, wait_api.o(i.wait_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = wait_us &rArr; us_ticker_read &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_read
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101::WriteReg(unsigned char, unsigned char)
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101::ReadReg(unsigned char)
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101::Strobe(unsigned char)
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101::POWER_UP_RESET_CCxxx0()
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101::WriteBurstReg(unsigned char, const void*, unsigned char)
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101::ReadBurstReg(unsigned char, unsigned char*, unsigned char)
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101::ReadStatus(unsigned char)
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WT588D::play(unsigned char)
</UL>

<P><STRONG><a name="[3c]"></a>mbed::CircularBuffer&lang;unsigned char, (unsigned)64, unsigned&rang;::~CircularBuffer()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, voice.o(t._ZN4mbed14CircularBufferIhLj64EjED1Ev))
<BR>[Address Reference Count : 1]<UL><LI> voice.o(i.__sti___9_Voice_cpp_ade2d123)
</UL>
<P><STRONG><a name="[16c]"></a>mbed::CircularBuffer&lang;unsigned char, (unsigned)64, unsigned&rang;::~CircularBuffer__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, voice.o(t._ZN4mbed14CircularBufferIhLj64EjED1Ev), UNUSED)

<P><STRONG><a name="[3a]"></a>mbed::CircularBufferA&lang;RxTileInfo, unsigned&rang;::~CircularBufferA()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, highpowerreader.o(t._ZN4mbed15CircularBufferAI10RxTileInfojED1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbed::CircularBufferA&lang;RxTileInfo, unsigned&rang;::~CircularBufferA() &rArr; operator delete[] (void*) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> highpowerreader.o(i.__sti___19_HighPowerReader_cpp_39f899b3)
</UL>
<P><STRONG><a name="[16d]"></a>mbed::CircularBufferA&lang;RxTileInfo, unsigned&rang;::~CircularBufferA__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, highpowerreader.o(t._ZN4mbed15CircularBufferAI10RxTileInfojED1Ev), UNUSED)

<P><STRONG><a name="[39]"></a>mbed::CircularBufferA&lang;unsigned char, unsigned&rang;::~CircularBufferA()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, highpowerreader.o(t._ZN4mbed15CircularBufferAIhjED1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbed::CircularBufferA&lang;unsigned char, unsigned&rang;::~CircularBufferA() &rArr; operator delete[] (void*) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> highpowerreader.o(i.__sti___19_HighPowerReader_cpp_39f899b3)
</UL>
<P><STRONG><a name="[16e]"></a>mbed::CircularBufferA&lang;unsigned char, unsigned&rang;::~CircularBufferA__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, highpowerreader.o(t._ZN4mbed15CircularBufferAIhjED1Ev), UNUSED)

<P><STRONG><a name="[31]"></a>void mbed::FunctionPointerArg1&lang;void, void&rang;::membercaller&lang;BufferedSerial&rang;(void*, unsigned*)</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, bufferedserial.o(t._ZN4mbed19FunctionPointerArg1IvvE12membercallerI14BufferedSerialEEvPvPj))
<BR>[Address Reference Count : 1]<UL><LI> bufferedserial.o(i._ZN14BufferedSerial5primeEv)
</UL>
<P><STRONG><a name="[32]"></a>void mbed::FunctionPointerArg1&lang;void, void&rang;::membercaller&lang;BLE&rang;(void*, unsigned*)</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ble.o(t._ZN4mbed19FunctionPointerArg1IvvE12membercallerI3BLEEEvPvPj))
<BR>[Address Reference Count : 1]<UL><LI> ble.o(i._ZN3BLEC1EP14BufferedSerialR16CircularBufferEx7PinNameS4_)
</UL>
<P><STRONG><a name="[e3]"></a>Buffer&lang;char&rang;::Buffer(unsigned)</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, buffer.o(t._ZN6BufferIcEC1Ej))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Buffer&lang;char&rang;::Buffer(unsigned) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufferedSerial::BufferedSerial(PinName, PinName, unsigned)
</UL>

<P><STRONG><a name="[16f]"></a>Buffer&lang;char&rang;::Buffer__sub_object(unsigned)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, buffer.o(t._ZN6BufferIcEC1Ej), UNUSED)

<P><STRONG><a name="[e4]"></a>Buffer&lang;char&rang;::~Buffer()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, buffer.o(t._ZN6BufferIcED1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Buffer&lang;char&rang;::~Buffer() &rArr; operator delete[] (void*) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufferedSerial::~BufferedSerial__deallocating()
</UL>

<P><STRONG><a name="[170]"></a>Buffer&lang;char&rang;::~Buffer__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, buffer.o(t._ZN6BufferIcED1Ev), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[4d]"></a>__sti___8_main_cpp_49697bbe</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, main.o(i.__sti___8_main_cpp_49697bbe))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = __sti___8_main_cpp_49697bbe &rArr; __aeabi_atexit &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::Timer()
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimerEvent::TimerEvent__sub_object()
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.init_array)
</UL>
<P><STRONG><a name="[4e]"></a>__sti___19_HighPowerReader_cpp_39f899b3</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, highpowerreader.o(i.__sti___19_HighPowerReader_cpp_39f899b3))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = __sti___19_HighPowerReader_cpp_39f899b3 &rArr; __aeabi_atexit &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::Timer()
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> highpowerreader.o(.init_array)
</UL>
<P><STRONG><a name="[4f]"></a>__sti___9_Voice_cpp_ade2d123</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, voice.o(i.__sti___9_Voice_cpp_ade2d123))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = __sti___9_Voice_cpp_ade2d123 &rArr; __aeabi_atexit &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::Timer()
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> voice.o(.init_array)
</UL>
<P><STRONG><a name="[132]"></a>init_uart</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, serial_api.o(i.init_uart))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = init_uart &rArr; HAL_UART_Init &rArr; UART_SetConfig &rArr; HAL_RCC_GetPCLK1Freq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_baud
</UL>

<P><STRONG><a name="[3d]"></a>uart1_irq</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, serial_api.o(i.uart1_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = uart1_irq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_api.o(i.serial_irq_set)
</UL>
<P><STRONG><a name="[3e]"></a>uart2_irq</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, serial_api.o(i.uart2_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = uart2_irq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_api.o(i.serial_irq_set)
</UL>
<P><STRONG><a name="[33]"></a>&lang;Func1&rang;</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, SerialBase.o(i.<Func1>))
<BR>[Address Reference Count : 1]<UL><LI> SerialBase.o(i._ZN4mbed10SerialBaseC1E7PinNameS1_)
</UL>
<P><STRONG><a name="[131]"></a>init_spi</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, spi_api.o(i.init_spi))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = init_spi &rArr; HAL_SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_frequency
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_format
</UL>

<P><STRONG><a name="[121]"></a>_fp_digits</STRONG> (Thumb, 316 bytes, Stack size 56 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[11a]"></a>_printf_core</STRONG> (Thumb, 1754 bytes, Stack size 128 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsprintf
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vfprintf
</UL>

<P><STRONG><a name="[124]"></a>_printf_post_padding</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[123]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[38]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0vsprintf)
</UL>
<P><STRONG><a name="[2a]"></a>_scanf_char_input</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL>
<P><STRONG><a name="[2c]"></a>[local to arm_exceptions_c]::__default_terminate_handler()</STRONG> (Thumb, 6 bytes, Stack size 8 bytes, arm_exceptions_globs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = [local to arm_exceptions_c]::__default_terminate_handler()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_exceptions_globs.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
