<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\build\Tong.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\build\Tong.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5050169: Last Updated: Fri Mar 04 21:07:26 2016
<BR><P>
<H3>Maximum Stack Usage =        504 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; $Super$$main &rArr; CommWifi::Init() &rArr; WifiObj::GetTcpto() &rArr; WifiObj::scanf(int, const char*, ...) &rArr; vsscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_longlong &rArr; __aeabi_lmul &rArr; __aeabi_llsl
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[9]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">NMI_Handler</a><BR>
 <LI><a href="#[a]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">HardFault_Handler</a><BR>
 <LI><a href="#[b]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">SVC_Handler</a><BR>
 <LI><a href="#[c]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">PendSV_Handler</a><BR>
 <LI><a href="#[18]">ADC1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[18]">ADC1_IRQHandler</a><BR>
 <LI><a href="#[1da]">us_ticker_irq_handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1dd]">us_ticker_set_interrupt</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[35]">&lang;Func1&rang;</a> from SerialBase.o(i.<Func1>) referenced from SerialBase.o(i._ZN4mbed10SerialBaseC1E7PinNameS1_)
 <LI><a href="#[18]">ADC1_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[15]">DMA1_Channel1_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[16]">DMA1_Channel2_3_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[17]">DMA1_Channel4_5_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[12]">EXTI0_1_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[13]">EXTI2_3_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[14]">EXTI4_15_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[10]">FLASH_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[a]">HardFault_Handler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[20]">I2C1_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[21]">I2C2_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[9]">NMI_Handler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[c]">PendSV_Handler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[11]">RCC_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[f]">RTC_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[8]">Reset_Handler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[22]">SPI1_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[23]">SPI2_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[b]">SVC_Handler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[d]">SysTick_Handler</a> from system_stm32f0xx.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[2b]">SystemInit</a> from system_stm32f0xx.o(.text) referenced from startup_stm32f030.o(.text)
 <LI><a href="#[1c]">TIM14_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[1d]">TIM15_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[1e]">TIM16_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[1f]">TIM17_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[19]">TIM1_BRK_UP_TRG_COM_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[1a]">TIM1_CC_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[1b]">TIM3_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[24]">USART1_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[25]">USART2_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[e]">WWDG_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[39]">__default_new_handler()</a> from arm_newhandler_noexceptions.o(.text) referenced from new.o(i._Znwj)
 <LI><a href="#[27]">ToggleLed()</a> from main.o(.text) referenced from main.o(.text)
 <LI><a href="#[45]">BufferedSerial::txIrq()</a> from bufferedserial.o(.text) referenced from bufferedserial.o(.constdata)
 <LI><a href="#[49]">BufferedSerial::write(const void*, unsigned)</a> from bufferedserial.o(.text) referenced from bufferedserial.o(.constdata__ZTV14BufferedSerial)
 <LI><a href="#[48]">BufferedSerial::writeable()</a> from bufferedserial.o(.text) referenced from bufferedserial.o(.constdata__ZTV14BufferedSerial)
 <LI><a href="#[47]">BufferedSerial::~BufferedSerial__deallocating()</a> from bufferedserial.o(.text) referenced from bufferedserial.o(.constdata__ZTV14BufferedSerial)
 <LI><a href="#[46]">BufferedSerial::~BufferedSerial()</a> from bufferedserial.o(.text) referenced from bufferedserial.o(.constdata__ZTV14BufferedSerial)
 <LI><a href="#[34]">[local to arm_exceptions_c]::__default_terminate_handler()</a> from arm_exceptions_globs.o(.text) referenced from arm_exceptions_globs.o(.text)
 <LI><a href="#[36]">mbed::SerialBase::_irq_handler(unsigned, SerialIrq)</a> from SerialBase.o(i._ZN4mbed10SerialBase12_irq_handlerEj9SerialIrq) referenced from SerialBase.o(i._ZN4mbed10SerialBaseC1E7PinNameS1_)
 <LI><a href="#[37]">mbed::TimerEvent::irq(unsigned)</a> from TimerEvent.o(i._ZN4mbed10TimerEvent3irqEj) referenced from TimerEvent.o(i._ZN4mbed10TimerEventC2Ev)
 <LI><a href="#[51]">mbed::TimerEvent::~TimerEvent__sub_object()</a> from TimerEvent.o(i._ZN4mbed10TimerEventD2Ev) referenced from TimerEvent.o(.constdata__ZTVN4mbed10TimerEventE)
 <LI><a href="#[38]">mbed::InterruptIn::_irq_handler(unsigned, gpio_irq_event)</a> from InterruptIn.o(i._ZN4mbed11InterruptIn12_irq_handlerEj14gpio_irq_event) referenced from InterruptIn.o(i._ZN4mbed11InterruptInC1E7PinName)
 <LI><a href="#[52]">mbed::InterruptIn::~InterruptIn()</a> from InterruptIn.o(i._ZN4mbed11InterruptInD1Ev) referenced from InterruptIn.o(.constdata__ZTVN4mbed11InterruptInE)
 <LI><a href="#[2f]">void mbed::FunctionPointer::membercaller&lang;BufferedSerial&rang;(void*, char*)</a> from bufferedserial.o(t._ZN4mbed15FunctionPointer12membercallerI14BufferedSerialEEvPvPc) referenced from bufferedserial.o(.text)
 <LI><a href="#[2a]">void mbed::FunctionPointer::membercaller&lang;LT8910&rang;(void*, char*)</a> from lt8910.o(t._ZN4mbed15FunctionPointer12membercallerI6LT8910EEvPvPc) referenced from lt8910.o(.text)
 <LI><a href="#[2d]">void mbed::FunctionPointer::membercaller&lang;WifiObj&rang;(void*, char*)</a> from wifiobj.o(t._ZN4mbed15FunctionPointer12membercallerI7WifiObjEEvPvPc) referenced from wifiobj.o(.text)
 <LI><a href="#[53]">mbed::SPI::write(int)</a> from SPI.o(i._ZN4mbed3SPI5writeEi) referenced from SPI.o(.constdata__ZTVN4mbed3SPIE)
 <LI><a href="#[29]">mbed::SPI::~SPI()</a> from SPI.o(i._ZN4mbed3SPID1Ev) referenced from SPI.o(.constdata__ZTVN4mbed3SPIE)
 <LI><a href="#[29]">mbed::SPI::~SPI()</a> from SPI.o(i._ZN4mbed3SPID1Ev) referenced from main.o(.text)
 <LI><a href="#[2e]">mbed::Timer::Timer()</a> from Timer.o(i._ZN4mbed5TimerC1Ev) referenced from commwifi.o(.text)
 <LI><a href="#[55]">mbed::Stream::close()</a> from Stream.o(i._ZN4mbed6Stream5closeEv) referenced from Serial.o(.constdata__ZTVN4mbed6SerialE)
 <LI><a href="#[55]">mbed::Stream::close()</a> from Stream.o(i._ZN4mbed6Stream5closeEv) referenced from Stream.o(.constdata__ZTVN4mbed6StreamE)
 <LI><a href="#[56]">mbed::Stream::lseek(long, int)</a> from Stream.o(i._ZN4mbed6Stream5lseekEli) referenced from Serial.o(.constdata__ZTVN4mbed6SerialE)
 <LI><a href="#[56]">mbed::Stream::lseek(long, int)</a> from Stream.o(i._ZN4mbed6Stream5lseekEli) referenced from Stream.o(.constdata__ZTVN4mbed6StreamE)
 <LI><a href="#[54]">mbed::Stream::write(const void*, unsigned)</a> from Stream.o(i._ZN4mbed6Stream5writeEPKvj) referenced from Serial.o(.constdata__ZTVN4mbed6SerialE)
 <LI><a href="#[54]">mbed::Stream::write(const void*, unsigned)</a> from Stream.o(i._ZN4mbed6Stream5writeEPKvj) referenced from Stream.o(.constdata__ZTVN4mbed6StreamE)
 <LI><a href="#[58]">mbed::Ticker::handler()</a> from Ticker.o(i._ZN4mbed6Ticker7handlerEv) referenced from Ticker.o(.constdata__ZTVN4mbed6TickerE)
 <LI><a href="#[28]">mbed::Ticker::~Ticker()</a> from Ticker.o(i._ZN4mbed6TickerD1Ev) referenced from Ticker.o(.constdata__ZTVN4mbed6TickerE)
 <LI><a href="#[28]">mbed::Ticker::~Ticker()</a> from Ticker.o(i._ZN4mbed6TickerD1Ev) referenced from main.o(.text)
 <LI><a href="#[59]">mbed::Timeout::handler()</a> from Timeout.o(i._ZN4mbed7Timeout7handlerEv) referenced from Timeout.o(.constdata__ZTVN4mbed7TimeoutE)
 <LI><a href="#[4b]">CommRF::~CommRF__deallocating()</a> from commrf.o(.text) referenced from commrf.o(.constdata__ZTV6CommRF)
 <LI><a href="#[4a]">CommRF::~CommRF()</a> from commrf.o(.text) referenced from commrf.o(.constdata__ZTV6CommRF)
 <LI><a href="#[43]">LT8910::IsrRead()</a> from lt8910.o(.text) referenced from lt8910.o(.constdata)
 <LI><a href="#[4d]">LT8910::~LT8910__deallocating()</a> from lt8910.o(.text) referenced from lt8910.o(.constdata__ZTV6LT8910)
 <LI><a href="#[4c]">LT8910::~LT8910()</a> from lt8910.o(.text) referenced from lt8910.o(.constdata__ZTV6LT8910)
 <LI><a href="#[4f]">WT588D::~WT588D__deallocating()</a> from wt588d.o(.text) referenced from wt588d.o(.constdata__ZTV6WT588D)
 <LI><a href="#[4e]">WT588D::~WT588D()</a> from wt588d.o(.text) referenced from wt588d.o(.constdata__ZTV6WT588D)
 <LI><a href="#[44]">WifiObj::SerialHandler()</a> from wifiobj.o(.text) referenced from wifiobj.o(.constdata)
 <LI><a href="#[57]">thunk{-92} to mbed::Serial::_putc(int)</a> from Serial.o(i._ZThn92_N4mbed6Serial5_putcEi) referenced from Serial.o(.constdata__ZTVN4mbed6SerialE)
 <LI><a href="#[50]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced 6 times from retarget.o(.constdata__ZTVN4mbed10FileHandleE)
 <LI><a href="#[50]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced from TimerEvent.o(.constdata__ZTVN4mbed10TimerEventE)
 <LI><a href="#[50]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced 2 times from Stream.o(.constdata__ZTVN4mbed6StreamE)
 <LI><a href="#[50]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced 6 times from FileLike.o(.constdata__ZTVN4mbed8FileLikeE)
 <LI><a href="#[2c]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f030.o(.text)
 <LI><a href="#[5b]">__sti___10_CommRF_cpp_c19b5ab8</a> from commrf.o(.text) referenced from commrf.o(.init_array)
 <LI><a href="#[5a]">__sti___8_main_cpp_cf170f72</a> from main.o(.text) referenced from main.o(.init_array)
 <LI><a href="#[31]">_sbackspace</a> from _sgetc.o(.text) referenced 2 times from vsscanf.o(.text)
 <LI><a href="#[32]">_scanf_char_input</a> from scanf_char.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[30]">_sgetc</a> from _sgetc.o(.text) referenced 2 times from vsscanf.o(.text)
 <LI><a href="#[3b]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[3b]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0vsprintf)
 <LI><a href="#[3a]">fputc</a> from fputc_fp.o(.text) referenced from printfa.o(i.__0fprintf)
 <LI><a href="#[3a]">fputc</a> from fputc_fp.o(.text) referenced from printfa.o(i.__0printf)
 <LI><a href="#[3a]">fputc</a> from fputc_fp.o(.text) referenced from printfa.o(i.__0vfprintf)
 <LI><a href="#[3d]">gpio_irq0</a> from gpio_irq_api.o(i.gpio_irq0) referenced from gpio_irq_api.o(i.gpio_irq_init)
 <LI><a href="#[3e]">gpio_irq1</a> from gpio_irq_api.o(i.gpio_irq1) referenced from gpio_irq_api.o(i.gpio_irq_init)
 <LI><a href="#[3c]">gpio_irq2</a> from gpio_irq_api.o(i.gpio_irq2) referenced from gpio_irq_api.o(i.gpio_irq_init)
 <LI><a href="#[33]">isspace</a> from isspace_c.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[26]">main</a> from retarget.o(i.$Sub$$main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[42]">tim_oc_irq_handler</a> from us_ticker.o(i.tim_oc_irq_handler) referenced from us_ticker.o(i.us_ticker_init)
 <LI><a href="#[41]">tim_update_irq_handler</a> from us_ticker.o(i.tim_update_irq_handler) referenced from us_ticker.o(i.us_ticker_init)
 <LI><a href="#[3f]">uart1_irq</a> from serial_api.o(i.uart1_irq) referenced from serial_api.o(i.serial_irq_set)
 <LI><a href="#[40]">uart2_irq</a> from serial_api.o(i.uart2_irq) referenced from serial_api.o(i.serial_irq_set)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[2c]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(.text)
</UL>
<P><STRONG><a name="[1e1]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[5d]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[172]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[5f]"></a>__use_full_stdio</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry6b.o(.ARM.Collect$$$$00000006))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = __use_full_stdio &rArr; _initio &rArr; _sys_open &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_longlong &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[152]"></a>__main_after_initio</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry6b.o(.ARM.Collect$$$$00000006))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[1e2]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[61]"></a>_main_cpp_init$empty</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8a.o(.ARM.Collect$$$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = _main_cpp_init$empty &rArr; __cpp_initialize__aeabi_
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cpp_initialize__aeabi_
</UL>

<P><STRONG><a name="[1e3]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[1e4]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[1e5]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[1e6]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[65]"></a>clrwdt()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOff()
</UL>

<P><STRONG><a name="[62]"></a>PowerOn()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalOut::operator =(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOnDetect()
</UL>

<P><STRONG><a name="[64]"></a>PowerOff()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clrwdt()
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalOut::operator =(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleKeyProcess()
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[1e7]"></a>Formula_85(unsigned char*, unsigned char*)</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[66]"></a>PowerOnDetect()</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOn()
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalIn::read()
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::Timer()
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::read_ms()
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::start()
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::reset()
</UL>

<P><STRONG><a name="[6b]"></a>ScanKey()</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ScanKey() &rArr; mbed::Timer::Timer() &rArr; us_ticker_read &rArr; us_ticker_init &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalIn::read()
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::Timer()
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::read_ms()
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::start()
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::reset()
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleKeyProcess()
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[6d]"></a>HandleKeyProcess()</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HandleKeyProcess() &rArr; ScanKey() &rArr; mbed::Timer::Timer() &rArr; us_ticker_read &rArr; us_ticker_init &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanKey()
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOff()
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_ms
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::read_ms()
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::reset()
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[1e8]"></a>IndicateVolt(int)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[1e9]"></a>ReceivedRFFrame()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[6f]"></a>LockSpi()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::InterruptIn::disable_irq()
</UL>

<P><STRONG><a name="[71]"></a>UnlockSpi()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::InterruptIn::enable_irq()
</UL>

<P><STRONG><a name="[27]"></a>ToggleLed()</STRONG> (Thumb, 346 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ToggleLed() &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalOut::operator =(int)
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalOut::read()
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[94]"></a>PowerOnWifi()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[1ea]"></a>PowerOffWifi()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[76]"></a>SystemSelfTest()</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalIn::read()
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalOut::operator int()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalOut::read()
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[79]"></a>RF_Init()</STRONG> (Thumb, 412 bytes, Stack size 24 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = RF_Init() &rArr; LT8910::LT8910(CircularBuffer&, mbed::SPI*, PinName, PinName) &rArr; mbed::InterruptIn::InterruptIn(PinName) &rArr; gpio_irq_init &rArr; pin_function &rArr; Set_GPIO_Clock &rArr; error &rArr; exit &rArr; mbed_die &rArr; wait_ms &rArr; us_ticker_read &rArr; us_ticker_init &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_ms
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT8910::LT8910(CircularBuffer&, mbed::SPI*, PinName, PinName)
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT8910::ReadReg(unsigned char)
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT8910::Init()
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT8910::EnableReceivedIsr()
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT8910::set_tx_channel(unsigned char)
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT8910::set_rx_channel(unsigned char)
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT8910::EnterRxMode()
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommRF::SendPacket(const unsigned char*, unsigned char)
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[a5]"></a>RestoreRFFreq()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[128]"></a>SetToRemoterFreq()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::PostReadTileEx(int)
</UL>

<P><STRONG><a name="[83]"></a>TestFlashOperation()</STRONG> (Thumb, 152 bytes, Stack size 56 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufferedSerial::printf(const char*, ...)
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFromFlash(int, unsigned char*, int)
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteToFlash(int, const void*, int)
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseFlash(int)
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[89]"></a>$Super$$main</STRONG> (Thumb, 1106 bytes, Stack size 24 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = $Super$$main &rArr; CommWifi::Init() &rArr; WifiObj::GetTcpto() &rArr; WifiObj::scanf(int, const char*, ...) &rArr; vsscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_longlong &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SPI::frequency(int)
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SPI::format(int, int)
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FunctionPointer::attach(void(*)())
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::baud(int)
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufferedSerial::BufferedSerial(PinName, PinName, unsigned)
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IWDG_Start
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IWDG_Refresh
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IWDG_Init
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestoreRFFreq()
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Init()
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOnWifi()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleKeyProcess()
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanKey()
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOff()
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalIn::DigitalIn(PinName)
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalIn::read()
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalOut::operator =(int)
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalOut::DigitalOut(PinName)
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_ms
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2ulz
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::CommWifi(WifiObj*, CommRF*, WT588D*)
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::HandleCmd()
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::StopLink()
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::IsLink()
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::Init()
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::HandleAccelerometer()
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::ConnectPhone()
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiObj::WifiObj(BufferedSerial*, CircularBuffer&, PinName, PinName)
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WT588D::WT588D(PinName, PinName)
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WT588D::Init()
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommRF::CommRF()
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommRF::Init()
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommRF::DecRemainTime()
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::setup(unsigned long long)
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Serial::Serial(PinName, PinName, const char*)
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::read_ms()
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::start()
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::reset()
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ac]"></a>LT8910::Delay(int)</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lt8910.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_ms
</UL>

<P><STRONG><a name="[ad]"></a>LT8910::SetCS()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lt8910.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LT8910::SetCS()
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalOut::operator =(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT8910::write(const unsigned char*, unsigned char)
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT8910::BurstWrite(unsigned char, const unsigned char*, unsigned char)
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT8910::WriteReg(unsigned char, unsigned char, unsigned char)
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT8910::WriteReg(unsigned char, unsigned short)
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT8910::ReadReg(unsigned char)
</UL>

<P><STRONG><a name="[ae]"></a>LT8910::ClearCS()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lt8910.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LT8910::ClearCS()
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalOut::operator =(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT8910::write(const unsigned char*, unsigned char)
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT8910::BurstWrite(unsigned char, const unsigned char*, unsigned char)
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT8910::WriteReg(unsigned char, unsigned char, unsigned char)
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT8910::WriteReg(unsigned char, unsigned short)
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT8910::ReadReg(unsigned char)
</UL>

<P><STRONG><a name="[43]"></a>LT8910::IsrRead()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lt8910.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> lt8910.o(.constdata)
</UL>
<P><STRONG><a name="[1eb]"></a>LT8910::writebytes(const unsigned char*, unsigned char)</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, lt8910.o(.text), UNUSED)

<P><STRONG><a name="[7b]"></a>LT8910::LT8910(CircularBuffer&, mbed::SPI*, PinName, PinName)</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, lt8910.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LT8910::LT8910(CircularBuffer&, mbed::SPI*, PinName, PinName) &rArr; mbed::InterruptIn::InterruptIn(PinName) &rArr; gpio_irq_init &rArr; pin_function &rArr; Set_GPIO_Clock &rArr; error &rArr; exit &rArr; mbed_die &rArr; wait_ms &rArr; us_ticker_read &rArr; us_ticker_init &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::InterruptIn::InterruptIn(PinName)
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalOut::operator =(int)
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalOut::DigitalOut(PinName)
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Init()
</UL>

<P><STRONG><a name="[1ec]"></a>LT8910::LT8910__sub_object(CircularBuffer&, mbed::SPI*, PinName, PinName)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, lt8910.o(.text), UNUSED)

<P><STRONG><a name="[b0]"></a>LT8910::LT8910(CircularBuffer&, mbed::SPI*, PinName)</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, lt8910.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::InterruptIn::InterruptIn(PinName)
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalOut::operator =(int)
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalOut::DigitalOut(PinName)
</UL>

<P><STRONG><a name="[1ed]"></a>LT8910::LT8910__sub_object(CircularBuffer&, mbed::SPI*, PinName)</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, lt8910.o(.text), UNUSED)

<P><STRONG><a name="[4c]"></a>LT8910::~LT8910()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lt8910.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LT8910::~LT8910() &rArr; mbed::InterruptIn::~InterruptIn() &rArr; gpio_irq_free &rArr; pin_function &rArr; Set_GPIO_Clock &rArr; error &rArr; exit &rArr; mbed_die &rArr; wait_ms &rArr; us_ticker_read &rArr; us_ticker_init &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::InterruptIn::~InterruptIn()
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT8910::~LT8910__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lt8910.o(.constdata__ZTV6LT8910)
</UL>
<P><STRONG><a name="[1ee]"></a>LT8910::~LT8910__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, lt8910.o(.text), UNUSED)

<P><STRONG><a name="[4d]"></a>LT8910::~LT8910__deallocating()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lt8910.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LT8910::~LT8910__deallocating() &rArr; LT8910::~LT8910() &rArr; mbed::InterruptIn::~InterruptIn() &rArr; gpio_irq_free &rArr; pin_function &rArr; Set_GPIO_Clock &rArr; error &rArr; exit &rArr; mbed_die &rArr; wait_ms &rArr; us_ticker_read &rArr; us_ticker_init &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT8910::~LT8910()
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lt8910.o(.constdata__ZTV6LT8910)
</UL>
<P><STRONG><a name="[7f]"></a>LT8910::set_tx_channel(unsigned char)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lt8910.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Init()
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::HandleAccelerometer()
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::ProcessNewCommand()
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::SetPaiColor(unsigned char)
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::PostReadTileEx(int)
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::RereadUnmarkTong()
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommRF::ReadRemoter(unsigned char)
</UL>

<P><STRONG><a name="[1ef]"></a>LT8910::tx_channel()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lt8910.o(.text), UNUSED)

<P><STRONG><a name="[7e]"></a>LT8910::set_rx_channel(unsigned char)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lt8910.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Init()
</UL>

<P><STRONG><a name="[1f0]"></a>LT8910::rx_channel()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lt8910.o(.text), UNUSED)

<P><STRONG><a name="[7d]"></a>LT8910::ReadReg(unsigned char)</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, lt8910.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = LT8910::ReadReg(unsigned char) &rArr; wait_us &rArr; us_ticker_read &rArr; us_ticker_init &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_us
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT8910::ClearCS()
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT8910::SetCS()
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Init()
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT8910::SetRFPower(unsigned char)
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT8910::GetRFPower()
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT8910::DisableRssi()
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT8910::EnableRssi()
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT8910::readable()
</UL>

<P><STRONG><a name="[b3]"></a>LT8910::readable()</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, lt8910.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::InterruptIn::operator int()
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT8910::ReadReg(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT8910::WaitTxFinish()
</UL>

<P><STRONG><a name="[82]"></a>LT8910::EnableReceivedIsr()</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, lt8910.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LT8910::EnableReceivedIsr() &rArr; gpio_irq_set &rArr; pin_function &rArr; Set_GPIO_Clock &rArr; error &rArr; exit &rArr; mbed_die &rArr; wait_ms &rArr; us_ticker_read &rArr; us_ticker_init &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_irq_set
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Init()
</UL>

<P><STRONG><a name="[b6]"></a>LT8910::EnableReceivedIsr(void(*)())</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lt8910.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::InterruptIn::rise(void(*)())
</UL>

<P><STRONG><a name="[b8]"></a>LT8910::WriteReg(unsigned char, unsigned short)</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, lt8910.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = LT8910::WriteReg(unsigned char, unsigned short) &rArr; wait_us &rArr; us_ticker_read &rArr; us_ticker_init &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_us
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT8910::ClearCS()
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT8910::SetCS()
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT8910::EnterIdleMode()
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT8910::SetRFPower(unsigned char)
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT8910::DisableRssi()
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT8910::EnableRssi()
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT8910::ClearWriteFifo()
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT8910::Init(const unsigned short*, int)
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT8910::SetChipCtrl(unsigned short)
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT8910::Init()
</UL>

<P><STRONG><a name="[b9]"></a>LT8910::SetChipCtrl(unsigned short)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lt8910.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT8910::WriteReg(unsigned char, unsigned short)
</UL>

<P><STRONG><a name="[ba]"></a>LT8910::WriteReg(unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, lt8910.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LT8910::WriteReg(unsigned char, unsigned char, unsigned char) &rArr; LT8910::ClearCS()
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT8910::ClearCS()
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT8910::SetCS()
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT8910::EnterRxMode(unsigned char)
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT8910::EnterTxMode(unsigned char)
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT8910::EnterTxMode()
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT8910::EnterRxMode()
</UL>

<P><STRONG><a name="[bb]"></a>LT8910::BurstWrite(unsigned char, const unsigned char*, unsigned char)</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, lt8910.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = LT8910::BurstWrite(unsigned char, const unsigned char*, unsigned char) &rArr; wait_us &rArr; us_ticker_read &rArr; us_ticker_init &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_us
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT8910::ClearCS()
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT8910::SetCS()
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT8910::SetSyncWord(const unsigned char*)
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommRF::SendPacket(const unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[bc]"></a>LT8910::WaitTxFinish()</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, lt8910.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT8910::readable()
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT8910::write(const unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[7c]"></a>LT8910::Init()</STRONG> (Thumb, 388 bytes, Stack size 16 bytes, lt8910.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LT8910::Init() &rArr; LT8910::WriteReg(unsigned char, unsigned short) &rArr; wait_us &rArr; us_ticker_read &rArr; us_ticker_init &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT8910::WriteReg(unsigned char, unsigned short)
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Init()
</UL>

<P><STRONG><a name="[bd]"></a>LT8910::Init(const unsigned short*, int)</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, lt8910.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT8910::WriteReg(unsigned char, unsigned short)
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_ms
</UL>

<P><STRONG><a name="[1f1]"></a>LT8910::ScanRssi()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lt8910.o(.text), UNUSED)

<P><STRONG><a name="[be]"></a>LT8910::read()</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, lt8910.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LT8910::read() &rArr; CircularBuffer::push_back(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CircularBuffer::push_back(unsigned char)
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalOut::operator =(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommRF::ReceiveFrame()
</UL>

<P><STRONG><a name="[c0]"></a>LT8910::read(unsigned char*, int)</STRONG> (Thumb, 216 bytes, Stack size 40 bytes, lt8910.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalOut::operator =(int)
</UL>

<P><STRONG><a name="[c1]"></a>LT8910::EnterTxMode()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lt8910.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LT8910::EnterTxMode() &rArr; LT8910::WriteReg(unsigned char, unsigned char, unsigned char) &rArr; LT8910::ClearCS()
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT8910::WriteReg(unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT8910::write(const unsigned char*, unsigned char)
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommRF::SendPacket(const unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[c2]"></a>LT8910::ClearWriteFifo()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lt8910.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = LT8910::ClearWriteFifo() &rArr; LT8910::WriteReg(unsigned char, unsigned short) &rArr; wait_us &rArr; us_ticker_read &rArr; us_ticker_init &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT8910::WriteReg(unsigned char, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT8910::write(const unsigned char*, unsigned char)
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommRF::SendPacket(const unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[c3]"></a>LT8910::write(const unsigned char*, unsigned char)</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, lt8910.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_us
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT8910::ClearWriteFifo()
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT8910::EnterTxMode()
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT8910::WaitTxFinish()
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT8910::ClearCS()
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT8910::SetCS()
</UL>

<P><STRONG><a name="[c4]"></a>LT8910::EnableRssi()</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lt8910.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT8910::WriteReg(unsigned char, unsigned short)
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT8910::ReadReg(unsigned char)
</UL>

<P><STRONG><a name="[c5]"></a>LT8910::DisableRssi()</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lt8910.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT8910::WriteReg(unsigned char, unsigned short)
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT8910::ReadReg(unsigned char)
</UL>

<P><STRONG><a name="[c6]"></a>LT8910::GetRFPower()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lt8910.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT8910::ReadReg(unsigned char)
</UL>

<P><STRONG><a name="[c7]"></a>LT8910::SetRFPower(unsigned char)</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, lt8910.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT8910::WriteReg(unsigned char, unsigned short)
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT8910::ReadReg(unsigned char)
</UL>

<P><STRONG><a name="[c8]"></a>LT8910::SetSyncWord(const unsigned char*)</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lt8910.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT8910::BurstWrite(unsigned char, const unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[c9]"></a>LT8910::EnterTxMode(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lt8910.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT8910::WriteReg(unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[ca]"></a>LT8910::EnterIdleMode()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lt8910.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = LT8910::EnterIdleMode() &rArr; LT8910::WriteReg(unsigned char, unsigned short) &rArr; wait_us &rArr; us_ticker_read &rArr; us_ticker_init &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT8910::WriteReg(unsigned char, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT8910::EnterRxMode(unsigned char)
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT8910::EnterRxMode()
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommRF::SendPacket(const unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[80]"></a>LT8910::EnterRxMode()</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lt8910.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LT8910::EnterRxMode() &rArr; LT8910::EnterIdleMode() &rArr; LT8910::WriteReg(unsigned char, unsigned short) &rArr; wait_us &rArr; us_ticker_read &rArr; us_ticker_init &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT8910::EnterIdleMode()
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT8910::WriteReg(unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Init()
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommRF::DecRemainTime()
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::HandleWakeupExCmd(WifiMsg_WakeupEx*)
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::ReadStatus(unsigned char, TileStatus*)
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::PostReadTileEx(int)
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::RereadUnmarkTong()
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommRF::StartCmd(RFCmd)
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommRF::ReadRemoter(unsigned char)
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommRF::ReadOneTile(unsigned char)
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommRF::WakeupPai(unsigned char, TileFullId, unsigned char)
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommRF::SendCommand(unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[cb]"></a>LT8910::EnterRxMode(unsigned char)</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, lt8910.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT8910::EnterIdleMode()
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT8910::WriteReg(unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[8]"></a>Reset_Handler</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>ADC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Channel2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Channel4_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>I2C2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>TIM15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>TIM16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>TIM17_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>TIM1_BRK_UP_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[cc]"></a>X_RCC_OscConfig</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, system_stm32f0xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = X_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock_PLL_HSI
</UL>

<P><STRONG><a name="[ce]"></a>SetSysClock_PLL_HSI</STRONG> (Thumb, 72 bytes, Stack size 80 bytes, system_stm32f0xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = SetSysClock_PLL_HSI &rArr; HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;X_RCC_OscConfig
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>

<P><STRONG><a name="[d0]"></a>SetSysClock</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, system_stm32f0xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = SetSysClock &rArr; SetSysClock_PLL_HSI &rArr; HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock_PLL_HSI
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[2b]"></a>SystemInit</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, system_stm32f0xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = SystemInit &rArr; SetSysClock &rArr; SetSysClock_PLL_HSI &rArr; HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(.text)
</UL>
<P><STRONG><a name="[d2]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, system_stm32f0xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SystemCoreClockUpdate &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_sdk_init
</UL>

<P><STRONG><a name="[d]"></a>SysTick_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_stm32f0xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[d5]"></a>WifiObj::ReadLine(unsigned char*, unsigned char, int)</STRONG> (Thumb, 92 bytes, Stack size 48 bytes, wifiobj.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::readable()
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufferedSerial::getc()
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::Timer()
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::read_ms()
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::start()
</UL>

<P><STRONG><a name="[44]"></a>WifiObj::SerialHandler()</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, wifiobj.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = WifiObj::SerialHandler() &rArr; BufferedSerial::getc() &rArr; mbed::SerialBase::_base_getc()
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufferedSerial::getc()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wifiobj.o(.constdata)
</UL>
<P><STRONG><a name="[98]"></a>WifiObj::WifiObj(BufferedSerial*, CircularBuffer&, PinName, PinName)</STRONG> (Thumb, 126 bytes, Stack size 48 bytes, wifiobj.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = WifiObj::WifiObj(BufferedSerial*, CircularBuffer&, PinName, PinName) &rArr; mbed::DigitalIn::DigitalIn(PinName) &rArr; gpio_init_in &rArr; gpio_init &rArr; pin_function &rArr; Set_GPIO_Clock &rArr; error &rArr; exit &rArr; mbed_die &rArr; wait_ms &rArr; us_ticker_read &rArr; us_ticker_init &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_irq_set
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalIn::DigitalIn(PinName)
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[1f2]"></a>WifiObj::WifiObj__sub_object(BufferedSerial*, CircularBuffer&, PinName, PinName)</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, wifiobj.o(.text), UNUSED)

<P><STRONG><a name="[d9]"></a>WifiObj::find(int, const char*)</STRONG> (Thumb, 110 bytes, Stack size 48 bytes, wifiobj.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = WifiObj::find(int, const char*) &rArr; mbed::Timer::Timer() &rArr; us_ticker_read &rArr; us_ticker_init &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CircularBuffer::operator [](unsigned) const
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CircularBuffer::size() const
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CircularBuffer::pop_front()
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CircularBuffer::erase_begin(unsigned)
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::Timer()
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::read_ms()
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::start()
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiObj::SendCmdAndWaitReply(const char*, int, const char*)
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiObj::GetGateway(char*, char*, char*, char*)
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiObj::EnterTransparentMode()
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiObj::EnterCommandMode()
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiObj::GetTcpto()
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiObj::GetSsid(char*)
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiObj::SetSsid(const char*)
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiObj::GetLinkStatus()
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiObj::SetWifiMode(WifiObj::WifiMode)
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::Init()
</UL>

<P><STRONG><a name="[df]"></a>WifiObj::SetWifiMode(WifiObj::WifiMode)</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, wifiobj.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufferedSerial::printf(const char*, ...)
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiObj::find(int, const char*)
</UL>

<P><STRONG><a name="[1f3]"></a>WifiObj::GetWifiMode()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wifiobj.o(.text), UNUSED)

<P><STRONG><a name="[e0]"></a>WifiObj::scanf(int, const char*, ...)</STRONG> (Thumb, 174 bytes, Stack size 120 bytes, wifiobj.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = WifiObj::scanf(int, const char*, ...) &rArr; vsscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_longlong &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CircularBuffer::operator [](unsigned) const
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CircularBuffer::front() const
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CircularBuffer::size() const
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CircularBuffer::pop_front()
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::Timer()
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::read_ms()
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::start()
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiObj::GetGateway(char*, char*, char*, char*)
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiObj::GetTcpto()
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiObj::GetSsid(char*)
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiObj::GetLinkStatus()
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::Init()
</UL>

<P><STRONG><a name="[e3]"></a>WifiObj::GetLinkStatus()</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, wifiobj.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufferedSerial::puts(const char*)
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiObj::scanf(int, const char*, ...)
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiObj::find(int, const char*)
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>

<P><STRONG><a name="[e6]"></a>WifiObj::putc(int)</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, wifiobj.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = WifiObj::putc(int) &rArr; BufferedSerial::putc(int) &rArr; BufferedSerial::prime() &rArr; BufferedSerial::txIrq() &rArr; mbed::SerialBase::attach(void(*)(), mbed::SerialBase::IrqType) &rArr; serial_irq_set &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufferedSerial::putc(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::AckCmdWithoutTransID(WifiMessage*, const void*, int)
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::SendPacket(const void*, int)
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::AckCmd(WifiMessage*, const void*, int)
</UL>

<P><STRONG><a name="[e8]"></a>WifiObj::SetEcho(bool)</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, wifiobj.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufferedSerial::puts(const char*)
</UL>

<P><STRONG><a name="[e9]"></a>WifiObj::SetSsid(const char*)</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, wifiobj.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufferedSerial::printf(const char*, ...)
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiObj::find(int, const char*)
</UL>

<P><STRONG><a name="[ea]"></a>WifiObj::GetSsid(char*)</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, wifiobj.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = WifiObj::GetSsid(char*) &rArr; WifiObj::scanf(int, const char*, ...) &rArr; vsscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_longlong &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufferedSerial::puts(const char*)
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiObj::scanf(int, const char*, ...)
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiObj::find(int, const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::Init()
</UL>

<P><STRONG><a name="[eb]"></a>WifiObj::GetTcpto()</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, wifiobj.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = WifiObj::GetTcpto() &rArr; WifiObj::scanf(int, const char*, ...) &rArr; vsscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_longlong &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufferedSerial::puts(const char*)
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiObj::scanf(int, const char*, ...)
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiObj::find(int, const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::Init()
</UL>

<P><STRONG><a name="[ec]"></a>WifiObj::AsyncCmd(WifiATCmd, const void*)</STRONG> (Thumb, 158 bytes, Stack size 8 bytes, wifiobj.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = WifiObj::AsyncCmd(WifiATCmd, const void*) &rArr; BufferedSerial::puts(const char*) &rArr; BufferedSerial::prime() &rArr; BufferedSerial::txIrq() &rArr; mbed::SerialBase::attach(void(*)(), mbed::SerialBase::IrqType) &rArr; serial_irq_set &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufferedSerial::printf(const char*, ...)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufferedSerial::puts(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::ConnectPhone()
</UL>

<P><STRONG><a name="[ed]"></a>WifiObj::EnterCommandMode()</STRONG> (Thumb, 412 bytes, Stack size 40 bytes, wifiobj.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = WifiObj::EnterCommandMode() &rArr; BufferedSerial::putc(int) &rArr; BufferedSerial::prime() &rArr; BufferedSerial::txIrq() &rArr; mbed::SerialBase::attach(void(*)(), mbed::SerialBase::IrqType) &rArr; serial_irq_set &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CircularBuffer::front() const
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CircularBuffer::empty() const
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CircularBuffer::pop_front()
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufferedSerial::putc(int)
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiObj::find(int, const char*)
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_us
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::Timer()
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::read_ms()
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::start()
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::reset()
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::Init()
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::ConnectPhone()
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::HandleLinkFailure()
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::ReConnectPhone()
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::InitAsServer()
</UL>

<P><STRONG><a name="[ef]"></a>WifiObj::EnterTransparentMode()</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, wifiobj.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = WifiObj::EnterTransparentMode() &rArr; BufferedSerial::puts(const char*) &rArr; BufferedSerial::prime() &rArr; BufferedSerial::txIrq() &rArr; mbed::SerialBase::attach(void(*)(), mbed::SerialBase::IrqType) &rArr; serial_irq_set &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufferedSerial::puts(const char*)
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiObj::find(int, const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::ConnectPhone()
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::HandleLinkFailure()
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::ReConnectPhone()
</UL>

<P><STRONG><a name="[f0]"></a>WifiObj::GetGateway(char*, char*, char*, char*)</STRONG> (Thumb, 68 bytes, Stack size 48 bytes, wifiobj.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufferedSerial::puts(const char*)
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiObj::scanf(int, const char*, ...)
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiObj::find(int, const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::HandleLinkFailure()
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::ReConnectPhone()
</UL>

<P><STRONG><a name="[f1]"></a>WifiObj::scanf(const char*, ...)</STRONG> (Thumb, 140 bytes, Stack size 104 bytes, wifiobj.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = WifiObj::scanf(const char*, ...) &rArr; vsscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_longlong &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CircularBuffer::operator [](unsigned) const
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CircularBuffer::front() const
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CircularBuffer::size() const
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CircularBuffer::pop_front()
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiObj::AsyncGetGateway(char*, char*, char*, char*)
</UL>

<P><STRONG><a name="[f2]"></a>WifiObj::AsyncGetGateway(char*, char*, char*, char*)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, wifiobj.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = WifiObj::AsyncGetGateway(char*, char*, char*, char*) &rArr; WifiObj::scanf(const char*, ...) &rArr; vsscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_longlong &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiObj::scanf(const char*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::ConnectPhone()
</UL>

<P><STRONG><a name="[f3]"></a>WifiObj::find(const char*)</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, wifiobj.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = WifiObj::find(const char*) &rArr; CircularBuffer::pop_front() &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CircularBuffer::operator [](unsigned) const
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CircularBuffer::size() const
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CircularBuffer::pop_front()
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CircularBuffer::erase_begin(unsigned)
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::ConnectPhone()
</UL>

<P><STRONG><a name="[f5]"></a>WifiObj::Reset()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wifiobj.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiObj::Init()
</UL>

<P><STRONG><a name="[f4]"></a>WifiObj::Init()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wifiobj.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiObj::Reset()
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::Init()
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::InitAsServer()
</UL>

<P><STRONG><a name="[f6]"></a>WifiObj::Reboot()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, wifiobj.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = WifiObj::Reboot() &rArr; BufferedSerial::puts(const char*) &rArr; BufferedSerial::prime() &rArr; BufferedSerial::txIrq() &rArr; mbed::SerialBase::attach(void(*)(), mbed::SerialBase::IrqType) &rArr; serial_irq_set &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufferedSerial::puts(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::Init()
</UL>

<P><STRONG><a name="[f7]"></a>WifiObj::IsReady()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, wifiobj.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WifiObj::IsReady()
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalIn::operator int()
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::Init()
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::InitAsServer()
</UL>

<P><STRONG><a name="[f9]"></a>WifiObj::IsLink()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, wifiobj.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WifiObj::IsLink()
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalIn::operator int()
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::HandleCmd()
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::IsLink()
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::ConnectPhone()
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::HandleLinkFailure()
</UL>

<P><STRONG><a name="[fa]"></a>WifiObj::SendBytes(const void*, unsigned char)</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, wifiobj.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = WifiObj::SendBytes(const void*, unsigned char) &rArr; BufferedSerial::putc(int) &rArr; BufferedSerial::prime() &rArr; BufferedSerial::txIrq() &rArr; mbed::SerialBase::attach(void(*)(), mbed::SerialBase::IrqType) &rArr; serial_irq_set &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufferedSerial::putc(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::AckCmdWithoutTransID(WifiMessage*, const void*, int)
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::SendToPhone(const unsigned char*)
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::SendPacket(const void*, int)
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::AckCmd(WifiMessage*, const void*, int)
</UL>

<P><STRONG><a name="[fb]"></a>WifiObj::SendCmdAndWaitReply(const char*, int, const char*)</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, wifiobj.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = WifiObj::SendCmdAndWaitReply(const char*, int, const char*) &rArr; BufferedSerial::puts(const char*) &rArr; BufferedSerial::prime() &rArr; BufferedSerial::txIrq() &rArr; mbed::SerialBase::attach(void(*)(), mbed::SerialBase::IrqType) &rArr; serial_irq_set &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufferedSerial::printf(const char*, ...)
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CircularBuffer::front() const
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CircularBuffer::empty() const
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CircularBuffer::pop_front()
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufferedSerial::puts(const char*)
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiObj::find(int, const char*)
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::Timer()
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::read_ms()
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::start()
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::Init()
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::HandleLinkFailure()
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::ReConnectPhone()
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::InitAsServer()
</UL>

<P><STRONG><a name="[fc]"></a>WT588D::OneWireDrive()</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, wt588d.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_us
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalOut::operator =(int)
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::reset()
</UL>

<P><STRONG><a name="[92]"></a>WT588D::WT588D(PinName, PinName)</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, wt588d.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = WT588D::WT588D(PinName, PinName) &rArr; gpio_init_out &rArr; gpio_init &rArr; pin_function &rArr; Set_GPIO_Clock &rArr; error &rArr; exit &rArr; mbed_die &rArr; wait_ms &rArr; us_ticker_read &rArr; us_ticker_init &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FunctionPointer::FunctionPointer(void(*)())
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimerEvent::TimerEvent__sub_object()
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_out
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_in
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::Timer()
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[1f4]"></a>WT588D::WT588D__sub_object(PinName, PinName)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, wt588d.o(.text), UNUSED)

<P><STRONG><a name="[4e]"></a>WT588D::~WT588D()</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, wt588d.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = WT588D::~WT588D() &rArr; mbed::Ticker::detach() &rArr; mbed::TimerEvent::remove() &rArr; us_ticker_remove_event &rArr; us_ticker_set_interrupt &rArr; us_ticker_irq_handler &rArr;  us_ticker_set_interrupt (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimerEvent::~TimerEvent__sub_object()
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::detach()
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WT588D::~WT588D__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wt588d.o(.constdata__ZTV6WT588D)
</UL>
<P><STRONG><a name="[1f5]"></a>WT588D::~WT588D__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, wt588d.o(.text), UNUSED)

<P><STRONG><a name="[4f]"></a>WT588D::~WT588D__deallocating()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, wt588d.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = WT588D::~WT588D__deallocating() &rArr; WT588D::~WT588D() &rArr; mbed::Ticker::detach() &rArr; mbed::TimerEvent::remove() &rArr; us_ticker_remove_event &rArr; us_ticker_set_interrupt &rArr; us_ticker_irq_handler &rArr;  us_ticker_set_interrupt (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WT588D::~WT588D()
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wt588d.o(.constdata__ZTV6WT588D)
</UL>
<P><STRONG><a name="[100]"></a>WT588D::play(unsigned char)</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, wt588d.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = WT588D::play(unsigned char) &rArr; wait_us &rArr; us_ticker_read &rArr; us_ticker_init &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_us
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalOut::operator =(int)
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_ms
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::reset()
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::PlayVoice()
</UL>

<P><STRONG><a name="[101]"></a>WT588D::IsBusy()</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, wt588d.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = WT588D::IsBusy() &rArr; mbed::Timer::read_ms() &rArr; us_ticker_read &rArr; us_ticker_init &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::read_ms()
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::PlayVoice()
</UL>

<P><STRONG><a name="[93]"></a>WT588D::Init()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, wt588d.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = WT588D::Init() &rArr; mbed::Timer::start() &rArr; us_ticker_read &rArr; us_ticker_init &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalOut::operator =(int)
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::start()
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[102]"></a>WT588D::SetDatLow()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, wt588d.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WT588D::SetDatLow()
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalOut::operator =(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::PlayVoice()
</UL>

<P><STRONG><a name="[103]"></a>WT588D::SetDatHigh()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, wt588d.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WT588D::SetDatHigh()
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalOut::operator =(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::PlayVoice()
</UL>

<P><STRONG><a name="[104]"></a>CommRF::isValidCommand()</STRONG> (Thumb, 168 bytes, Stack size 8 bytes, commrf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = CommRF::isValidCommand() &rArr; CircularBuffer::operator [](unsigned) const &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CircularBuffer::operator [](unsigned) const
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommRF::ReadFrame(CircularBuffer&, void*)
</UL>

<P><STRONG><a name="[4a]"></a>CommRF::~CommRF()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, commrf.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommRF::~CommRF__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> commrf.o(.constdata__ZTV6CommRF)
</UL>
<P><STRONG><a name="[1f6]"></a>CommRF::~CommRF__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, commrf.o(.text), UNUSED)

<P><STRONG><a name="[4b]"></a>CommRF::~CommRF__deallocating()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, commrf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CommRF::~CommRF__deallocating() &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommRF::~CommRF()
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> commrf.o(.constdata__ZTV6CommRF)
</UL>
<P><STRONG><a name="[99]"></a>CommRF::CommRF()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, commrf.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[1f7]"></a>CommRF::CommRF__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, commrf.o(.text), UNUSED)

<P><STRONG><a name="[9b]"></a>CommRF::Init()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, commrf.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[81]"></a>CommRF::SendPacket(const unsigned char*, unsigned char)</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, commrf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = CommRF::SendPacket(const unsigned char*, unsigned char) &rArr; LT8910::EnterIdleMode() &rArr; LT8910::WriteReg(unsigned char, unsigned short) &rArr; wait_us &rArr; us_ticker_read &rArr; us_ticker_init &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_us
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT8910::EnterIdleMode()
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT8910::ClearWriteFifo()
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT8910::EnterTxMode()
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT8910::BurstWrite(unsigned char, const unsigned char*, unsigned char)
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::Timer()
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::read_ms()
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::start()
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Init()
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommRF::DecRemainTime()
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommRF::ReadRemoter(unsigned char)
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommRF::ReadOneTile(unsigned char)
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommRF::ReadTilesChainEx(unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommRF::ReadTilesChain(unsigned char, unsigned char, unsigned char)
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommRF::WakeupPai(unsigned char, TileFullId, unsigned char)
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommRF::SendCommand(unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[105]"></a>CommRF::SendCommand(unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, commrf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = CommRF::SendCommand(unsigned char, unsigned char, unsigned char) &rArr; CommRF::SendPacket(const unsigned char*, unsigned char) &rArr; LT8910::EnterIdleMode() &rArr; LT8910::WriteReg(unsigned char, unsigned short) &rArr; wait_us &rArr; us_ticker_read &rArr; us_ticker_init &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT8910::EnterRxMode()
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommRF::SendPacket(const unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommRF::EnterShortSleep(unsigned char)
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommRF::EnterLongSleep(unsigned char)
</UL>

<P><STRONG><a name="[1f8]"></a>CommRF::CalcCrc(const unsigned char*, unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, commrf.o(.text), UNUSED)

<P><STRONG><a name="[106]"></a>CommRF::WakeupPai(unsigned char, TileFullId, unsigned char)</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, commrf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = CommRF::WakeupPai(unsigned char, TileFullId, unsigned char) &rArr; CommRF::SendPacket(const unsigned char*, unsigned char) &rArr; LT8910::EnterIdleMode() &rArr; LT8910::WriteReg(unsigned char, unsigned short) &rArr; wait_us &rArr; us_ticker_read &rArr; us_ticker_init &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT8910::EnterRxMode()
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommRF::SendPacket(const unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::ReadStatus(unsigned char, TileStatus*)
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::WakeupTiles()
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::PostReadTileEx(int)
</UL>

<P><STRONG><a name="[107]"></a>CommRF::ReadFrame(CircularBuffer&, void*)</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, commrf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = CommRF::ReadFrame(CircularBuffer&, void*) &rArr; CircularBuffer::pop_front() &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CircularBuffer::operator [](unsigned) const
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CircularBuffer::size() const
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CircularBuffer::pop_front()
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommRF::isValidCommand()
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommRF::ReadFrame(void*)
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommRF::ReadTxDevFrame(void*)
</UL>

<P><STRONG><a name="[108]"></a>CommRF::ReadTxDevFrame(void*)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, commrf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = CommRF::ReadTxDevFrame(void*) &rArr; CommRF::ReadFrame(CircularBuffer&, void*) &rArr; CircularBuffer::pop_front() &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommRF::ReadFrame(CircularBuffer&, void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::PostProcessCommand()
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommRF::ReadStatus(unsigned char, unsigned char, TileStatus*)
</UL>

<P><STRONG><a name="[109]"></a>CommRF::ReadFrame(void*)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, commrf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = CommRF::ReadFrame(void*) &rArr; CommRF::ReadFrame(CircularBuffer&, void*) &rArr; CircularBuffer::pop_front() &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommRF::ReadFrame(CircularBuffer&, void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::PostProcessCommand()
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommRF::ReadStatus(unsigned char, unsigned char, TileStatus*)
</UL>

<P><STRONG><a name="[10a]"></a>CommRF::ReadStatus(unsigned char, unsigned char, TileStatus*)</STRONG> (Thumb, 106 bytes, Stack size 56 bytes, commrf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = CommRF::ReadStatus(unsigned char, unsigned char, TileStatus*) &rArr; mbed::Timer::Timer() &rArr; us_ticker_read &rArr; us_ticker_init &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::Timer()
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::read_ms()
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::start()
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommRF::ReadFrame(void*)
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommRF::ReadTxDevFrame(void*)
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::ReadStatus(unsigned char, TileStatus*)
</UL>

<P><STRONG><a name="[10c]"></a>CommRF::EnterLongSleep(unsigned char)</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, commrf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = CommRF::EnterLongSleep(unsigned char) &rArr; CommRF::SendCommand(unsigned char, unsigned char, unsigned char) &rArr; CommRF::SendPacket(const unsigned char*, unsigned char) &rArr; LT8910::EnterIdleMode() &rArr; LT8910::WriteReg(unsigned char, unsigned short) &rArr; wait_us &rArr; us_ticker_read &rArr; us_ticker_init &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_ms
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommRF::SendCommand(unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::ProcessNewCommand()
</UL>

<P><STRONG><a name="[10d]"></a>CommRF::EnterShortSleep(unsigned char)</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, commrf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = CommRF::EnterShortSleep(unsigned char) &rArr; CommRF::SendCommand(unsigned char, unsigned char, unsigned char) &rArr; CommRF::SendPacket(const unsigned char*, unsigned char) &rArr; LT8910::EnterIdleMode() &rArr; LT8910::WriteReg(unsigned char, unsigned short) &rArr; wait_us &rArr; us_ticker_read &rArr; us_ticker_init &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_ms
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommRF::SendCommand(unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::ProcessNewCommand()
</UL>

<P><STRONG><a name="[10e]"></a>CommRF::ReadTilesChain(unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, commrf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommRF::SendPacket(const unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[10f]"></a>CommRF::ReadTilesChainEx(unsigned char, unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, commrf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = CommRF::ReadTilesChainEx(unsigned char, unsigned char, unsigned char, unsigned char) &rArr; CommRF::SendPacket(const unsigned char*, unsigned char) &rArr; LT8910::EnterIdleMode() &rArr; LT8910::WriteReg(unsigned char, unsigned short) &rArr; wait_us &rArr; us_ticker_read &rArr; us_ticker_init &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommRF::SendPacket(const unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::PostReadTileEx(int)
</UL>

<P><STRONG><a name="[110]"></a>CommRF::ReadOneTile(unsigned char)</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, commrf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = CommRF::ReadOneTile(unsigned char) &rArr; CommRF::SendPacket(const unsigned char*, unsigned char) &rArr; LT8910::EnterIdleMode() &rArr; LT8910::WriteReg(unsigned char, unsigned short) &rArr; wait_us &rArr; us_ticker_read &rArr; us_ticker_init &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT8910::EnterRxMode()
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommRF::SendPacket(const unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::RereadUnmarkTong()
</UL>

<P><STRONG><a name="[111]"></a>CommRF::ReadRemoter(unsigned char)</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, commrf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = CommRF::ReadRemoter(unsigned char) &rArr; CommRF::SendPacket(const unsigned char*, unsigned char) &rArr; LT8910::EnterIdleMode() &rArr; LT8910::WriteReg(unsigned char, unsigned short) &rArr; wait_us &rArr; us_ticker_read &rArr; us_ticker_init &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT8910::set_tx_channel(unsigned char)
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT8910::EnterRxMode()
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommRF::SendPacket(const unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::HandleAccelerometer()
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::ProcessNewCommand()
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::PostReadTileEx(int)
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::RereadUnmarkTong()
</UL>

<P><STRONG><a name="[a6]"></a>CommRF::DecRemainTime()</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, commrf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = CommRF::DecRemainTime() &rArr; CommRF::SendPacket(const unsigned char*, unsigned char) &rArr; LT8910::EnterIdleMode() &rArr; LT8910::WriteReg(unsigned char, unsigned short) &rArr; wait_us &rArr; us_ticker_read &rArr; us_ticker_init &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT8910::EnterRxMode()
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommRF::SendPacket(const unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[112]"></a>CommRF::StartCmd(RFCmd)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, commrf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = CommRF::StartCmd(RFCmd) &rArr; LT8910::EnterRxMode() &rArr; LT8910::EnterIdleMode() &rArr; LT8910::WriteReg(unsigned char, unsigned short) &rArr; wait_us &rArr; us_ticker_read &rArr; us_ticker_init &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT8910::EnterRxMode()
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::HandleReadTileExCmdNew(WifiMsg_ReadTileEx*)
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::HandleWakeupExCmd(WifiMsg_WakeupEx*)
</UL>

<P><STRONG><a name="[113]"></a>CommRF::ReceiveFrame()</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, commrf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CommRF::ReceiveFrame() &rArr; LT8910::read() &rArr; CircularBuffer::push_back(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT8910::read()
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::HandleCmd()
</UL>

<P><STRONG><a name="[1f9]"></a>CommRF::TxDevPktRisingHandler()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, commrf.o(.text), UNUSED)

<P><STRONG><a name="[114]"></a>UpdateEeprom()</STRONG> (Thumb, 104 bytes, Stack size 48 bytes, commwifi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = UpdateEeprom() &rArr; mbed::Timer::Timer() &rArr; us_ticker_read &rArr; us_ticker_init &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::Timer()
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::read_ms()
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::start()
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Unlock
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Lock
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::HandleEepromAccessWithoutTransID(WifiMsg_EepromWithoutTransID*)
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::HandleWakeupExCmd(WifiMsg_WakeupEx*)
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::HandleEepromAccess(WifiMsg_Eeprom*)
</UL>

<P><STRONG><a name="[12f]"></a>ConvertKey(unsigned char)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, commwifi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::SendRemoterKeyToPhone(const TileProtocol*)
</UL>

<P><STRONG><a name="[134]"></a>IsSameBuffer(unsigned char*, unsigned char*)</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, commwifi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = IsSameBuffer(unsigned char*, unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::PostProcessCommand()
</UL>

<P><STRONG><a name="[9a]"></a>CommWifi::CommWifi(WifiObj*, CommRF*, WT588D*)</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, commwifi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = CommWifi::CommWifi(WifiObj*, CommRF*, WT588D*) &rArr; mbed::Timer::Timer() &rArr; us_ticker_read &rArr; us_ticker_init &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::Timer()
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[1fa]"></a>CommWifi::CommWifi__sub_object(WifiObj*, CommRF*, WT588D*)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, commwifi.o(.text), UNUSED)

<P><STRONG><a name="[11c]"></a>CommWifi::GetSsid()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, commwifi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::Init()
</UL>

<P><STRONG><a name="[9c]"></a>CommWifi::Init()</STRONG> (Thumb, 550 bytes, Stack size 64 bytes, commwifi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = CommWifi::Init() &rArr; WifiObj::GetTcpto() &rArr; WifiObj::scanf(int, const char*, ...) &rArr; vsscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_longlong &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiObj::SendCmdAndWaitReply(const char*, int, const char*)
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiObj::IsReady()
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiObj::Reboot()
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiObj::Init()
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiObj::EnterCommandMode()
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiObj::GetTcpto()
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiObj::GetSsid(char*)
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiObj::scanf(int, const char*, ...)
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiObj::find(int, const char*)
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_ms
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::Timer()
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::read_ms()
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::start()
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::reset()
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::GetSsid()
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[11d]"></a>CommWifi::InitAsServer()</STRONG> (Thumb, 390 bytes, Stack size 16 bytes, commwifi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiObj::SendCmdAndWaitReply(const char*, int, const char*)
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiObj::IsReady()
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiObj::Init()
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiObj::EnterCommandMode()
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_ms
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::Timer()
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::read_ms()
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::start()
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::reset()
</UL>

<P><STRONG><a name="[a1]"></a>CommWifi::ConnectPhone()</STRONG> (Thumb, 286 bytes, Stack size 72 bytes, commwifi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = CommWifi::ConnectPhone() &rArr; WifiObj::AsyncGetGateway(char*, char*, char*, char*) &rArr; WifiObj::scanf(const char*, ...) &rArr; vsscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_longlong &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiObj::IsLink()
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiObj::find(const char*)
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiObj::AsyncGetGateway(char*, char*, char*, char*)
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiObj::EnterTransparentMode()
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiObj::EnterCommandMode()
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiObj::AsyncCmd(WifiATCmd, const void*)
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::Timer()
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::read_ms()
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::start()
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::reset()
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[11e]"></a>CommWifi::ReConnectPhone()</STRONG> (Thumb, 158 bytes, Stack size 96 bytes, commwifi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiObj::SendCmdAndWaitReply(const char*, int, const char*)
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiObj::GetGateway(char*, char*, char*, char*)
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiObj::EnterTransparentMode()
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiObj::EnterCommandMode()
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::Timer()
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::read_ms()
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::start()
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>

<P><STRONG><a name="[121]"></a>CommWifi::isValidCommand(unsigned char)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, commwifi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::InterpreterCmd()
</UL>

<P><STRONG><a name="[120]"></a>CommWifi::InterpreterCmd()</STRONG> (Thumb, 234 bytes, Stack size 24 bytes, commwifi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = CommWifi::InterpreterCmd() &rArr; CircularBuffer::pop_front() &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CircularBuffer::empty() const
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CircularBuffer::pop_front()
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::isValidCommand(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::HandleCmd()
</UL>

<P><STRONG><a name="[122]"></a>CommWifi::AckCmd(WifiMessage*, const void*, int)</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, commwifi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = CommWifi::AckCmd(WifiMessage*, const void*, int) &rArr; WifiObj::SendBytes(const void*, unsigned char) &rArr; BufferedSerial::putc(int) &rArr; BufferedSerial::prime() &rArr; BufferedSerial::txIrq() &rArr; mbed::SerialBase::attach(void(*)(), mbed::SerialBase::IrqType) &rArr; serial_irq_set &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiObj::SendBytes(const void*, unsigned char)
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiObj::putc(int)
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::reset()
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::ProcessNewCommand()
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::HandleReadTileExCmdNew(WifiMsg_ReadTileEx*)
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::HandleWakeupExCmd(WifiMsg_WakeupEx*)
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::HandleEepromAccess(WifiMsg_Eeprom*)
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::CheckWakeup(const TileProtocol*)
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::ReadTiles(const TileProtocol*)
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::SendRemoterKeyToPhone(const TileProtocol*)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::SendXidWakeToPhone(unsigned char)
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::AckEndToPhone(unsigned char)
</UL>

<P><STRONG><a name="[123]"></a>CommWifi::AckEndToPhone(unsigned char)</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, commwifi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = CommWifi::AckEndToPhone(unsigned char) &rArr; CommWifi::AckCmd(WifiMessage*, const void*, int) &rArr; WifiObj::SendBytes(const void*, unsigned char) &rArr; BufferedSerial::putc(int) &rArr; BufferedSerial::prime() &rArr; BufferedSerial::txIrq() &rArr; mbed::SerialBase::attach(void(*)(), mbed::SerialBase::IrqType) &rArr; serial_irq_set &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::AckCmd(WifiMessage*, const void*, int)
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::PostReadTileEx(int)
</UL>

<P><STRONG><a name="[126]"></a>CommWifi::GetNextUnmarkTong(unsigned char)</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, commwifi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CommWifi::GetNextUnmarkTong(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::PostReadTileEx(int)
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::RereadUnmarkTong()
</UL>

<P><STRONG><a name="[125]"></a>CommWifi::RereadUnmarkTong()</STRONG> (Thumb, 274 bytes, Stack size 24 bytes, commwifi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = CommWifi::RereadUnmarkTong() &rArr; CommRF::ReadRemoter(unsigned char) &rArr; CommRF::SendPacket(const unsigned char*, unsigned char) &rArr; LT8910::EnterIdleMode() &rArr; LT8910::WriteReg(unsigned char, unsigned short) &rArr; wait_us &rArr; us_ticker_read &rArr; us_ticker_init &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT8910::set_tx_channel(unsigned char)
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT8910::EnterRxMode()
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::read_ms()
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::reset()
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::GetNextUnmarkTong(unsigned char)
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommRF::ReadRemoter(unsigned char)
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommRF::ReadOneTile(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::PostReadTileEx(int)
</UL>

<P><STRONG><a name="[127]"></a>CommWifi::PostReadTileEx(int)</STRONG> (Thumb, 514 bytes, Stack size 24 bytes, commwifi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = CommWifi::PostReadTileEx(int) &rArr; CommWifi::AckEndToPhone(unsigned char) &rArr; CommWifi::AckCmd(WifiMessage*, const void*, int) &rArr; WifiObj::SendBytes(const void*, unsigned char) &rArr; BufferedSerial::putc(int) &rArr; BufferedSerial::prime() &rArr; BufferedSerial::txIrq() &rArr; mbed::SerialBase::attach(void(*)(), mbed::SerialBase::IrqType) &rArr; serial_irq_set &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetToRemoterFreq()
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT8910::set_tx_channel(unsigned char)
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT8910::EnterRxMode()
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::read_ms()
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::reset()
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::RereadUnmarkTong()
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::GetNextUnmarkTong(unsigned char)
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::AckEndToPhone(unsigned char)
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommRF::ReadRemoter(unsigned char)
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommRF::ReadTilesChainEx(unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommRF::WakeupPai(unsigned char, TileFullId, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::PostProcessCommand()
</UL>

<P><STRONG><a name="[129]"></a>CommWifi::SendXidWakeToPhone(unsigned char)</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, commwifi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = CommWifi::SendXidWakeToPhone(unsigned char) &rArr; CommWifi::AckCmd(WifiMessage*, const void*, int) &rArr; WifiObj::SendBytes(const void*, unsigned char) &rArr; BufferedSerial::putc(int) &rArr; BufferedSerial::prime() &rArr; BufferedSerial::txIrq() &rArr; mbed::SerialBase::attach(void(*)(), mbed::SerialBase::IrqType) &rArr; serial_irq_set &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::reset()
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::AckCmd(WifiMessage*, const void*, int)
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::WakeupTiles()
</UL>

<P><STRONG><a name="[12d]"></a>CommWifi::GetNextUnwakeTile(int) const</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, commwifi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CommWifi::GetNextUnwakeTile(int) const
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::WakeupTiles()
</UL>

<P><STRONG><a name="[12c]"></a>CommWifi::IsWakeup(unsigned char) const</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, commwifi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::GetWakeupCount() const
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::WakeupTiles()
</UL>

<P><STRONG><a name="[12b]"></a>CommWifi::AreAllWakeup() const</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, commwifi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::WakeupTiles()
</UL>

<P><STRONG><a name="[12a]"></a>CommWifi::WakeupTiles()</STRONG> (Thumb, 228 bytes, Stack size 24 bytes, commwifi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = CommWifi::WakeupTiles() &rArr; CommWifi::SendXidWakeToPhone(unsigned char) &rArr; CommWifi::AckCmd(WifiMessage*, const void*, int) &rArr; WifiObj::SendBytes(const void*, unsigned char) &rArr; BufferedSerial::putc(int) &rArr; BufferedSerial::prime() &rArr; BufferedSerial::txIrq() &rArr; mbed::SerialBase::attach(void(*)(), mbed::SerialBase::IrqType) &rArr; serial_irq_set &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::read_ms()
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::reset()
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::AreAllWakeup() const
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::IsWakeup(unsigned char) const
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::GetNextUnwakeTile(int) const
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::SendXidWakeToPhone(unsigned char)
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommRF::WakeupPai(unsigned char, TileFullId, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::PostProcessCommand()
</UL>

<P><STRONG><a name="[12e]"></a>CommWifi::SendRemoterKeyToPhone(const TileProtocol*)</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, commwifi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = CommWifi::SendRemoterKeyToPhone(const TileProtocol*) &rArr; CommWifi::AckCmd(WifiMessage*, const void*, int) &rArr; WifiObj::SendBytes(const void*, unsigned char) &rArr; BufferedSerial::putc(int) &rArr; BufferedSerial::prime() &rArr; BufferedSerial::txIrq() &rArr; mbed::SerialBase::attach(void(*)(), mbed::SerialBase::IrqType) &rArr; serial_irq_set &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::read_ms()
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::AckCmd(WifiMessage*, const void*, int)
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertKey(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::PostProcessCommand()
</UL>

<P><STRONG><a name="[130]"></a>CommWifi::ReadTiles(const TileProtocol*)</STRONG> (Thumb, 310 bytes, Stack size 40 bytes, commwifi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = CommWifi::ReadTiles(const TileProtocol*) &rArr; CommWifi::AckCmd(WifiMessage*, const void*, int) &rArr; WifiObj::SendBytes(const void*, unsigned char) &rArr; BufferedSerial::putc(int) &rArr; BufferedSerial::prime() &rArr; BufferedSerial::txIrq() &rArr; mbed::SerialBase::attach(void(*)(), mbed::SerialBase::IrqType) &rArr; serial_irq_set &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::AckCmd(WifiMessage*, const void*, int)
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::PostProcessCommand()
</UL>

<P><STRONG><a name="[131]"></a>CommWifi::CheckWakeup(const TileProtocol*)</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, commwifi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = CommWifi::CheckWakeup(const TileProtocol*) &rArr; CommWifi::AckCmd(WifiMessage*, const void*, int) &rArr; WifiObj::SendBytes(const void*, unsigned char) &rArr; BufferedSerial::putc(int) &rArr; BufferedSerial::prime() &rArr; BufferedSerial::txIrq() &rArr; mbed::SerialBase::attach(void(*)(), mbed::SerialBase::IrqType) &rArr; serial_irq_set &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::AckCmd(WifiMessage*, const void*, int)
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::PostProcessCommand()
</UL>

<P><STRONG><a name="[135]"></a>CommWifi::SelectMatch(TileProtocol*, TileProtocol*)</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, commwifi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::PostProcessCommand()
</UL>

<P><STRONG><a name="[132]"></a>CommWifi::PlayVoice()</STRONG> (Thumb, 222 bytes, Stack size 24 bytes, commwifi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = CommWifi::PlayVoice() &rArr; WT588D::play(unsigned char) &rArr; wait_us &rArr; us_ticker_read &rArr; us_ticker_init &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CircularBuffer::empty() const
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CircularBuffer::pop_front()
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalOut::operator =(int)
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalOut::read()
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::Timer()
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::read_ms()
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::start()
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::reset()
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WT588D::SetDatHigh()
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WT588D::SetDatLow()
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WT588D::IsBusy()
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WT588D::play(unsigned char)
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::PostProcessCommand()
</UL>

<P><STRONG><a name="[133]"></a>CommWifi::PostProcessCommand()</STRONG> (Thumb, 650 bytes, Stack size 56 bytes, commwifi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = CommWifi::PostProcessCommand() &rArr; CommWifi::WakeupTiles() &rArr; CommWifi::SendXidWakeToPhone(unsigned char) &rArr; CommWifi::AckCmd(WifiMessage*, const void*, int) &rArr; WifiObj::SendBytes(const void*, unsigned char) &rArr; BufferedSerial::putc(int) &rArr; BufferedSerial::prime() &rArr; BufferedSerial::txIrq() &rArr; mbed::SerialBase::attach(void(*)(), mbed::SerialBase::IrqType) &rArr; serial_irq_set &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::PlayVoice()
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::SelectMatch(TileProtocol*, TileProtocol*)
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::CheckWakeup(const TileProtocol*)
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::ReadTiles(const TileProtocol*)
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::SendRemoterKeyToPhone(const TileProtocol*)
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::WakeupTiles()
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::PostReadTileEx(int)
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsSameBuffer(unsigned char*, unsigned char*)
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommRF::ReadFrame(void*)
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommRF::ReadTxDevFrame(void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::HandleCmd()
</UL>

<P><STRONG><a name="[136]"></a>CommWifi::HandleEepromAccess(WifiMsg_Eeprom*)</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, commwifi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = CommWifi::HandleEepromAccess(WifiMsg_Eeprom*) &rArr; CommWifi::AckCmd(WifiMessage*, const void*, int) &rArr; WifiObj::SendBytes(const void*, unsigned char) &rArr; BufferedSerial::putc(int) &rArr; BufferedSerial::prime() &rArr; BufferedSerial::txIrq() &rArr; mbed::SerialBase::attach(void(*)(), mbed::SerialBase::IrqType) &rArr; serial_irq_set &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::AckCmd(WifiMessage*, const void*, int)
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateEeprom()
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::ProcessNewCommand()
</UL>

<P><STRONG><a name="[138]"></a>CommWifi::ReadStatus(unsigned char, TileStatus*)</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, commwifi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = CommWifi::ReadStatus(unsigned char, TileStatus*) &rArr; CommRF::WakeupPai(unsigned char, TileFullId, unsigned char) &rArr; CommRF::SendPacket(const unsigned char*, unsigned char) &rArr; LT8910::EnterIdleMode() &rArr; LT8910::WriteReg(unsigned char, unsigned short) &rArr; wait_us &rArr; us_ticker_read &rArr; us_ticker_init &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT8910::EnterRxMode()
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommRF::ReadStatus(unsigned char, unsigned char, TileStatus*)
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommRF::WakeupPai(unsigned char, TileFullId, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::ProcessNewCommand()
</UL>

<P><STRONG><a name="[139]"></a>CommWifi::SetPaiColor(unsigned char)</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, commwifi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CommWifi::SetPaiColor(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT8910::set_tx_channel(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::ProcessNewCommand()
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::HandleReadTileExCmdNew(WifiMsg_ReadTileEx*)
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::HandleWakeupExCmd(WifiMsg_WakeupEx*)
</UL>

<P><STRONG><a name="[13d]"></a>CommWifi::SetPlayContent(const unsigned char*, unsigned char)</STRONG> (Thumb, 94 bytes, Stack size 20 bytes, commwifi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CommWifi::SetPlayContent(const unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::ProcessNewCommand()
</UL>

<P><STRONG><a name="[13a]"></a>CommWifi::HandleWakeupExCmd(WifiMsg_WakeupEx*)</STRONG> (Thumb, 434 bytes, Stack size 32 bytes, commwifi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = CommWifi::HandleWakeupExCmd(WifiMsg_WakeupEx*) &rArr; CommWifi::AckCmd(WifiMessage*, const void*, int) &rArr; WifiObj::SendBytes(const void*, unsigned char) &rArr; BufferedSerial::putc(int) &rArr; BufferedSerial::prime() &rArr; BufferedSerial::txIrq() &rArr; mbed::SerialBase::attach(void(*)(), mbed::SerialBase::IrqType) &rArr; serial_irq_set &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT8910::EnterRxMode()
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::reset()
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::SetPaiColor(unsigned char)
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::AckCmd(WifiMessage*, const void*, int)
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateEeprom()
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommRF::StartCmd(RFCmd)
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::ProcessNewCommand()
</UL>

<P><STRONG><a name="[13b]"></a>CommWifi::HandleReadTileExCmdNew(WifiMsg_ReadTileEx*)</STRONG> (Thumb, 426 bytes, Stack size 40 bytes, commwifi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = CommWifi::HandleReadTileExCmdNew(WifiMsg_ReadTileEx*) &rArr; CommWifi::AckCmd(WifiMessage*, const void*, int) &rArr; WifiObj::SendBytes(const void*, unsigned char) &rArr; BufferedSerial::putc(int) &rArr; BufferedSerial::prime() &rArr; BufferedSerial::txIrq() &rArr; mbed::SerialBase::attach(void(*)(), mbed::SerialBase::IrqType) &rArr; serial_irq_set &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::read_ms()
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::reset()
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::SetPaiColor(unsigned char)
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::AckCmd(WifiMessage*, const void*, int)
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommRF::StartCmd(RFCmd)
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::ProcessNewCommand()
</UL>

<P><STRONG><a name="[13c]"></a>CommWifi::ProcessNewCommand()</STRONG> (Thumb, 282 bytes, Stack size 16 bytes, commwifi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = CommWifi::ProcessNewCommand() &rArr; CommWifi::HandleReadTileExCmdNew(WifiMsg_ReadTileEx*) &rArr; CommWifi::AckCmd(WifiMessage*, const void*, int) &rArr; WifiObj::SendBytes(const void*, unsigned char) &rArr; BufferedSerial::putc(int) &rArr; BufferedSerial::prime() &rArr; BufferedSerial::txIrq() &rArr; mbed::SerialBase::attach(void(*)(), mbed::SerialBase::IrqType) &rArr; serial_irq_set &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT8910::set_tx_channel(unsigned char)
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::HandleReadTileExCmdNew(WifiMsg_ReadTileEx*)
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::HandleWakeupExCmd(WifiMsg_WakeupEx*)
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::SetPlayContent(const unsigned char*, unsigned char)
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::SetPaiColor(unsigned char)
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::ReadStatus(unsigned char, TileStatus*)
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::HandleEepromAccess(WifiMsg_Eeprom*)
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::AckCmd(WifiMessage*, const void*, int)
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommRF::ReadRemoter(unsigned char)
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommRF::EnterShortSleep(unsigned char)
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommRF::EnterLongSleep(unsigned char)
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::HandleCmd()
</UL>

<P><STRONG><a name="[13e]"></a>CommWifi::SendPacket(const void*, int)</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, commwifi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = CommWifi::SendPacket(const void*, int) &rArr; WifiObj::SendBytes(const void*, unsigned char) &rArr; BufferedSerial::putc(int) &rArr; BufferedSerial::prime() &rArr; BufferedSerial::txIrq() &rArr; mbed::SerialBase::attach(void(*)(), mbed::SerialBase::IrqType) &rArr; serial_irq_set &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiObj::SendBytes(const void*, unsigned char)
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiObj::putc(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::SendHeartBeat()
</UL>

<P><STRONG><a name="[13f]"></a>CommWifi::SendHeartBeat()</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, commwifi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = CommWifi::SendHeartBeat() &rArr; CommWifi::SendPacket(const void*, int) &rArr; WifiObj::SendBytes(const void*, unsigned char) &rArr; BufferedSerial::putc(int) &rArr; BufferedSerial::prime() &rArr; BufferedSerial::txIrq() &rArr; mbed::SerialBase::attach(void(*)(), mbed::SerialBase::IrqType) &rArr; serial_irq_set &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::read_ms()
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::SendPacket(const void*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::HandleCmd()
</UL>

<P><STRONG><a name="[a3]"></a>CommWifi::HandleCmd()</STRONG> (Thumb, 282 bytes, Stack size 24 bytes, commwifi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = CommWifi::HandleCmd() &rArr; CommWifi::PostProcessCommand() &rArr; CommWifi::WakeupTiles() &rArr; CommWifi::SendXidWakeToPhone(unsigned char) &rArr; CommWifi::AckCmd(WifiMessage*, const void*, int) &rArr; WifiObj::SendBytes(const void*, unsigned char) &rArr; BufferedSerial::putc(int) &rArr; BufferedSerial::prime() &rArr; BufferedSerial::txIrq() &rArr; mbed::SerialBase::attach(void(*)(), mbed::SerialBase::IrqType) &rArr; serial_irq_set &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiObj::IsLink()
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::Timer()
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::read_ms()
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::start()
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::reset()
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::SendHeartBeat()
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::ProcessNewCommand()
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::PostProcessCommand()
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::InterpreterCmd()
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommRF::ReceiveFrame()
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[a4]"></a>CommWifi::HandleAccelerometer()</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, commwifi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = CommWifi::HandleAccelerometer() &rArr; CommRF::ReadRemoter(unsigned char) &rArr; CommRF::SendPacket(const unsigned char*, unsigned char) &rArr; LT8910::EnterIdleMode() &rArr; LT8910::WriteReg(unsigned char, unsigned short) &rArr; wait_us &rArr; us_ticker_read &rArr; us_ticker_init &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT8910::set_tx_channel(unsigned char)
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::read_ms()
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommRF::ReadRemoter(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[a0]"></a>CommWifi::IsLink()</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, commwifi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CommWifi::IsLink() &rArr; WifiObj::IsLink()
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiObj::IsLink()
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[a2]"></a>CommWifi::StopLink()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, commwifi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[141]"></a>CommWifi::CalcCrc(const unsigned char*, int)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, commwifi.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::CalcCrc(const unsigned char*)
</UL>

<P><STRONG><a name="[140]"></a>CommWifi::CalcCrc(const unsigned char*)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, commwifi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::CalcCrc(const unsigned char*, int)
</UL>

<P><STRONG><a name="[1fb]"></a>CommWifi::IsAllMarked()</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, commwifi.o(.text), UNUSED)

<P><STRONG><a name="[142]"></a>CommWifi::SendToPhone(const unsigned char*)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, commwifi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiObj::SendBytes(const void*, unsigned char)
</UL>

<P><STRONG><a name="[143]"></a>CommWifi::AckCmdWithoutTransID(WifiMessage*, const void*, int)</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, commwifi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiObj::SendBytes(const void*, unsigned char)
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiObj::putc(int)
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::reset()
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::HandleEepromAccessWithoutTransID(WifiMsg_EepromWithoutTransID*)
</UL>

<P><STRONG><a name="[144]"></a>CommWifi::HandleLinkFailure()</STRONG> (Thumb, 74 bytes, Stack size 64 bytes, commwifi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiObj::SendCmdAndWaitReply(const char*, int, const char*)
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiObj::IsLink()
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiObj::GetGateway(char*, char*, char*, char*)
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiObj::EnterTransparentMode()
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiObj::EnterCommandMode()
</UL>

<P><STRONG><a name="[145]"></a>CommWifi::GetWakeupCount() const</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, commwifi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::IsWakeup(unsigned char) const
</UL>

<P><STRONG><a name="[146]"></a>CommWifi::HandleEepromAccessWithoutTransID(WifiMsg_EepromWithoutTransID*)</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, commwifi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::AckCmdWithoutTransID(WifiMessage*, const void*, int)
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateEeprom()
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[84]"></a>EraseFlash(int)</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, flashapp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Unlock
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Lock
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFlashOperation()
</UL>

<P><STRONG><a name="[87]"></a>WriteToFlash(int, const void*, int)</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, flashapp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::Timer()
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::read_ms()
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::start()
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Unlock
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFlashOperation()
</UL>

<P><STRONG><a name="[86]"></a>ReadFromFlash(int, unsigned char*, int)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, flashapp.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFlashOperation()
</UL>

<P><STRONG><a name="[45]"></a>BufferedSerial::txIrq()</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, bufferedserial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = BufferedSerial::txIrq() &rArr; mbed::SerialBase::attach(void(*)(), mbed::SerialBase::IrqType) &rArr; serial_irq_set &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_writable
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_putc
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::attach(void(*)(), mbed::SerialBase::IrqType)
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufferedSerial::prime()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bufferedserial.o(.constdata)
</UL>
<P><STRONG><a name="[14a]"></a>BufferedSerial::prime()</STRONG> (Thumb, 122 bytes, Stack size 48 bytes, bufferedserial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = BufferedSerial::prime() &rArr; BufferedSerial::txIrq() &rArr; mbed::SerialBase::attach(void(*)(), mbed::SerialBase::IrqType) &rArr; serial_irq_set &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_irq_set
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_writable
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::attach(void(*)(), mbed::SerialBase::IrqType)
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufferedSerial::txIrq()
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufferedSerial::puts(const char*)
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufferedSerial::putc(int)
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufferedSerial::write(const void*, unsigned)
</UL>

<P><STRONG><a name="[97]"></a>BufferedSerial::BufferedSerial(PinName, PinName, unsigned)</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, bufferedserial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = BufferedSerial::BufferedSerial(PinName, PinName, unsigned) &rArr; mbed::SerialBase::SerialBase(PinName, PinName) &rArr; serial_init &rArr; pinmap_pinout &rArr; pin_function &rArr; Set_GPIO_Clock &rArr; error &rArr; exit &rArr; mbed_die &rArr; wait_ms &rArr; us_ticker_read &rArr; us_ticker_init &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buffer&lang;char&rang;::Buffer(unsigned)
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::SerialBase(PinName, PinName)
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[1fc]"></a>BufferedSerial::BufferedSerial__sub_object(PinName, PinName, unsigned)</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, bufferedserial.o(.text), UNUSED)

<P><STRONG><a name="[46]"></a>BufferedSerial::~BufferedSerial()</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, bufferedserial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = BufferedSerial::~BufferedSerial() &rArr; mbed::SerialBase::attach(void(*)(), mbed::SerialBase::IrqType) &rArr; serial_irq_set &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buffer&lang;char&rang;::~Buffer()
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::attach(void(*)(), mbed::SerialBase::IrqType)
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufferedSerial::~BufferedSerial__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bufferedserial.o(.constdata__ZTV14BufferedSerial)
</UL>
<P><STRONG><a name="[1fd]"></a>BufferedSerial::~BufferedSerial__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, bufferedserial.o(.text), UNUSED)

<P><STRONG><a name="[47]"></a>BufferedSerial::~BufferedSerial__deallocating()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, bufferedserial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = BufferedSerial::~BufferedSerial__deallocating() &rArr; BufferedSerial::~BufferedSerial() &rArr; mbed::SerialBase::attach(void(*)(), mbed::SerialBase::IrqType) &rArr; serial_irq_set &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufferedSerial::~BufferedSerial()
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bufferedserial.o(.constdata__ZTV14BufferedSerial)
</UL>
<P><STRONG><a name="[48]"></a>BufferedSerial::writeable()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bufferedserial.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> bufferedserial.o(.constdata__ZTV14BufferedSerial)
</UL>
<P><STRONG><a name="[d7]"></a>BufferedSerial::getc()</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, bufferedserial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BufferedSerial::getc() &rArr; mbed::SerialBase::_base_getc()
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::_base_getc()
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiObj::SerialHandler()
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiObj::ReadLine(unsigned char*, unsigned char, int)
</UL>

<P><STRONG><a name="[e7]"></a>BufferedSerial::putc(int)</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, bufferedserial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = BufferedSerial::putc(int) &rArr; BufferedSerial::prime() &rArr; BufferedSerial::txIrq() &rArr; mbed::SerialBase::attach(void(*)(), mbed::SerialBase::IrqType) &rArr; serial_irq_set &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buffer&lang;char&rang;::operator =(char)
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufferedSerial::prime()
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiObj::SendBytes(const void*, unsigned char)
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiObj::EnterCommandMode()
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiObj::putc(int)
</UL>

<P><STRONG><a name="[e4]"></a>BufferedSerial::puts(const char*)</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, bufferedserial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = BufferedSerial::puts(const char*) &rArr; BufferedSerial::prime() &rArr; BufferedSerial::txIrq() &rArr; mbed::SerialBase::attach(void(*)(), mbed::SerialBase::IrqType) &rArr; serial_irq_set &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buffer&lang;char&rang;::operator =(char)
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufferedSerial::prime()
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiObj::SendCmdAndWaitReply(const char*, int, const char*)
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiObj::Reboot()
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiObj::GetGateway(char*, char*, char*, char*)
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiObj::EnterTransparentMode()
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiObj::AsyncCmd(WifiATCmd, const void*)
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiObj::GetTcpto()
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiObj::GetSsid(char*)
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiObj::SetEcho(bool)
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiObj::GetLinkStatus()
</UL>

<P><STRONG><a name="[85]"></a>BufferedSerial::printf(const char*, ...)</STRONG> (Thumb, 58 bytes, Stack size 96 bytes, bufferedserial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = BufferedSerial::printf(const char*, ...) &rArr; __c89vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFlashOperation()
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiObj::SendCmdAndWaitReply(const char*, int, const char*)
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiObj::AsyncCmd(WifiATCmd, const void*)
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiObj::SetSsid(const char*)
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiObj::SetWifiMode(WifiObj::WifiMode)
</UL>

<P><STRONG><a name="[49]"></a>BufferedSerial::write(const void*, unsigned)</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, bufferedserial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = BufferedSerial::write(const void*, unsigned) &rArr; BufferedSerial::prime() &rArr; BufferedSerial::txIrq() &rArr; mbed::SerialBase::attach(void(*)(), mbed::SerialBase::IrqType) &rArr; serial_irq_set &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buffer&lang;char&rang;::operator =(char)
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufferedSerial::prime()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bufferedserial.o(.constdata__ZTV14BufferedSerial)
</UL>
<P><STRONG><a name="[60]"></a>_initio</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, initio_oe.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = _initio &rArr; _sys_open &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_longlong &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_initio
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__use_full_stdio
</UL>

<P><STRONG><a name="[3a]"></a>fputc</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, fputc_fp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = fputc &rArr; _sys_write &rArr; serial_init &rArr; pinmap_pinout &rArr; pin_function &rArr; Set_GPIO_Clock &rArr; error &rArr; exit &rArr; mbed_die &rArr; wait_ms &rArr; us_ticker_read &rArr; us_ticker_init &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
</UL>
<BR>[Address Reference Count : 3]<UL><LI> printfa.o(i.__0fprintf)
<LI> printfa.o(i.__0printf)
<LI> printfa.o(i.__0vfprintf)
</UL>
<P><STRONG><a name="[1fe]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[d3]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CircularBuffer::operator [](unsigned) const
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CircularBuffer::erase_begin(unsigned)
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buffer&lang;char&rang;::operator =(char)
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufferedSerial::txIrq()
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_init
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1ff]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, idiv.o(.text), UNUSED)

<P><STRONG><a name="[74]"></a>__aeabi_idivmod</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, idiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToggleLed()
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CircularBuffer::pop_front()
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::read_ms()
</UL>

<P><STRONG><a name="[15c]"></a>__aeabi_llsr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llushr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[200]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[10b]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void mbed::FunctionPointer::membercaller&lang;WifiObj&rang;(void*, char*)
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void mbed::FunctionPointer::membercaller&lang;LT8910&rang;(void*, char*)
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void mbed::FunctionPointer::membercaller&lang;BufferedSerial&rang;(void*, char*)
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::HandleEepromAccessWithoutTransID(WifiMsg_EepromWithoutTransID*)
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::HandleReadTileExCmdNew(WifiMsg_ReadTileEx*)
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::HandleWakeupExCmd(WifiMsg_WakeupEx*)
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::HandleEepromAccess(WifiMsg_Eeprom*)
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::CheckWakeup(const TileProtocol*)
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::ReadTiles(const TileProtocol*)
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommRF::ReadStatus(unsigned char, unsigned char, TileStatus*)
</UL>

<P><STRONG><a name="[11b]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::Init()
</UL>

<P><STRONG><a name="[201]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[124]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::SendXidWakeToPhone(unsigned char)
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::AckEndToPhone(unsigned char)
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[202]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[203]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[119]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::CommWifi(WifiObj*, CommRF*, WT588D*)
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buffer&lang;char&rang;::clear()
</UL>

<P><STRONG><a name="[88]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufferedSerial::printf(const char*, ...)
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFlashOperation()
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalIn::DigitalIn(PinName)
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalOut::DigitalOut(PinName)
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WT588D::WT588D(PinName, PinName)
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::HandleWakeupExCmd(WifiMsg_WakeupEx*)
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
</UL>

<P><STRONG><a name="[204]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[154]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[da]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiObj::find(const char*)
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiObj::find(int, const char*)
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::ProcessNewCommand()
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::lookup(const char*, unsigned)
</UL>

<P><STRONG><a name="[e5]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiObj::GetLinkStatus()
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::Init()
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::ConnectPhone()
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::ReConnectPhone()
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>

<P><STRONG><a name="[137]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::HandleEepromAccessWithoutTransID(WifiMsg_EepromWithoutTransID*)
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::HandleWakeupExCmd(WifiMsg_WakeupEx*)
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::HandleEepromAccess(WifiMsg_Eeprom*)
</UL>

<P><STRONG><a name="[11f]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::ReConnectPhone()
</UL>

<P><STRONG><a name="[1ad]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::lookup(const char*, unsigned)
</UL>

<P><STRONG><a name="[e2]"></a>vsscanf</STRONG> (Thumb, 40 bytes, Stack size 56 bytes, vsscanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = vsscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_longlong &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiObj::scanf(const char*, ...)
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiObj::scanf(int, const char*, ...)
</UL>

<P><STRONG><a name="[156]"></a>__0sscanf</STRONG> (Thumb, 50 bytes, Stack size 72 bytes, __0sscanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_longlong &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>

<P><STRONG><a name="[157]"></a>_scanf_int</STRONG> (Thumb, 330 bytes, Stack size 48 bytes, _scanf_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[5c]"></a>__cpp_initialize__aeabi_</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, cpp_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __cpp_initialize__aeabi_
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_cpp_init$empty
</UL>

<P><STRONG><a name="[8f]"></a>__aeabi_f2ulz</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, ffixul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2ulz &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[39]"></a>__default_new_handler()</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, arm_newhandler_noexceptions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = __default_new_handler() &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> new.o(i._Znwj)
</UL>
<P><STRONG><a name="[15b]"></a>__aeabi_uldivmod</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[159]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llshl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2ulz
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lmul
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[205]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[158]"></a>_chval</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_longlong
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>

<P><STRONG><a name="[15d]"></a>_scanf_longlong</STRONG> (Thumb, 330 bytes, Stack size 56 bytes, _scanf_longlong.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = _scanf_longlong &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lmul
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[175]"></a>_scanf_string</STRONG> (Thumb, 232 bytes, Stack size 48 bytes, _scanf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _scanf_string
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[174]"></a>_scanf_real</STRONG> (Thumb, 0 bytes, Stack size 104 bytes, scanf_fp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[163]"></a>_scanf_really_real</STRONG> (Thumb, 586 bytes, Stack size 104 bytes, scanf_fp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[155]"></a>__vfscanf_char</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, scanf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = __vfscanf_char &rArr; __vfscanf &rArr; _scanf_longlong &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsscanf
</UL>

<P><STRONG><a name="[30]"></a>_sgetc</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> __0sscanf.o(.text)
<LI> vsscanf.o(.text)
</UL>
<P><STRONG><a name="[31]"></a>_sbackspace</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> __0sscanf.o(.text)
<LI> vsscanf.o(.text)
</UL>
<P><STRONG><a name="[206]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[1be]"></a>__rt_ddtor_pointer_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cpp_dtor.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
</UL>

<P><STRONG><a name="[207]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cpp_final.o(.text), UNUSED)

<P><STRONG><a name="[1b7]"></a>__rt_new_handler_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cpp_memory.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>

<P><STRONG><a name="[208]"></a>__aeabi_unwind_cpp_pr0</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cpp_unwinder.o(.text), UNUSED)

<P><STRONG><a name="[209]"></a>__aeabi_unwind_cpp_pr1</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cpp_unwinder.o(.text), UNUSED)

<P><STRONG><a name="[20a]"></a>_Unwind_DeleteException</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cpp_unwinder.o(.text), UNUSED)

<P><STRONG><a name="[20b]"></a>_Unwind_Activity</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cpp_unwinder.o(.text), UNUSED)

<P><STRONG><a name="[20c]"></a>_Unwind_RaiseException</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cpp_unwinder.o(.text), UNUSED)

<P><STRONG><a name="[16f]"></a>__rt_eh_globals_addr</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, cpp_unwinder.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>

<P><STRONG><a name="[177]"></a>_float_round</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fepilogue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[20d]"></a>_float_epilogue</STRONG> (Thumb, 114 bytes, Stack size 12 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[167]"></a>__aeabi_dadd</STRONG> (Thumb, 328 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[16b]"></a>__aeabi_dsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[16c]"></a>__aeabi_drsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[161]"></a>__aeabi_dmul</STRONG> (Thumb, 202 bytes, Stack size 72 bytes, dmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[162]"></a>__aeabi_ddiv</STRONG> (Thumb, 234 bytes, Stack size 40 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[16d]"></a>__aeabi_d2ulz</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[1c4]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[15a]"></a>std::terminate()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, arm_exceptions_terminate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_new_handler()
</UL>

<P><STRONG><a name="[16e]"></a>__cxa_get_globals</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, arm_exceptions_globs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_exceptions_buffer_init
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_eh_globals_addr
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
</UL>

<P><STRONG><a name="[5e]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[20e]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[15e]"></a>__aeabi_lmul</STRONG> (Thumb, 122 bytes, Stack size 64 bytes, llmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_longlong
</UL>

<P><STRONG><a name="[20f]"></a>_ll_mul</STRONG> (Thumb, 0 bytes, Stack size 64 bytes, llmul.o(.text), UNUSED)

<P><STRONG><a name="[168]"></a>__aeabi_lasr</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[210]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[33]"></a>isspace</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, isspace_c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = isspace
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ctype_lookup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL>
<P><STRONG><a name="[166]"></a>__vfscanf</STRONG> (Thumb, 812 bytes, Stack size 80 bytes, _scanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = __vfscanf &rArr; _scanf_longlong &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_string
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_longlong
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>

<P><STRONG><a name="[16a]"></a>_double_round</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[169]"></a>_double_epilogue</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_clz
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[160]"></a>__aeabi_ul2d</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, dfltul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[165]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[171]"></a>__ARM_exceptions_buffer_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, arm_exceptions_mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __ARM_exceptions_buffer_init &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>

<P><STRONG><a name="[211]"></a>__ARM_exceptions_buffer_allocate</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, arm_exceptions_mem.o(.text), UNUSED)

<P><STRONG><a name="[212]"></a>__ARM_exceptions_buffer_free</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, arm_exceptions_mem.o(.text), UNUSED)

<P><STRONG><a name="[173]"></a>__ctype_lookup</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ctype_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
</UL>

<P><STRONG><a name="[213]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[214]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[26]"></a>main</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, retarget.o(i.$Sub$$main))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = main &rArr; $Super$$main &rArr; CommWifi::Init() &rArr; WifiObj::GetTcpto() &rArr; WifiObj::scanf(int, const char*, ...) &rArr; vsscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_longlong &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_main
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_sdk_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[17b]"></a>FLASH_PageErase</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f0xx_hal_flash.o(i.FLASH_PageErase))
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
</UL>

<P><STRONG><a name="[17a]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, stm32f0xx_hal_flash.o(i.FLASH_WaitForLastOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
</UL>

<P><STRONG><a name="[116]"></a>HAL_FLASHEx_Erase</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, stm32f0xx_hal_flash_ex.o(i.HAL_FLASHEx_Erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_PageErase
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseFlash(int)
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateEeprom()
</UL>

<P><STRONG><a name="[118]"></a>HAL_FLASH_Lock</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f0xx_hal_flash.o(i.HAL_FLASH_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteToFlash(int, const void*, int)
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseFlash(int)
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateEeprom()
</UL>

<P><STRONG><a name="[117]"></a>HAL_FLASH_Program</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, stm32f0xx_hal_flash.o(i.HAL_FLASH_Program))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteToFlash(int, const void*, int)
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateEeprom()
</UL>

<P><STRONG><a name="[115]"></a>HAL_FLASH_Unlock</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f0xx_hal_flash.o(i.HAL_FLASH_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteToFlash(int, const void*, int)
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseFlash(int)
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateEeprom()
</UL>

<P><STRONG><a name="[1d6]"></a>HAL_GPIO_Init</STRONG> (Thumb, 412 bytes, Stack size 16 bytes, stm32f0xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_function
</UL>

<P><STRONG><a name="[cd]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f0xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IWDG_Start
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IWDG_Refresh
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IWDG_Init
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;X_RCC_OscConfig
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>

<P><STRONG><a name="[9d]"></a>HAL_IWDG_Init</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, stm32f0xx_hal_iwdg.o(i.HAL_IWDG_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_IWDG_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IWDG_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[17c]"></a>HAL_IWDG_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_hal_iwdg.o(i.HAL_IWDG_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IWDG_Init
</UL>

<P><STRONG><a name="[9f]"></a>HAL_IWDG_Refresh</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, stm32f0xx_hal_iwdg.o(i.HAL_IWDG_Refresh))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_IWDG_Refresh
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[9e]"></a>HAL_IWDG_Start</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, stm32f0xx_hal_iwdg.o(i.HAL_IWDG_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_IWDG_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[d4]"></a>HAL_IncTick</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f0xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[d1]"></a>HAL_Init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32f0xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[17d]"></a>HAL_InitTick</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f0xx_hal.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_InitTick &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[17e]"></a>HAL_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_hal.o(i.HAL_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[181]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, stm32f0xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[cf]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 454 bytes, Stack size 24 bytes, stm32f0xx_hal_rcc_ex.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock_PLL_HSI
</UL>

<P><STRONG><a name="[17f]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32f0xx_hal_rcc.o(i.HAL_RCC_GetHCLKFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[183]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32f0xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_RCC_GetPCLK1Freq &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[182]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f0xx_hal_rcc_ex.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_RCC_GetSysClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>

<P><STRONG><a name="[184]"></a>HAL_SPI_Init</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, stm32f0xx_hal_spi.o(i.HAL_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_spi
</UL>

<P><STRONG><a name="[185]"></a>HAL_SPI_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_hal_spi.o(i.HAL_SPI_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>

<P><STRONG><a name="[180]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 46 bytes, Stack size 4 bytes, stm32f0xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_SYSTICK_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[186]"></a>HAL_TIM_Base_Init</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, stm32f0xx_hal_tim.o(i.HAL_TIM_Base_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_init
</UL>

<P><STRONG><a name="[187]"></a>HAL_TIM_Base_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_hal_tim.o(i.HAL_TIM_Base_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[1dc]"></a>HAL_TIM_Base_Start</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f0xx_hal_tim.o(i.HAL_TIM_Base_Start))
<BR><BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_init
</UL>

<P><STRONG><a name="[189]"></a>HAL_UART_Init</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, stm32f0xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = HAL_UART_Init &rArr; UART_SetConfig &rArr; HAL_RCC_GetPCLK1Freq &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_AdvFeatureConfig
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_uart
</UL>

<P><STRONG><a name="[18a]"></a>HAL_UART_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_hal_uart.o(i.HAL_UART_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[1d1]"></a>NVIC_SetVector</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, cmsis_nvic.o(i.NVIC_SetVector))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_SetVector
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_irq_set
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_init
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_irq_init
</UL>

<P><STRONG><a name="[18e]"></a>Set_GPIO_Clock</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, pinmap.o(i.Set_GPIO_Clock))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Set_GPIO_Clock &rArr; error &rArr; exit &rArr; mbed_die &rArr; wait_ms &rArr; us_ticker_read &rArr; us_ticker_init &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_irq_init
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_mode
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_function
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
</UL>

<P><STRONG><a name="[188]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, stm32f0xx_hal_tim.o(i.TIM_Base_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[18c]"></a>UART_AdvFeatureConfig</STRONG> (Thumb, 204 bytes, Stack size 4 bytes, stm32f0xx_hal_uart.o(i.UART_AdvFeatureConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = UART_AdvFeatureConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[18d]"></a>UART_CheckIdleState</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, stm32f0xx_hal_uart.o(i.UART_CheckIdleState))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = UART_CheckIdleState &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[18b]"></a>UART_SetConfig</STRONG> (Thumb, 306 bytes, Stack size 24 bytes, stm32f0xx_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = UART_SetConfig &rArr; HAL_RCC_GetPCLK1Freq &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[190]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 212 bytes, Stack size 24 bytes, stm32f0xx_hal_uart.o(i.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
</UL>

<P><STRONG><a name="[dd]"></a>CircularBuffer::erase_begin(unsigned)</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, wifiobj.o(i._ZN14CircularBuffer11erase_beginEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = CircularBuffer::erase_begin(unsigned) &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CircularBuffer::size() const
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiObj::find(const char*)
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiObj::find(int, const char*)
</UL>

<P><STRONG><a name="[de]"></a>CircularBuffer::pop_front()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, wifiobj.o(i._ZN14CircularBuffer9pop_frontEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = CircularBuffer::pop_front() &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiObj::SendCmdAndWaitReply(const char*, int, const char*)
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiObj::find(const char*)
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiObj::scanf(const char*, ...)
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiObj::EnterCommandMode()
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiObj::scanf(int, const char*, ...)
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiObj::find(int, const char*)
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::PlayVoice()
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::InterpreterCmd()
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommRF::ReadFrame(CircularBuffer&, void*)
</UL>

<P><STRONG><a name="[bf]"></a>CircularBuffer::push_back(unsigned char)</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, lt8910.o(i._ZN14CircularBuffer9push_backEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CircularBuffer::push_back(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT8910::read()
</UL>

<P><STRONG><a name="[a7]"></a>CircularBuffer::CircularBuffer(unsigned char*, int)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, main.o(i._ZN14CircularBufferC1EPhi))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_cf170f72
</UL>

<P><STRONG><a name="[215]"></a>CircularBuffer::CircularBuffer__sub_object(unsigned char*, int)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, main.o(i._ZN14CircularBufferC1EPhi), UNUSED)

<P><STRONG><a name="[75]"></a>mbed::DigitalOut::read()</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, main.o(i._ZN4mbed10DigitalOut4readEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbed::DigitalOut::read()
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_read(gpio_t*)
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemSelfTest()
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToggleLed()
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalOut::operator int()
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::PlayVoice()
</UL>

<P><STRONG><a name="[8c]"></a>mbed::DigitalOut::DigitalOut(PinName)</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, main.o(i._ZN4mbed10DigitalOutC1E7PinName))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = mbed::DigitalOut::DigitalOut(PinName) &rArr; gpio_init_out &rArr; gpio_init &rArr; pin_function &rArr; Set_GPIO_Clock &rArr; error &rArr; exit &rArr; mbed_die &rArr; wait_ms &rArr; us_ticker_read &rArr; us_ticker_init &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_out
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_cf170f72
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT8910::LT8910(CircularBuffer&, mbed::SPI*, PinName)
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT8910::LT8910(CircularBuffer&, mbed::SPI*, PinName, PinName)
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[216]"></a>mbed::DigitalOut::DigitalOut__sub_object(PinName)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, main.o(i._ZN4mbed10DigitalOutC1E7PinName), UNUSED)

<P><STRONG><a name="[63]"></a>mbed::DigitalOut::operator =(int)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, main.o(i._ZN4mbed10DigitalOutaSEi))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToggleLed()
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOff()
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOn()
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT8910::read(unsigned char*, int)
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT8910::read()
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT8910::LT8910(CircularBuffer&, mbed::SPI*, PinName)
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT8910::ClearCS()
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT8910::SetCS()
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WT588D::Init()
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT8910::LT8910(CircularBuffer&, mbed::SPI*, PinName, PinName)
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::PlayVoice()
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WT588D::SetDatHigh()
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WT588D::SetDatLow()
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WT588D::play(unsigned char)
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WT588D::OneWireDrive()
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[78]"></a>mbed::DigitalOut::operator int()</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, main.o(i._ZN4mbed10DigitalOutcviEv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalOut::read()
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemSelfTest()
</UL>

<P><STRONG><a name="[14e]"></a>mbed::SerialBase::_base_getc()</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, SerialBase.o(i._ZN4mbed10SerialBase10_base_getcEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbed::SerialBase::_base_getc()
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_getc
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufferedSerial::getc()
</UL>

<P><STRONG><a name="[193]"></a>mbed::SerialBase::_base_putc(int)</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, SerialBase.o(i._ZN4mbed10SerialBase10_base_putcEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mbed::SerialBase::_base_putc(int) &rArr; serial_putc
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_putc
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thunk{-92} to mbed::Serial::_putc(int)
</UL>

<P><STRONG><a name="[36]"></a>mbed::SerialBase::_irq_handler(unsigned, SerialIrq)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, SerialBase.o(i._ZN4mbed10SerialBase12_irq_handlerEj9SerialIrq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbed::SerialBase::_irq_handler(unsigned, SerialIrq)
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FunctionPointer::call()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> SerialBase.o(i._ZN4mbed10SerialBaseC1E7PinNameS1_)
</UL>
<P><STRONG><a name="[8e]"></a>mbed::SerialBase::baud(int)</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, SerialBase.o(i._ZN4mbed10SerialBase4baudEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = mbed::SerialBase::baud(int) &rArr; serial_baud &rArr; init_uart &rArr; HAL_UART_Init &rArr; UART_SetConfig &rArr; HAL_RCC_GetPCLK1Freq &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_baud
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[149]"></a>mbed::SerialBase::attach(void(*)(), mbed::SerialBase::IrqType)</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, SerialBase.o(i._ZN4mbed10SerialBase6attachEPFvvENS0_7IrqTypeE))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mbed::SerialBase::attach(void(*)(), mbed::SerialBase::IrqType) &rArr; serial_irq_set &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FunctionPointer::attach(void(*)())
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_irq_set
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufferedSerial::~BufferedSerial()
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufferedSerial::prime()
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufferedSerial::txIrq()
</UL>

<P><STRONG><a name="[d6]"></a>mbed::SerialBase::readable()</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, SerialBase.o(i._ZN4mbed10SerialBase8readableEv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_readable
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiObj::ReadLine(unsigned char*, unsigned char, int)
</UL>

<P><STRONG><a name="[14b]"></a>mbed::SerialBase::SerialBase(PinName, PinName)</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, SerialBase.o(i._ZN4mbed10SerialBaseC1E7PinNameS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = mbed::SerialBase::SerialBase(PinName, PinName) &rArr; serial_init &rArr; pinmap_pinout &rArr; pin_function &rArr; Set_GPIO_Clock &rArr; error &rArr; exit &rArr; mbed_die &rArr; wait_ms &rArr; us_ticker_read &rArr; us_ticker_init &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_irq_handler
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufferedSerial::BufferedSerial(PinName, PinName, unsigned)
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Serial::Serial(PinName, PinName, const char*)
</UL>

<P><STRONG><a name="[217]"></a>mbed::SerialBase::SerialBase__sub_object(PinName, PinName)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, SerialBase.o(i._ZN4mbed10SerialBaseC1E7PinNameS1_), UNUSED)

<P><STRONG><a name="[37]"></a>mbed::TimerEvent::irq(unsigned)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, TimerEvent.o(i._ZN4mbed10TimerEvent3irqEj))
<BR>[Address Reference Count : 1]<UL><LI> TimerEvent.o(i._ZN4mbed10TimerEventC2Ev)
</UL>
<P><STRONG><a name="[199]"></a>mbed::TimerEvent::insert(unsigned long long)</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, TimerEvent.o(i._ZN4mbed10TimerEvent6insertEy))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = mbed::TimerEvent::insert(unsigned long long) &rArr; us_ticker_insert_event &rArr; us_ticker_set_interrupt &rArr; us_ticker_irq_handler &rArr;  us_ticker_set_interrupt (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_insert_event
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::setup(unsigned long long)
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::handler()
</UL>

<P><STRONG><a name="[19b]"></a>mbed::TimerEvent::remove()</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, TimerEvent.o(i._ZN4mbed10TimerEvent6removeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = mbed::TimerEvent::remove() &rArr; us_ticker_remove_event &rArr; us_ticker_set_interrupt &rArr; us_ticker_irq_handler &rArr;  us_ticker_set_interrupt (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_remove_event
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::detach()
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::setup(unsigned long long)
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::~Ticker()
</UL>

<P><STRONG><a name="[a8]"></a>mbed::TimerEvent::TimerEvent__sub_object()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, TimerEvent.o(i._ZN4mbed10TimerEventC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = mbed::TimerEvent::TimerEvent__sub_object() &rArr; us_ticker_set_handler &rArr; us_ticker_init &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_set_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_cf170f72
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WT588D::WT588D(PinName, PinName)
</UL>

<P><STRONG><a name="[218]"></a>mbed::TimerEvent::~TimerEvent()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, TimerEvent.o(i._ZN4mbed10TimerEventD2Ev), UNUSED)

<P><STRONG><a name="[51]"></a>mbed::TimerEvent::~TimerEvent__sub_object()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, TimerEvent.o(i._ZN4mbed10TimerEventD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = mbed::TimerEvent::~TimerEvent__sub_object() &rArr; us_ticker_remove_event &rArr; us_ticker_set_interrupt &rArr; us_ticker_irq_handler &rArr;  us_ticker_set_interrupt (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_remove_event
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WT588D::~WT588D()
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::~Ticker()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> TimerEvent.o(.constdata__ZTVN4mbed10TimerEventE)
</UL>
<P><STRONG><a name="[72]"></a>mbed::InterruptIn::enable_irq()</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, InterruptIn.o(i._ZN4mbed11InterruptIn10enable_irqEv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_irq_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockSpi()
</UL>

<P><STRONG><a name="[70]"></a>mbed::InterruptIn::disable_irq()</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, InterruptIn.o(i._ZN4mbed11InterruptIn11disable_irqEv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_irq_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockSpi()
</UL>

<P><STRONG><a name="[38]"></a>mbed::InterruptIn::_irq_handler(unsigned, gpio_irq_event)</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, InterruptIn.o(i._ZN4mbed11InterruptIn12_irq_handlerEj14gpio_irq_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbed::InterruptIn::_irq_handler(unsigned, gpio_irq_event)
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FunctionPointer::call()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> InterruptIn.o(i._ZN4mbed11InterruptInC1E7PinName)
</UL>
<P><STRONG><a name="[b7]"></a>mbed::InterruptIn::rise(void(*)())</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, InterruptIn.o(i._ZN4mbed11InterruptIn4riseEPFvvE), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FunctionPointer::attach(void(*)())
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_irq_set
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT8910::EnableReceivedIsr(void(*)())
</UL>

<P><STRONG><a name="[af]"></a>mbed::InterruptIn::InterruptIn(PinName)</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, InterruptIn.o(i._ZN4mbed11InterruptInC1E7PinName))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = mbed::InterruptIn::InterruptIn(PinName) &rArr; gpio_irq_init &rArr; pin_function &rArr; Set_GPIO_Clock &rArr; error &rArr; exit &rArr; mbed_die &rArr; wait_ms &rArr; us_ticker_read &rArr; us_ticker_init &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FunctionPointer::FunctionPointer(void(*)())
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_in
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_irq_init
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT8910::LT8910(CircularBuffer&, mbed::SPI*, PinName)
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT8910::LT8910(CircularBuffer&, mbed::SPI*, PinName, PinName)
</UL>

<P><STRONG><a name="[219]"></a>mbed::InterruptIn::InterruptIn__sub_object(PinName)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, InterruptIn.o(i._ZN4mbed11InterruptInC1E7PinName), UNUSED)

<P><STRONG><a name="[52]"></a>mbed::InterruptIn::~InterruptIn()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, InterruptIn.o(i._ZN4mbed11InterruptInD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = mbed::InterruptIn::~InterruptIn() &rArr; gpio_irq_free &rArr; pin_function &rArr; Set_GPIO_Clock &rArr; error &rArr; exit &rArr; mbed_die &rArr; wait_ms &rArr; us_ticker_read &rArr; us_ticker_init &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_irq_free
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT8910::~LT8910()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> InterruptIn.o(.constdata__ZTVN4mbed11InterruptInE)
</UL>
<P><STRONG><a name="[21a]"></a>mbed::InterruptIn::~InterruptIn__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, InterruptIn.o(i._ZN4mbed11InterruptInD1Ev), UNUSED)

<P><STRONG><a name="[b4]"></a>mbed::InterruptIn::operator int()</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, InterruptIn.o(i._ZN4mbed11InterruptIncviEv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT8910::readable()
</UL>

<P><STRONG><a name="[194]"></a>mbed::FunctionPointer::call()</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, FunctionPointer.o(i._ZN4mbed15FunctionPointer4callEv))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::_irq_handler(unsigned, SerialIrq)
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timeout::handler()
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::handler()
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::InterruptIn::_irq_handler(unsigned, gpio_irq_event)
</UL>

<P><STRONG><a name="[90]"></a>mbed::FunctionPointer::attach(void(*)())</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, FunctionPointer.o(i._ZN4mbed15FunctionPointer6attachEPFvvE))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::InterruptIn::rise(void(*)())
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::detach()
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::attach(void(*)(), mbed::SerialBase::IrqType)
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::~Ticker()
</UL>

<P><STRONG><a name="[a9]"></a>mbed::FunctionPointer::FunctionPointer(void(*)())</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, FunctionPointer.o(i._ZN4mbed15FunctionPointerC1EPFvvE))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_cf170f72
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::InterruptIn::InterruptIn(PinName)
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WT588D::WT588D(PinName, PinName)
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;&lang;Func1&rang;
</UL>

<P><STRONG><a name="[21b]"></a>mbed::FunctionPointer::FunctionPointer__sub_object(void(*)())</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, FunctionPointer.o(i._ZN4mbed15FunctionPointerC1EPFvvE), UNUSED)

<P><STRONG><a name="[53]"></a>mbed::SPI::write(int)</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, SPI.o(i._ZN4mbed3SPI5writeEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = mbed::SPI::write(int) &rArr; spi_format &rArr; init_spi &rArr; HAL_SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_master_write
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_frequency
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_format
</UL>
<BR>[Address Reference Count : 1]<UL><LI> SPI.o(.constdata__ZTVN4mbed3SPIE)
</UL>
<P><STRONG><a name="[96]"></a>mbed::SPI::format(int, int)</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, SPI.o(i._ZN4mbed3SPI6formatEii))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = mbed::SPI::format(int, int) &rArr; spi_format &rArr; init_spi &rArr; HAL_SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_frequency
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_format
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[95]"></a>mbed::SPI::frequency(int)</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, SPI.o(i._ZN4mbed3SPI9frequencyEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = mbed::SPI::frequency(int) &rArr; spi_format &rArr; init_spi &rArr; HAL_SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_frequency
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_format
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[ab]"></a>mbed::SPI::SPI(PinName, PinName, PinName, PinName)</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, SPI.o(i._ZN4mbed3SPIC1E7PinNameS1_S1_S1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = mbed::SPI::SPI(PinName, PinName, PinName, PinName) &rArr; spi_init &rArr; pinmap_pinout &rArr; pin_function &rArr; Set_GPIO_Clock &rArr; error &rArr; exit &rArr; mbed_die &rArr; wait_ms &rArr; us_ticker_read &rArr; us_ticker_init &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_frequency
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_format
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_cf170f72
</UL>

<P><STRONG><a name="[21c]"></a>mbed::SPI::SPI__sub_object(PinName, PinName, PinName, PinName)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, SPI.o(i._ZN4mbed3SPIC1E7PinNameS1_S1_S1_), UNUSED)

<P><STRONG><a name="[29]"></a>mbed::SPI::~SPI()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, SPI.o(i._ZN4mbed3SPID1Ev))
<BR>[Address Reference Count : 2]<UL><LI> main.o(.text)
<LI> SPI.o(.constdata__ZTVN4mbed3SPIE)
</UL>
<P><STRONG><a name="[21d]"></a>mbed::SPI::~SPI__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, SPI.o(i._ZN4mbed3SPID1Ev), UNUSED)

<P><STRONG><a name="[69]"></a>mbed::Timer::reset()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, Timer.o(i._ZN4mbed5Timer5resetEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = mbed::Timer::reset() &rArr; us_ticker_read &rArr; us_ticker_init &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_read
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleKeyProcess()
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanKey()
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOnDetect()
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiObj::EnterCommandMode()
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::HandleCmd()
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::Init()
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::ConnectPhone()
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::AckCmdWithoutTransID(WifiMessage*, const void*, int)
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::HandleReadTileExCmdNew(WifiMsg_ReadTileEx*)
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::HandleWakeupExCmd(WifiMsg_WakeupEx*)
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::PlayVoice()
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::WakeupTiles()
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::SendXidWakeToPhone(unsigned char)
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::PostReadTileEx(int)
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::RereadUnmarkTong()
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::AckCmd(WifiMessage*, const void*, int)
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::InitAsServer()
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WT588D::play(unsigned char)
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WT588D::OneWireDrive()
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[67]"></a>mbed::Timer::start()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, Timer.o(i._ZN4mbed5Timer5startEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = mbed::Timer::start() &rArr; us_ticker_read &rArr; us_ticker_init &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_read
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteToFlash(int, const void*, int)
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanKey()
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOnDetect()
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiObj::SendCmdAndWaitReply(const char*, int, const char*)
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiObj::EnterCommandMode()
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiObj::scanf(int, const char*, ...)
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiObj::find(int, const char*)
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiObj::ReadLine(unsigned char*, unsigned char, int)
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::HandleCmd()
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::Init()
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::ConnectPhone()
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WT588D::Init()
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommRF::SendPacket(const unsigned char*, unsigned char)
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::PlayVoice()
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::ReConnectPhone()
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::InitAsServer()
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateEeprom()
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommRF::ReadStatus(unsigned char, unsigned char, TileStatus*)
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[6a]"></a>mbed::Timer::read_ms()</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, Timer.o(i._ZN4mbed5Timer7read_msEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = mbed::Timer::read_ms() &rArr; us_ticker_read &rArr; us_ticker_init &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_read
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteToFlash(int, const void*, int)
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleKeyProcess()
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanKey()
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOnDetect()
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiObj::SendCmdAndWaitReply(const char*, int, const char*)
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiObj::EnterCommandMode()
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiObj::scanf(int, const char*, ...)
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiObj::find(int, const char*)
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiObj::ReadLine(unsigned char*, unsigned char, int)
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::HandleCmd()
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::Init()
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::HandleAccelerometer()
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::ConnectPhone()
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommRF::SendPacket(const unsigned char*, unsigned char)
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::SendHeartBeat()
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::HandleReadTileExCmdNew(WifiMsg_ReadTileEx*)
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::PlayVoice()
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::SendRemoterKeyToPhone(const TileProtocol*)
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::WakeupTiles()
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::PostReadTileEx(int)
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::RereadUnmarkTong()
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::ReConnectPhone()
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::InitAsServer()
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateEeprom()
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommRF::ReadStatus(unsigned char, unsigned char, TileStatus*)
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WT588D::IsBusy()
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[2e]"></a>mbed::Timer::Timer()</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, Timer.o(i._ZN4mbed5TimerC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = mbed::Timer::Timer() &rArr; us_ticker_read &rArr; us_ticker_init &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_read
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteToFlash(int, const void*, int)
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanKey()
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOnDetect()
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_cf170f72
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiObj::SendCmdAndWaitReply(const char*, int, const char*)
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiObj::EnterCommandMode()
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiObj::scanf(int, const char*, ...)
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiObj::find(int, const char*)
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiObj::ReadLine(unsigned char*, unsigned char, int)
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::CommWifi(WifiObj*, CommRF*, WT588D*)
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::HandleCmd()
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::Init()
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::ConnectPhone()
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WT588D::WT588D(PinName, PinName)
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommRF::SendPacket(const unsigned char*, unsigned char)
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::PlayVoice()
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::ReConnectPhone()
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::InitAsServer()
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateEeprom()
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommRF::ReadStatus(unsigned char, unsigned char, TileStatus*)
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___10_CommRF_cpp_c19b5ab8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> commwifi.o(.text)
</UL>
<P><STRONG><a name="[21e]"></a>mbed::Timer::Timer__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, Timer.o(i._ZN4mbed5TimerC1Ev), UNUSED)

<P><STRONG><a name="[8b]"></a>mbed::Serial::Serial(PinName, PinName, const char*)</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, Serial.o(i._ZN4mbed6SerialC1E7PinNameS1_PKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = mbed::Serial::Serial(PinName, PinName, const char*) &rArr; mbed::Stream::Stream__sub_object(const char*) &rArr; fopen &rArr; freopen &rArr; _sys_open &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_longlong &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::SerialBase(PinName, PinName)
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::Stream__sub_object(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[21f]"></a>mbed::Serial::Serial__sub_object(PinName, PinName, const char*)</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, Serial.o(i._ZN4mbed6SerialC1E7PinNameS1_PKc), UNUSED)

<P><STRONG><a name="[55]"></a>mbed::Stream::close()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, Stream.o(i._ZN4mbed6Stream5closeEv))
<BR>[Address Reference Count : 2]<UL><LI> Serial.o(.constdata__ZTVN4mbed6SerialE)
<LI> Stream.o(.constdata__ZTVN4mbed6StreamE)
</UL>
<P><STRONG><a name="[56]"></a>mbed::Stream::lseek(long, int)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, Stream.o(i._ZN4mbed6Stream5lseekEli))
<BR>[Address Reference Count : 2]<UL><LI> Serial.o(.constdata__ZTVN4mbed6SerialE)
<LI> Stream.o(.constdata__ZTVN4mbed6StreamE)
</UL>
<P><STRONG><a name="[54]"></a>mbed::Stream::write(const void*, unsigned)</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, Stream.o(i._ZN4mbed6Stream5writeEPKvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbed::Stream::write(const void*, unsigned)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> Serial.o(.constdata__ZTVN4mbed6SerialE)
<LI> Stream.o(.constdata__ZTVN4mbed6StreamE)
</UL>
<P><STRONG><a name="[1a8]"></a>mbed::Stream::Stream__sub_object(const char*)</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, Stream.o(i._ZN4mbed6StreamC2EPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = mbed::Stream::Stream__sub_object(const char*) &rArr; fopen &rArr; freopen &rArr; _sys_open &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_longlong &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileLike::FileLike__sub_object(const char*)
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Serial::Serial(PinName, PinName, const char*)
</UL>

<P><STRONG><a name="[91]"></a>mbed::Ticker::setup(unsigned long long)</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, Ticker.o(i._ZN4mbed6Ticker5setupEy))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = mbed::Ticker::setup(unsigned long long) &rArr; mbed::TimerEvent::insert(unsigned long long) &rArr; us_ticker_insert_event &rArr; us_ticker_set_interrupt &rArr; us_ticker_irq_handler &rArr;  us_ticker_set_interrupt (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_read
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimerEvent::remove()
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimerEvent::insert(unsigned long long)
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[ff]"></a>mbed::Ticker::detach()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, Ticker.o(i._ZN4mbed6Ticker6detachEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = mbed::Ticker::detach() &rArr; mbed::TimerEvent::remove() &rArr; us_ticker_remove_event &rArr; us_ticker_set_interrupt &rArr; us_ticker_irq_handler &rArr;  us_ticker_set_interrupt (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FunctionPointer::attach(void(*)())
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimerEvent::remove()
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WT588D::~WT588D()
</UL>

<P><STRONG><a name="[58]"></a>mbed::Ticker::handler()</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, Ticker.o(i._ZN4mbed6Ticker7handlerEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = mbed::Ticker::handler() &rArr; mbed::TimerEvent::insert(unsigned long long) &rArr; us_ticker_insert_event &rArr; us_ticker_set_interrupt &rArr; us_ticker_irq_handler &rArr;  us_ticker_set_interrupt (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimerEvent::insert(unsigned long long)
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FunctionPointer::call()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> Ticker.o(.constdata__ZTVN4mbed6TickerE)
</UL>
<P><STRONG><a name="[28]"></a>mbed::Ticker::~Ticker()</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, Ticker.o(i._ZN4mbed6TickerD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = mbed::Ticker::~Ticker() &rArr; mbed::TimerEvent::~TimerEvent__sub_object() &rArr; us_ticker_remove_event &rArr; us_ticker_set_interrupt &rArr; us_ticker_irq_handler &rArr;  us_ticker_set_interrupt (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FunctionPointer::attach(void(*)())
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimerEvent::~TimerEvent__sub_object()
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimerEvent::remove()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> main.o(.text)
<LI> Ticker.o(.constdata__ZTVN4mbed6TickerE)
</UL>
<P><STRONG><a name="[220]"></a>mbed::Ticker::~Ticker__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, Ticker.o(i._ZN4mbed6TickerD1Ev), UNUSED)

<P><STRONG><a name="[59]"></a>mbed::Timeout::handler()</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, Timeout.o(i._ZN4mbed7Timeout7handlerEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbed::Timeout::handler()
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FunctionPointer::call()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> Timeout.o(.constdata__ZTVN4mbed7TimeoutE)
</UL>
<P><STRONG><a name="[1b0]"></a>mbed::FileBase::getPathType()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, FileBase.o(i._ZN4mbed8FileBase11getPathTypeEv))
<BR><BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::isFile()
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::file()
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::fileSystem()
</UL>

<P><STRONG><a name="[1ac]"></a>mbed::FileBase::lookup(const char*, unsigned)</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, FileBase.o(i._ZN4mbed8FileBase6lookupEPKcj))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = mbed::FileBase::lookup(const char*, unsigned) &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::FilePath(const char*)
</UL>

<P><STRONG><a name="[1ae]"></a>mbed::FileBase::FileBase(const char*, mbed::PathType)</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, FileBase.o(i._ZN4mbed8FileBaseC1EPKcNS_8PathTypeE))
<BR><BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileLike::FileLike__sub_object(const char*)
</UL>

<P><STRONG><a name="[221]"></a>mbed::FileBase::FileBase__sub_object(const char*, mbed::PathType)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, FileBase.o(i._ZN4mbed8FileBaseC1EPKcNS_8PathTypeE), UNUSED)

<P><STRONG><a name="[1a9]"></a>mbed::FileLike::FileLike__sub_object(const char*)</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, FileLike.o(i._ZN4mbed8FileLikeC2EPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbed::FileLike::FileLike__sub_object(const char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::FileBase(const char*, mbed::PathType)
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::Stream__sub_object(const char*)
</UL>

<P><STRONG><a name="[1af]"></a>mbed::FilePath::fileSystem()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, FilePath.o(i._ZN4mbed8FilePath10fileSystemEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbed::FilePath::fileSystem()
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::getPathType()
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>

<P><STRONG><a name="[1b1]"></a>mbed::FilePath::file()</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, FilePath.o(i._ZN4mbed8FilePath4fileEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbed::FilePath::file()
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::getPathType()
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>

<P><STRONG><a name="[1c8]"></a>mbed::FilePath::exists()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, FilePath.o(i._ZN4mbed8FilePath6existsEv))
<BR><BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>

<P><STRONG><a name="[1b2]"></a>mbed::FilePath::isFile()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, FilePath.o(i._ZN4mbed8FilePath6isFileEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbed::FilePath::isFile()
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::getPathType()
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>

<P><STRONG><a name="[1c9]"></a>mbed::FilePath::fileName()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, FilePath.o(i._ZN4mbed8FilePath8fileNameEv))
<BR><BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>

<P><STRONG><a name="[1b3]"></a>mbed::FilePath::FilePath(const char*)</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, FilePath.o(i._ZN4mbed8FilePathC1EPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = mbed::FilePath::FilePath(const char*) &rArr; mbed::FileBase::lookup(const char*, unsigned) &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::lookup(const char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>

<P><STRONG><a name="[222]"></a>mbed::FilePath::FilePath__sub_object(const char*)</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, FilePath.o(i._ZN4mbed8FilePathC1EPKc), UNUSED)

<P><STRONG><a name="[68]"></a>mbed::DigitalIn::read()</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, main.o(i._ZN4mbed9DigitalIn4readEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbed::DigitalIn::read()
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_read(gpio_t*)
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemSelfTest()
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanKey()
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOnDetect()
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[8d]"></a>mbed::DigitalIn::DigitalIn(PinName)</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, main.o(i._ZN4mbed9DigitalInC1E7PinName))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = mbed::DigitalIn::DigitalIn(PinName) &rArr; gpio_init_in &rArr; gpio_init &rArr; pin_function &rArr; Set_GPIO_Clock &rArr; error &rArr; exit &rArr; mbed_die &rArr; wait_ms &rArr; us_ticker_read &rArr; us_ticker_init &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_in
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_cf170f72
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiObj::WifiObj(BufferedSerial*, CircularBuffer&, PinName, PinName)
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[223]"></a>mbed::DigitalIn::DigitalIn__sub_object(PinName)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, main.o(i._ZN4mbed9DigitalInC1E7PinName), UNUSED)

<P><STRONG><a name="[f8]"></a>mbed::DigitalIn::operator int()</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, wifiobj.o(i._ZN4mbed9DigitalIncviEv))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiObj::IsLink()
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiObj::IsReady()
</UL>

<P><STRONG><a name="[db]"></a>CircularBuffer::size() const</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, wifiobj.o(i._ZNK14CircularBuffer4sizeEv))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CircularBuffer::empty() const
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CircularBuffer::erase_begin(unsigned)
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiObj::find(const char*)
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiObj::scanf(const char*, ...)
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiObj::scanf(int, const char*, ...)
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiObj::find(int, const char*)
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommRF::ReadFrame(CircularBuffer&, void*)
</UL>

<P><STRONG><a name="[ee]"></a>CircularBuffer::empty() const</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, wifiobj.o(i._ZNK14CircularBuffer5emptyEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CircularBuffer::empty() const
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CircularBuffer::size() const
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiObj::SendCmdAndWaitReply(const char*, int, const char*)
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiObj::EnterCommandMode()
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::PlayVoice()
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::InterpreterCmd()
</UL>

<P><STRONG><a name="[e1]"></a>CircularBuffer::front() const</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, wifiobj.o(i._ZNK14CircularBuffer5frontEv))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiObj::SendCmdAndWaitReply(const char*, int, const char*)
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiObj::scanf(const char*, ...)
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiObj::EnterCommandMode()
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiObj::scanf(int, const char*, ...)
</UL>

<P><STRONG><a name="[dc]"></a>CircularBuffer::operator [](unsigned) const</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, wifiobj.o(i._ZNK14CircularBufferixEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CircularBuffer::operator [](unsigned) const &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiObj::find(const char*)
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiObj::scanf(const char*, ...)
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiObj::scanf(int, const char*, ...)
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiObj::find(int, const char*)
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommRF::ReadFrame(CircularBuffer&, void*)
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommRF::isValidCommand()
</UL>

<P><STRONG><a name="[57]"></a>thunk{-92} to mbed::Serial::_putc(int)</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, Serial.o(i._ZThn92_N4mbed6Serial5_putcEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = thunk{-92} to mbed::Serial::_putc(int) &rArr; mbed::SerialBase::_base_putc(int) &rArr; serial_putc
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::_base_putc(int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> Serial.o(.constdata__ZTVN4mbed6SerialE)
</UL>
<P><STRONG><a name="[1b4]"></a>operator delete[] (void*)</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, array_del.o(i._ZdaPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = operator delete[] (void*) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buffer&lang;char&rang;::~Buffer()
</UL>

<P><STRONG><a name="[b1]"></a>operator delete (void*)</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, delete.o(i._ZdlPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT8910::~LT8910__deallocating()
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufferedSerial::~BufferedSerial__deallocating()
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommRF::~CommRF__deallocating()
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WT588D::~WT588D__deallocating()
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
</UL>

<P><STRONG><a name="[1b6]"></a>operator new[] (unsigned)</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, array_new.o(i._Znaj))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buffer&lang;char&rang;::Buffer(unsigned)
</UL>

<P><STRONG><a name="[7a]"></a>operator new(unsigned)</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, new.o(i._Znwj))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = operator new(unsigned) &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_new_handler_addr
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Init()
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
</UL>

<P><STRONG><a name="[1b8]"></a>__0fprintf</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, printfa.o(i.__0fprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[224]"></a>__1fprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0fprintf), UNUSED)

<P><STRONG><a name="[1d5]"></a>__2fprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0fprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
</UL>

<P><STRONG><a name="[225]"></a>__c89fprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0fprintf), UNUSED)

<P><STRONG><a name="[226]"></a>fprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0fprintf), UNUSED)

<P><STRONG><a name="[1ba]"></a>__0printf</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[227]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[77]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemSelfTest()
</UL>

<P><STRONG><a name="[228]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[229]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[1bb]"></a>__0sprintf</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[22a]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[1aa]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::Stream__sub_object(const char*)
</UL>

<P><STRONG><a name="[22b]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[22c]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[1bc]"></a>__0vfprintf</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, printfa.o(i.__0vfprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[22d]"></a>__1vfprintf</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, printfa.o(i.__0vfprintf), UNUSED)

<P><STRONG><a name="[22e]"></a>__2vfprintf</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, printfa.o(i.__0vfprintf), UNUSED)

<P><STRONG><a name="[22f]"></a>__c89vfprintf</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, printfa.o(i.__0vfprintf), UNUSED)

<P><STRONG><a name="[1ca]"></a>vfprintf</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, printfa.o(i.__0vfprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vfprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
</UL>

<P><STRONG><a name="[1bd]"></a>__0vsprintf</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[230]"></a>__1vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)

<P><STRONG><a name="[231]"></a>__2vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)

<P><STRONG><a name="[150]"></a>__c89vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __c89vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufferedSerial::printf(const char*, ...)
</UL>

<P><STRONG><a name="[232]"></a>vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)

<P><STRONG><a name="[176]"></a>__ARM_clz</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, depilogue.o(i.__ARM_clz), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[73]"></a>__ARM_common_switch8</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, main.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToggleLed()
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiObj::AsyncCmd(WifiATCmd, const void*)
</UL>

<P><STRONG><a name="[aa]"></a>__aeabi_atexit</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, aeabi_atexit.o(i.__aeabi_atexit))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = __aeabi_atexit &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_cf170f72
</UL>

<P><STRONG><a name="[11a]"></a>__aeabi_vec_ctor_nocookie_nodtor</STRONG> (Thumb, 34 bytes, Stack size 40 bytes, aeabi_vec_ctor_nocookie_nodtor.o(i.__aeabi_vec_ctor_nocookie_nodtor))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::CommWifi(WifiObj*, CommRF*, WT588D*)
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::SerialBase(PinName, PinName)
</UL>

<P><STRONG><a name="[1bf]"></a>__cxa_finalize</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, cxa_finalize.o(i.__cxa_finalize), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>

<P><STRONG><a name="[6c]"></a>__cxa_guard_acquire</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, cxa_guard_acquire.o(i.__cxa_guard_acquire))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanKey()
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::HandleCmd()
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::ConnectPhone()
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::PlayVoice()
</UL>

<P><STRONG><a name="[50]"></a>__cxa_pure_virtual</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, pure_virt.o(i.__cxa_pure_virtual))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __cxa_pure_virtual
</UL>
<BR>[Address Reference Count : 4]<UL><LI> retarget.o(.constdata__ZTVN4mbed10FileHandleE)
<LI> FileLike.o(.constdata__ZTVN4mbed8FileLikeE)
<LI> TimerEvent.o(.constdata__ZTVN4mbed10TimerEventE)
<LI> Stream.o(.constdata__ZTVN4mbed6StreamE)
</UL>
<P><STRONG><a name="[233]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[234]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[235]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[1c0]"></a>fflush</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fflush_f.o(i._fflush$full))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fflush
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_seek
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[1ab]"></a>fopen</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, fopen_f.o(i._fopen$full))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = fopen &rArr; freopen &rArr; _sys_open &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_longlong &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::Stream__sub_object(const char*)
</UL>

<P><STRONG><a name="[1c2]"></a>freopen</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, fopen_f.o(i._freopen$full))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = freopen &rArr; _sys_open &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_longlong &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_close
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
</UL>

<P><STRONG><a name="[164]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, scanf_fp.o(i._is_digit), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[1c5]"></a>_sys_close</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, retarget.o(i._sys_close))
<BR><BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
</UL>

<P><STRONG><a name="[151]"></a>_sys_open</STRONG> (Thumb, 210 bytes, Stack size 32 bytes, retarget.o(i._sys_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = _sys_open &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_longlong &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::FilePath(const char*)
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::fileName()
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::isFile()
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::exists()
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::file()
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::fileSystem()
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
</UL>

<P><STRONG><a name="[1c1]"></a>_sys_seek</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, retarget.o(i._sys_seek))
<BR><BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
</UL>

<P><STRONG><a name="[153]"></a>_sys_write</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, retarget.o(i._sys_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = _sys_write &rArr; serial_init &rArr; pinmap_pinout &rArr; pin_function &rArr; Set_GPIO_Clock &rArr; error &rArr; exit &rArr; mbed_die &rArr; wait_ms &rArr; us_ticker_read &rArr; us_ticker_init &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_putc
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[18f]"></a>error</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, error.o(i.error))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = error &rArr; exit &rArr; mbed_die &rArr; wait_ms &rArr; us_ticker_read &rArr; us_ticker_init &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_pinout
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_peripheral
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_merge
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_irq_init
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_GPIO_Clock
</UL>

<P><STRONG><a name="[1cb]"></a>exit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, exit.o(i.exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = exit &rArr; mbed_die &rArr; wait_ms &rArr; us_ticker_read &rArr; us_ticker_init &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_die
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
</UL>

<P><STRONG><a name="[1b5]"></a>free</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, malloc.o(i.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
</UL>

<P><STRONG><a name="[1cd]"></a>gpio_dir</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, gpio_api.o(i.gpio_dir))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = gpio_dir &rArr; pin_function &rArr; Set_GPIO_Clock &rArr; error &rArr; exit &rArr; mbed_die &rArr; wait_ms &rArr; us_ticker_read &rArr; us_ticker_init &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_function
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_out
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_in
</UL>

<P><STRONG><a name="[1cf]"></a>gpio_init</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, gpio_api.o(i.gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = gpio_init &rArr; pin_function &rArr; Set_GPIO_Clock &rArr; error &rArr; exit &rArr; mbed_die &rArr; wait_ms &rArr; us_ticker_read &rArr; us_ticker_init &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_function
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_GPIO_Clock
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_out
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_in
</UL>

<P><STRONG><a name="[fe]"></a>gpio_init_in</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, gpio.o(i.gpio_init_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = gpio_init_in &rArr; gpio_init &rArr; pin_function &rArr; Set_GPIO_Clock &rArr; error &rArr; exit &rArr; mbed_die &rArr; wait_ms &rArr; us_ticker_read &rArr; us_ticker_init &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_dir
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::InterruptIn::InterruptIn(PinName)
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalIn::DigitalIn(PinName)
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WT588D::WT588D(PinName, PinName)
</UL>

<P><STRONG><a name="[fd]"></a>gpio_init_out</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, gpio.o(i.gpio_init_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = gpio_init_out &rArr; gpio_init &rArr; pin_function &rArr; Set_GPIO_Clock &rArr; error &rArr; exit &rArr; mbed_die &rArr; wait_ms &rArr; us_ticker_read &rArr; us_ticker_init &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_dir
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalOut::DigitalOut(PinName)
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WT588D::WT588D(PinName, PinName)
</UL>

<P><STRONG><a name="[19f]"></a>gpio_irq_disable</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gpio_irq_api.o(i.gpio_irq_disable), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::InterruptIn::disable_irq()
</UL>

<P><STRONG><a name="[19e]"></a>gpio_irq_enable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gpio_irq_api.o(i.gpio_irq_enable), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::InterruptIn::enable_irq()
</UL>

<P><STRONG><a name="[1a1]"></a>gpio_irq_free</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, gpio_irq_api.o(i.gpio_irq_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = gpio_irq_free &rArr; pin_function &rArr; Set_GPIO_Clock &rArr; error &rArr; exit &rArr; mbed_die &rArr; wait_ms &rArr; us_ticker_read &rArr; us_ticker_init &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_function
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::InterruptIn::~InterruptIn()
</UL>

<P><STRONG><a name="[1a0]"></a>gpio_irq_init</STRONG> (Thumb, 184 bytes, Stack size 48 bytes, gpio_irq_api.o(i.gpio_irq_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = gpio_irq_init &rArr; pin_function &rArr; Set_GPIO_Clock &rArr; error &rArr; exit &rArr; mbed_die &rArr; wait_ms &rArr; us_ticker_read &rArr; us_ticker_init &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetVector
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_function
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_GPIO_Clock
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::InterruptIn::InterruptIn(PinName)
</UL>

<P><STRONG><a name="[b5]"></a>gpio_irq_set</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, gpio_irq_api.o(i.gpio_irq_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = gpio_irq_set &rArr; pin_function &rArr; Set_GPIO_Clock &rArr; error &rArr; exit &rArr; mbed_die &rArr; wait_ms &rArr; us_ticker_read &rArr; us_ticker_init &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_function
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::InterruptIn::rise(void(*)())
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT8910::EnableReceivedIsr()
</UL>

<P><STRONG><a name="[8a]"></a>gpio_mode</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, gpio_api.o(i.gpio_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = gpio_mode &rArr; pin_mode &rArr; Set_GPIO_Clock &rArr; error &rArr; exit &rArr; mbed_die &rArr; wait_ms &rArr; us_ticker_read &rArr; us_ticker_init &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_out
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_in
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[170]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_exceptions_buffer_init
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>

<P><STRONG><a name="[1a2]"></a>mbed_assert_internal</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, assert.o(i.mbed_assert_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; us_ticker_read &rArr; us_ticker_init &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_die
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::InterruptIn::operator int()
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_out
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_mode
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_function
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_dir
</UL>

<P><STRONG><a name="[1cc]"></a>mbed_die</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, board.o(i.mbed_die))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = mbed_die &rArr; wait_ms &rArr; us_ticker_read &rArr; us_ticker_init &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[179]"></a>mbed_main</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, retarget.o(i.mbed_main))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[178]"></a>mbed_sdk_init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, mbed_overrides.o(i.mbed_sdk_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = mbed_sdk_init &rArr; SystemCoreClockUpdate &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1ce]"></a>pin_function</STRONG> (Thumb, 78 bytes, Stack size 40 bytes, pinmap.o(i.pin_function))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = pin_function &rArr; Set_GPIO_Clock &rArr; error &rArr; exit &rArr; mbed_die &rArr; wait_ms &rArr; us_ticker_read &rArr; us_ticker_init &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_GPIO_Clock
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_irq_set
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_pinout
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_irq_init
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_irq_free
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_dir
</UL>

<P><STRONG><a name="[1d2]"></a>pin_mode</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, pinmap.o(i.pin_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = pin_mode &rArr; Set_GPIO_Clock &rArr; error &rArr; exit &rArr; mbed_die &rArr; wait_ms &rArr; us_ticker_read &rArr; us_ticker_init &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_GPIO_Clock
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_pinout
</UL>

<P><STRONG><a name="[1d7]"></a>pinmap_merge</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, pinmap_common.o(i.pinmap_merge))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = pinmap_merge &rArr; error &rArr; exit &rArr; mbed_die &rArr; wait_ms &rArr; us_ticker_read &rArr; us_ticker_init &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
</UL>

<P><STRONG><a name="[1d8]"></a>pinmap_peripheral</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, pinmap_common.o(i.pinmap_peripheral))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = pinmap_peripheral &rArr; error &rArr; exit &rArr; mbed_die &rArr; wait_ms &rArr; us_ticker_read &rArr; us_ticker_init &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
</UL>

<P><STRONG><a name="[1d9]"></a>pinmap_pinout</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, pinmap_common.o(i.pinmap_pinout))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = pinmap_pinout &rArr; pin_function &rArr; Set_GPIO_Clock &rArr; error &rArr; exit &rArr; mbed_die &rArr; wait_ms &rArr; us_ticker_read &rArr; us_ticker_init &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_mode
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_function
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
</UL>

<P><STRONG><a name="[195]"></a>serial_baud</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, serial_api.o(i.serial_baud))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = serial_baud &rArr; init_uart &rArr; HAL_UART_Init &rArr; UART_SetConfig &rArr; HAL_RCC_GetPCLK1Freq &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_uart
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::baud(int)
</UL>

<P><STRONG><a name="[192]"></a>serial_getc</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, serial_api.o(i.serial_getc))
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::_base_getc()
</UL>

<P><STRONG><a name="[197]"></a>serial_init</STRONG> (Thumb, 202 bytes, Stack size 24 bytes, serial_api.o(i.serial_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = serial_init &rArr; pinmap_pinout &rArr; pin_function &rArr; Set_GPIO_Clock &rArr; error &rArr; exit &rArr; mbed_die &rArr; wait_ms &rArr; us_ticker_read &rArr; us_ticker_init &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_pinout
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_peripheral
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_merge
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_uart
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_mode
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::SerialBase(PinName, PinName)
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
</UL>

<P><STRONG><a name="[198]"></a>serial_irq_handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, serial_api.o(i.serial_irq_handler))
<BR><BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::SerialBase(PinName, PinName)
</UL>

<P><STRONG><a name="[d8]"></a>serial_irq_set</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, serial_api.o(i.serial_irq_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = serial_irq_set &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetVector
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiObj::WifiObj(BufferedSerial*, CircularBuffer&, PinName, PinName)
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::attach(void(*)(), mbed::SerialBase::IrqType)
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufferedSerial::prime()
</UL>

<P><STRONG><a name="[147]"></a>serial_putc</STRONG> (Thumb, 30 bytes, Stack size 4 bytes, serial_api.o(i.serial_putc))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = serial_putc
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufferedSerial::txIrq()
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::_base_putc(int)
</UL>

<P><STRONG><a name="[196]"></a>serial_readable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, serial_api.o(i.serial_readable), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::readable()
</UL>

<P><STRONG><a name="[148]"></a>serial_writable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, serial_api.o(i.serial_writable))
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufferedSerial::prime()
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufferedSerial::txIrq()
</UL>

<P><STRONG><a name="[1a3]"></a>spi_format</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, spi_api.o(i.spi_format))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = spi_format &rArr; init_spi &rArr; HAL_SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_spi
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SPI::SPI(PinName, PinName, PinName, PinName)
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SPI::frequency(int)
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SPI::format(int, int)
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SPI::write(int)
</UL>

<P><STRONG><a name="[1a4]"></a>spi_frequency</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, spi_api.o(i.spi_frequency))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = spi_frequency &rArr; init_spi &rArr; HAL_SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_spi
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SPI::SPI(PinName, PinName, PinName, PinName)
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SPI::frequency(int)
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SPI::format(int, int)
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SPI::write(int)
</UL>

<P><STRONG><a name="[1a6]"></a>spi_init</STRONG> (Thumb, 218 bytes, Stack size 48 bytes, spi_api.o(i.spi_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = spi_init &rArr; pinmap_pinout &rArr; pin_function &rArr; Set_GPIO_Clock &rArr; error &rArr; exit &rArr; mbed_die &rArr; wait_ms &rArr; us_ticker_read &rArr; us_ticker_init &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_spi
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_pinout
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_peripheral
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_merge
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SPI::SPI(PinName, PinName, PinName, PinName)
</UL>

<P><STRONG><a name="[1a5]"></a>spi_master_write</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, spi_api.o(i.spi_master_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = spi_master_write
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SPI::write(int)
</UL>

<P><STRONG><a name="[1de]"></a>us_ticker_clear_interrupt</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, us_ticker.o(i.us_ticker_clear_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_irq_handler
</UL>

<P><STRONG><a name="[1df]"></a>us_ticker_disable_interrupt</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, us_ticker.o(i.us_ticker_disable_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_irq_handler
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_remove_event
</UL>

<P><STRONG><a name="[1db]"></a>us_ticker_init</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, us_ticker.o(i.us_ticker_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = us_ticker_init &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetVector
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_set_interrupt
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_set_handler
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_read
</UL>

<P><STRONG><a name="[19a]"></a>us_ticker_insert_event</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, us_ticker_api.o(i.us_ticker_insert_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = us_ticker_insert_event &rArr; us_ticker_set_interrupt &rArr; us_ticker_irq_handler &rArr;  us_ticker_set_interrupt (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_set_interrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimerEvent::insert(unsigned long long)
</UL>

<P><STRONG><a name="[1da]"></a>us_ticker_irq_handler</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, us_ticker_api.o(i.us_ticker_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + In Cycle
<LI>Call Chain = us_ticker_irq_handler &rArr;  us_ticker_set_interrupt (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_set_interrupt
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_disable_interrupt
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_clear_interrupt
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_read
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_set_interrupt
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tim_oc_irq_handler
</UL>

<P><STRONG><a name="[1a7]"></a>us_ticker_read</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, us_ticker.o(i.us_ticker_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = us_ticker_read &rArr; us_ticker_init &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_init
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_us
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_ms
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::setup(unsigned long long)
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::Timer()
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::read_ms()
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::start()
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::reset()
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_irq_handler
</UL>

<P><STRONG><a name="[19c]"></a>us_ticker_remove_event</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, us_ticker_api.o(i.us_ticker_remove_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = us_ticker_remove_event &rArr; us_ticker_set_interrupt &rArr; us_ticker_irq_handler &rArr;  us_ticker_set_interrupt (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_set_interrupt
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_disable_interrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimerEvent::~TimerEvent__sub_object()
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimerEvent::remove()
</UL>

<P><STRONG><a name="[19d]"></a>us_ticker_set_handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, us_ticker_api.o(i.us_ticker_set_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = us_ticker_set_handler &rArr; us_ticker_init &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_init
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimerEvent::TimerEvent__sub_object()
</UL>

<P><STRONG><a name="[1dd]"></a>us_ticker_set_interrupt</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, us_ticker.o(i.us_ticker_set_interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = us_ticker_set_interrupt &rArr; us_ticker_irq_handler &rArr;  us_ticker_set_interrupt (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_irq_handler
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_irq_handler
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_remove_event
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_insert_event
</UL>

<P><STRONG><a name="[6e]"></a>wait_ms</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, wait_api.o(i.wait_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = wait_ms &rArr; us_ticker_read &rArr; us_ticker_init &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_read
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Init()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleKeyProcess()
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT8910::Init(const unsigned short*, int)
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT8910::Delay(int)
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::Init()
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT8910::Init()
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommWifi::InitAsServer()
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommRF::EnterShortSleep(unsigned char)
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommRF::EnterLongSleep(unsigned char)
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WT588D::play(unsigned char)
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_die
</UL>

<P><STRONG><a name="[b2]"></a>wait_us</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, wait_api.o(i.wait_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = wait_us &rArr; us_ticker_read &rArr; us_ticker_init &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_read
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiObj::EnterCommandMode()
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT8910::write(const unsigned char*, unsigned char)
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT8910::BurstWrite(unsigned char, const unsigned char*, unsigned char)
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT8910::WriteReg(unsigned char, unsigned short)
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT8910::ReadReg(unsigned char)
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommRF::SendPacket(const unsigned char*, unsigned char)
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WT588D::play(unsigned char)
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WT588D::OneWireDrive()
</UL>

<P><STRONG><a name="[2f]"></a>void mbed::FunctionPointer::membercaller&lang;BufferedSerial&rang;(void*, char*)</STRONG> (Thumb, 66 bytes, Stack size 48 bytes, bufferedserial.o(t._ZN4mbed15FunctionPointer12membercallerI14BufferedSerialEEvPvPc))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = void mbed::FunctionPointer::membercaller&lang;BufferedSerial&rang;(void*, char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bufferedserial.o(.text)
</UL>
<P><STRONG><a name="[2a]"></a>void mbed::FunctionPointer::membercaller&lang;LT8910&rang;(void*, char*)</STRONG> (Thumb, 66 bytes, Stack size 48 bytes, lt8910.o(t._ZN4mbed15FunctionPointer12membercallerI6LT8910EEvPvPc))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = void mbed::FunctionPointer::membercaller&lang;LT8910&rang;(void*, char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lt8910.o(.text)
</UL>
<P><STRONG><a name="[2d]"></a>void mbed::FunctionPointer::membercaller&lang;WifiObj&rang;(void*, char*)</STRONG> (Thumb, 66 bytes, Stack size 48 bytes, wifiobj.o(t._ZN4mbed15FunctionPointer12membercallerI7WifiObjEEvPvPc))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = void mbed::FunctionPointer::membercaller&lang;WifiObj&rang;(void*, char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wifiobj.o(.text)
</UL>
<P><STRONG><a name="[1e0]"></a>Buffer&lang;char&rang;::clear()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, buffer.o(t._ZN6BufferIcE5clearEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Buffer&lang;char&rang;::clear()
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buffer&lang;char&rang;::Buffer(unsigned)
</UL>

<P><STRONG><a name="[14c]"></a>Buffer&lang;char&rang;::Buffer(unsigned)</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, buffer.o(t._ZN6BufferIcEC1Ej))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Buffer&lang;char&rang;::Buffer(unsigned) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buffer&lang;char&rang;::clear()
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufferedSerial::BufferedSerial(PinName, PinName, unsigned)
</UL>

<P><STRONG><a name="[236]"></a>Buffer&lang;char&rang;::Buffer__sub_object(unsigned)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, buffer.o(t._ZN6BufferIcEC1Ej), UNUSED)

<P><STRONG><a name="[14d]"></a>Buffer&lang;char&rang;::~Buffer()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, buffer.o(t._ZN6BufferIcED1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Buffer&lang;char&rang;::~Buffer() &rArr; operator delete[] (void*) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufferedSerial::~BufferedSerial()
</UL>

<P><STRONG><a name="[237]"></a>Buffer&lang;char&rang;::~Buffer__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, buffer.o(t._ZN6BufferIcED1Ev), UNUSED)

<P><STRONG><a name="[14f]"></a>Buffer&lang;char&rang;::operator =(char)</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, bufferedserial.o(t._ZN6BufferIcEaSEc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Buffer&lang;char&rang;::operator =(char) &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufferedSerial::puts(const char*)
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufferedSerial::putc(int)
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufferedSerial::write(const void*, unsigned)
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[5a]"></a>__sti___8_main_cpp_cf170f72</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = __sti___8_main_cpp_cf170f72 &rArr; mbed::SPI::SPI(PinName, PinName, PinName, PinName) &rArr; spi_init &rArr; pinmap_pinout &rArr; pin_function &rArr; Set_GPIO_Clock &rArr; error &rArr; exit &rArr; mbed_die &rArr; wait_ms &rArr; us_ticker_read &rArr; us_ticker_init &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SPI::SPI(PinName, PinName, PinName, PinName)
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FunctionPointer::FunctionPointer(void(*)())
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimerEvent::TimerEvent__sub_object()
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalIn::DigitalIn(PinName)
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalOut::DigitalOut(PinName)
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CircularBuffer::CircularBuffer(unsigned char*, int)
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::Timer()
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.init_array)
</UL>
<P><STRONG><a name="[191]"></a>gpio_read(gpio_t*)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalIn::read()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalOut::read()
</UL>

<P><STRONG><a name="[5b]"></a>__sti___10_CommRF_cpp_c19b5ab8</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, commrf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = __sti___10_CommRF_cpp_c19b5ab8 &rArr; mbed::Timer::Timer() &rArr; us_ticker_read &rArr; us_ticker_init &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::Timer()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> commrf.o(.init_array)
</UL>
<P><STRONG><a name="[3d]"></a>gpio_irq0</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, gpio_irq_api.o(i.gpio_irq0))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gpio_irq0 &rArr; handle_interrupt_in
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_interrupt_in
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gpio_irq_api.o(i.gpio_irq_init)
</UL>
<P><STRONG><a name="[3e]"></a>gpio_irq1</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, gpio_irq_api.o(i.gpio_irq1))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gpio_irq1 &rArr; handle_interrupt_in
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_interrupt_in
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gpio_irq_api.o(i.gpio_irq_init)
</UL>
<P><STRONG><a name="[3c]"></a>gpio_irq2</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, gpio_irq_api.o(i.gpio_irq2))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gpio_irq2 &rArr; handle_interrupt_in
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_interrupt_in
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gpio_irq_api.o(i.gpio_irq_init)
</UL>
<P><STRONG><a name="[1d0]"></a>handle_interrupt_in</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, gpio_irq_api.o(i.handle_interrupt_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = handle_interrupt_in
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_irq2
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_irq1
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_irq0
</UL>

<P><STRONG><a name="[1d4]"></a>init_uart</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, serial_api.o(i.init_uart))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = init_uart &rArr; HAL_UART_Init &rArr; UART_SetConfig &rArr; HAL_RCC_GetPCLK1Freq &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_baud
</UL>

<P><STRONG><a name="[3f]"></a>uart1_irq</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, serial_api.o(i.uart1_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = uart1_irq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_api.o(i.serial_irq_set)
</UL>
<P><STRONG><a name="[40]"></a>uart2_irq</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, serial_api.o(i.uart2_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = uart2_irq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_api.o(i.serial_irq_set)
</UL>
<P><STRONG><a name="[35]"></a>&lang;Func1&rang;</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, SerialBase.o(i.<Func1>))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = &lang;Func1&rang;
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FunctionPointer::FunctionPointer(void(*)())
</UL>
<BR>[Address Reference Count : 1]<UL><LI> SerialBase.o(i._ZN4mbed10SerialBaseC1E7PinNameS1_)
</UL>
<P><STRONG><a name="[42]"></a>tim_oc_irq_handler</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, us_ticker.o(i.tim_oc_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = tim_oc_irq_handler &rArr; us_ticker_irq_handler &rArr;  us_ticker_set_interrupt (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_irq_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> us_ticker.o(i.us_ticker_init)
</UL>
<P><STRONG><a name="[41]"></a>tim_update_irq_handler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, us_ticker.o(i.tim_update_irq_handler))
<BR>[Address Reference Count : 1]<UL><LI> us_ticker.o(i.us_ticker_init)
</UL>
<P><STRONG><a name="[1d3]"></a>init_spi</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, spi_api.o(i.init_spi))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = init_spi &rArr; HAL_SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_frequency
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_format
</UL>

<P><STRONG><a name="[1c3]"></a>_fp_digits</STRONG> (Thumb, 316 bytes, Stack size 56 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1b9]"></a>_printf_core</STRONG> (Thumb, 1754 bytes, Stack size 128 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsprintf
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vfprintf
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0fprintf
</UL>

<P><STRONG><a name="[1c7]"></a>_printf_post_padding</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1c6]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[3b]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsprintf
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 2]<UL><LI> printfa.o(i.__0sprintf)
<LI> printfa.o(i.__0vsprintf)
</UL>
<P><STRONG><a name="[15f]"></a>_fp_value</STRONG> (Thumb, 246 bytes, Stack size 56 bytes, scanf_fp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lmul
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[32]"></a>_scanf_char_input</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL>
<P><STRONG><a name="[34]"></a>[local to arm_exceptions_c]::__default_terminate_handler()</STRONG> (Thumb, 6 bytes, Stack size 8 bytes, arm_exceptions_globs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = [local to arm_exceptions_c]::__default_terminate_handler()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_exceptions_globs.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
